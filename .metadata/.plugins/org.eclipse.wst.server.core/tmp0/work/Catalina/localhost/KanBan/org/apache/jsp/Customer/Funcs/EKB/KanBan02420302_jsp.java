/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2016-01-15 01:53:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Customer.Funcs.EKB;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class KanBan02420302_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/Customer/Funcs/EKB/./../../../dcitag/dcitag.tld", Long.valueOf(1452650348276L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\">\r\n");
      out.write("<title>");
      if (_jspx_meth_dcitag_005freqParam_005f0(_jspx_page_context))
        return;
      out.write("</title>\r\n");
      out.write("<style>\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" charset=\"UTF-8\">\r\n");
      out.write("\tfunction updatePanelOpen(kanbanInfo, postvalue, uid, langs, value) {\r\n");
      out.write("\t\tExt.Ajax.request({\r\n");
      out.write("\t\t\tmethod : 'POST',\r\n");
      out.write("\t\t\turl : '../../Funcs/EKB/KanBan.dsc',\r\n");
      out.write("\t\t\tparams : {\r\n");
      out.write("\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\taction : 'updatePanelOpen',\r\n");
      out.write("\t\t\t\tparams_value : value,\r\n");
      out.write("\t\t\t\tsql_id : kanbanInfo.func_id\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tfailure : function(f, action) {\r\n");
      out.write("\t\t\t\tExt.Msg.alert(langs.save_result_title, langs.save_fail + \" :</br>\" + action.result.errorMessage);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction removeAllStyle(id) {\r\n");
      out.write("\t\tvar rmcnt = 0;\r\n");
      out.write("\t\twhile (document.getElementById(id) != null) {\r\n");
      out.write("\t\t\tExt.util.CSS.removeStyleSheet(id);\r\n");
      out.write("\t\t\tif (rmcnt >= 10) {\r\n");
      out.write("\t\t\t\tbreak;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\trmcnt++;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction changeKanbanGrid(newValue, classname, changeType) {\r\n");
      out.write("\t\ttry {\r\n");
      out.write("\t\t\tvar pName = null;\r\n");
      out.write("\t\t\tvar pValue = null;\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (changeType == \"FS\") {\r\n");
      out.write("\t\t\t\tpName = \"font-size\";\r\n");
      out.write("\t\t\t\tpValue = newValue + \"pt\";\r\n");
      out.write("\t\t\t\tExt.util.CSS.updateRule(\".\" + classname + \" .x-progress-text\", pName, (newValue - 2) + \"pt\");\r\n");
      out.write("\t\t\t\t//Ext.util.CSS.createStyleSheet(\".\" + classname + \" .x-progress-text {font-size:\"+newValue+ \"pt;font-family:Calibri;line-height:\"+(newValue+10)+\"px;}\");\r\n");
      out.write("\t\t\t} else if (changeType == \"FC\") {\r\n");
      out.write("\t\t\t\tpName = \"color\";\r\n");
      out.write("\t\t\t\tpValue = \"#\" + newValue;\r\n");
      out.write("\t\t\t} else if (changeType == \"BC\") {\r\n");
      out.write("\t\t\t\tpName = \"background-color\";\r\n");
      out.write("\t\t\t\tpValue = \"#\" + newValue;\r\n");
      out.write("\t\t\t} else if (changeType == \"RH\") {\r\n");
      out.write("\t\t\t\tpName = \"height\";\r\n");
      out.write("\t\t\t\tpValue = newValue + \"px\";\r\n");
      out.write("\t\t\t\tExt.util.CSS.updateRule(\".\" + classname + \" .x-progress-default\", pName, (newValue - 8) + \"px\");\r\n");
      out.write("\t\t\t\tExt.util.CSS.updateRule(\".\" + classname + \" .x-progress-text\", \"line-height\", (newValue - 8) + \"px\");\r\n");
      out.write("\t\t\t} else if (changeType == \"BcEven\") {\r\n");
      out.write("\t\t\t\tpName = \"background-color\";\r\n");
      out.write("\t\t\t\tpValue = \"#\" + newValue;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif (pName != null) {\r\n");
      out.write("\t\t\t\tif (changeType != \"BcEven\") {\r\n");
      out.write("\t\t\t\t\tExt.util.CSS.updateRule(\".\" + classname + \" .x-grid-row .x-grid-cell\", pName, pValue);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tif (changeType != \"BC\") {\r\n");
      out.write("\t\t\t\t\tExt.util.CSS.updateRule(\".\" + classname + \" .x-grid-row-alt .x-grid-cell\", pName, pValue);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tif (pName != \"background-color\" && pName != \"height\") {\r\n");
      out.write("\t\t\t\t\tExt.util.CSS.updateRule(\".\" + classname + \" .x-column-header\", pName, pValue);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t} catch (e) {\r\n");
      out.write("\t\t\tif (window.console) {\r\n");
      out.write("\t\t\t\tconsole.log(e.message);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction filterComboData(type, langsObj) {\r\n");
      out.write("\t\tvar datas = null;\r\n");
      out.write("\t\tif (type == \"NUM\" || type == \"DATE\") {\r\n");
      out.write("\t\t\tdatas = [ {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.bigger,\r\n");
      out.write("\t\t\t\t\"value\" : \">\"\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.bigger_equal,\r\n");
      out.write("\t\t\t\t\"value\" : \">=\"\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.smaller,\r\n");
      out.write("\t\t\t\t\"value\" : \"<\"\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.smaller_equal,\r\n");
      out.write("\t\t\t\t\"value\" : \"<=\"\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.equal,\r\n");
      out.write("\t\t\t\t\"value\" : \"=\"\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.not_equal,\r\n");
      out.write("\t\t\t\t\"value\" : \"<>\"\r\n");
      out.write("\t\t\t} ];\r\n");
      out.write("\t\t} else if (type == \"LIGHT\" || type == \"MAPPING\") {\r\n");
      out.write("\t\t\tdatas = [ {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.equal,\r\n");
      out.write("\t\t\t\t\"value\" : \"=\"\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.not_equal,\r\n");
      out.write("\t\t\t\t\"value\" : \"<>\"\r\n");
      out.write("\t\t\t} ];\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tdatas = [ {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.start_with,\r\n");
      out.write("\t\t\t\t\"value\" : \"startwith\"\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.end_with,\r\n");
      out.write("\t\t\t\t\"value\" : \"endwith\"\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.bigger,\r\n");
      out.write("\t\t\t\t\"value\" : \">\"\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.bigger_equal,\r\n");
      out.write("\t\t\t\t\"value\" : \">=\"\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.smaller,\r\n");
      out.write("\t\t\t\t\"value\" : \"<\"\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.smaller_equal,\r\n");
      out.write("\t\t\t\t\"value\" : \"<=\"\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.equal,\r\n");
      out.write("\t\t\t\t\"value\" : \"=\"\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.not_equal,\r\n");
      out.write("\t\t\t\t\"value\" : \"<>\"\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.like,\r\n");
      out.write("\t\t\t\t\"value\" : \"like\"\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\t\"label\" : langsObj.not_like,\r\n");
      out.write("\t\t\t\t\"value\" : \"notlike\"\r\n");
      out.write("\t\t\t} ];\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\treturn datas;\r\n");
      out.write("\t}\r\n");
      out.write("\tvar test,y1,y2,y3;\r\n");
      out.write("\tvar ckbInfos= new Object();\r\n");
      out.write("\tExt.onReady(function() {\r\n");
      out.write("\t\tvar localKeys = [ \"load_fail\",\"errmsg\",\"system_error\",\r\n");
      out.write("\t\t         \t\t\"toolbar_query_title\", \"condi_col\", \"save_msg\", \"load_def_fail\", \"load_def_success\", \"load_def_result_title\", \"load_def_confirm_title\",\r\n");
      out.write("\t\t\t\t\"load_def_confirm_msg\", \"save_fail\", \"save_success\", \"save_result_title\", \"save_fail\", \"sort_column\", \"page_size\", \"no_query\", \"no_sort\", \"asc\", \"desc\",\r\n");
      out.write("\t\t\t\t\"refresh_gap\", \"minutes\", \"favorties_setup\", \"start_with\", \"end_with\", \"bigger\", \"bigger_equal\", \"smaller\", \"smaller_equal\", \"equal\", \"not_equal\", \"like\",\r\n");
      out.write("\t\t\t\t\"not_like\", \"font_size\", \"row_height\", \"bg_color\", \"font_color\", \"condi_relation\", \"adv_search\", \"save_condi\", \"load_def_format\", \"load_def_condi\", \"to_excel\",\r\n");
      out.write("\t\t\t\t\"to_html\", \"start_timer\", \"stop_timer\", \"seconds\", \"cus_format\", \"cross_db\" ];\r\n");
      out.write("\t\tvar keys = localKeys.concat(globeKeys);\r\n");
      out.write("\t\tvar uid = '");
      if (_jspx_meth_dcitag_005freqParam_005f1(_jspx_page_context))
        return;
      out.write("';\r\n");
      out.write("\t\tthis.dcistore.setMultiLangKeys(keys);\r\n");
      out.write("\t\tthis.dcistore.setUid(uid);\r\n");
      out.write("\t\tthis.dcistore.load(function(records) {\r\n");
      out.write("\t\t\tif (records != null && records.length == 1) {\r\n");
      out.write("\t\t\t\tvar langs = buildMultiLangObjct(keys, records[0].get('langValues'));\r\n");
      out.write("\t\t\t\tvar infos = new Object();\r\n");
      out.write("\t\t\t\tinfos[\"func_id\"] = '");
      if (_jspx_meth_dcitag_005freqParam_005f2(_jspx_page_context))
        return;
      out.write("';\r\n");
      out.write("\t\t\t\tinfos[\"func_name\"] = '");
      if (_jspx_meth_dcitag_005freqParam_005f3(_jspx_page_context))
        return;
      out.write("';\r\n");
      out.write("\t\t\t\tinfos[\"conn_id\"] = '");
      if (_jspx_meth_dcitag_005freqParam_005f4(_jspx_page_context))
        return;
      out.write("';\r\n");
      out.write("\t\t\t\tinfos[\"relation_filter\"] = \"");
      if (_jspx_meth_dcitag_005freqParam_005f5(_jspx_page_context))
        return;
      out.write("\";\r\n");
      out.write("\t\t\t\tExt.Ajax.request({\r\n");
      out.write("\t\t\t\t\tmethod : 'POST',\r\n");
      out.write("\t\t\t\t\tasync: false,\r\n");
      out.write("\t\t\t\t\tsetTimeout:1000,\r\n");
      out.write("\t\t\t\t\turl : '../../CUS/Funcs/EKB/SubKanBan02420302.dsc',\r\n");
      out.write("\t\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t\tDCITag:  records[0].get('dcitagValue'),\r\n");
      out.write("\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\taction : 'init',\r\n");
      out.write("\t\t\t\t\t\tckb_id:infos.func_id\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tsuccess : function(a) {\r\n");
      out.write("\t\t\t\t\t\tvar result = Ext.JSON.decode(a.responseText);\r\n");
      out.write("\t\t\t\t\t\tif (result.success) {\r\n");
      out.write("\t\t\t\t\t\t\tinfos['body_kbid']=result.body_kbid;\r\n");
      out.write("\t\t\t\t\t\t\tinfos['ckb_id']=result.ckb_id;\r\n");
      out.write("\t\t\t\t\t\t\tinfos['ckb_name']=result.ckb_name;\r\n");
      out.write("\t\t\t\t\t\t\tinfos['combinecolumn']=result.combinecolumn;\r\n");
      out.write("\t\t\t\t\t\t\tinfos['conn_id']=result.conn_id;\r\n");
      out.write("\t\t\t\t\t\t\tinfos['head_kbid']=result.head_kbid;\r\n");
      out.write("\t\t\t\t\t\t\tinfos['head_name']=result.head_name;\r\n");
      out.write("\t\t\t\t\t\t\tinfos['body_name']=result.body_name;\r\n");
      out.write("\t\t\t\t\t\t\tinfos['condition']=' AND '+result.combinecolumn+' = ';\r\n");
      out.write("\t\t\t\t\t\t\t/*\r\n");
      out.write("\t\t\t\t\t\t\tckbInfos['body_kbid']=result.body_kbid;\r\n");
      out.write("\t\t\t\t\t\t\tckbInfos['ckb_id']=result.ckb_id;\r\n");
      out.write("\t\t\t\t\t\t\tckbInfos['ckb_name']=result.ckb_name;\r\n");
      out.write("\t\t\t\t\t\t\tckbInfos['combinecolumn']=result.combinecolumn;\r\n");
      out.write("\t\t\t\t\t\t\tckbInfos['conn_id']=result.conn_id;\r\n");
      out.write("\t\t\t\t\t\t\tckbInfos['head_kbid']=result.head_kbid;*/\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\tExt.Msg.alert(langobj.errmsg, langobj.load_fail + \"</br>\" + result.msg);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tfailure : function(f, action) {\r\n");
      out.write("\t\t\t\t\t\tExt.Msg.alert(langobj.errmsg, langobj.system_error);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tshowPage(infos, records[0].get('dcitagValue'), langs, uid);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tfunction showPage(kanbanInfo, postvalue, langs, uid) {\r\n");
      out.write("\t\t\tvar bodytaskIsRunning = false;\r\n");
      out.write("\t\t\tvar headtaskIsRunning =false;\r\n");
      out.write("\t\t\tvar bodypopuptaskIsRunning = false;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//var runner = new Ext.util.TaskRunner();\r\n");
      out.write("\t\t\t//var pageSize = 20;\r\n");
      out.write("\t\t\t//var gridClass = kanbanInfo.func_id + \"grid\";\r\n");
      out.write("\t\t\t/*var initCusKanBanStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\tfields : [ 'msg','success','ckb_id','ckb_name','combinecolumn','conn_id','body_kbid','head_kbid' ],\r\n");
      out.write("\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\t\t\turl : '../../CUS/Funcs/EKB/SubKanBan02420302.dsc',\r\n");
      out.write("\t\t\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\textraParams : {\r\n");
      out.write("\t\t\t\t\t\tDCITag: postvalue,\r\n");
      out.write("\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\taction : 'init',\r\n");
      out.write("\t\t\t\t\t\tckb_id:kanbanInfo.func_id\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\tinitCusKanBanStore.load(function(record) {\r\n");
      out.write("\t\t\t\tif (record.length > 0 && record[0].get(\"success\")) {\r\n");
      out.write("\t\t\t\t\tckbInfos['ckb_id']=record[0].get(\"ckb_id\");\r\n");
      out.write("\t\t\t\t\tckbInfos['ckb_name']=record[0].get(\"ckb_name\");\r\n");
      out.write("\t\t\t\t\tckbInfos['combinecolumn']=record[0].get(\"combinecolumn\");\r\n");
      out.write("\t\t\t\t\tckbInfos['head_kbid']=record[0].get(\"head_kbid\");\r\n");
      out.write("\t\t\t\t\tckbInfos['body_kbid']=record[0].get(\"body_kbid\");\r\n");
      out.write("\t\t\t\t\tckbInfos['conn_id']=record[0].get(\"conn_id\");\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\tExt.Msg.alert(langobj.errmsg, langobj.load_fail + \"</br>\" + record[0].get(\"msg\"));\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t});*/\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar advWin = Ext.create('Ext.window.Window', {\r\n");
      out.write("\t\t\t\tlayout : 'border',\r\n");
      out.write("\t\t\t\ttitle : langs.toolbar_query_title,\r\n");
      out.write("\t\t\t\tcloseAction : 'hide',\r\n");
      out.write("\t\t\t\theight : 300,\r\n");
      out.write("\t\t\t\twidth : 520,\r\n");
      out.write("\t\t\t\tminHeight : 300,\r\n");
      out.write("\t\t\t\tminWidth : 520,\r\n");
      out.write("\t\t\t\tmodal : true,\r\n");
      out.write("\t\t\t\tplain : true,\r\n");
      out.write("\t\t\t\tcondiStr : '',\r\n");
      out.write("\t\t\t\tkanbanStore : null,\r\n");
      out.write("\t\t\t\theadPanel : null,\r\n");
      out.write("\t\t\t\tlightsData : null,\r\n");
      out.write("\t\t\t\tlangObj : langs,\r\n");
      out.write("\t\t\t\titems : [ {\r\n");
      out.write("\t\t\t\t\txtype : 'panel',\r\n");
      out.write("\t\t\t\t\tregion : 'north',\r\n");
      out.write("\t\t\t\t\tlayout : 'anchor',\r\n");
      out.write("\t\t\t\t\tborder : 0,\r\n");
      out.write("\t\t\t\t\theight : 70,\r\n");
      out.write("\t\t\t\t\titems : [ {\r\n");
      out.write("\t\t\t\t\t\txtype : 'panel',\r\n");
      out.write("\t\t\t\t\t\tlayout : 'absolute',\r\n");
      out.write("\t\t\t\t\t\tanchor : '100% 50%',\r\n");
      out.write("\t\t\t\t\t\theight : 35,\r\n");
      out.write("\t\t\t\t\t\tcondiParams : {\r\n");
      out.write("\t\t\t\t\t\t\tcondi_col : '',\r\n");
      out.write("\t\t\t\t\t\t\tcondi_type : '',\r\n");
      out.write("\t\t\t\t\t\t\tcondi_value : '',\r\n");
      out.write("\t\t\t\t\t\t\tdcondi_col : '',\r\n");
      out.write("\t\t\t\t\t\t\tdcondi_type : '',\r\n");
      out.write("\t\t\t\t\t\t\tdcondi_value : ''\r\n");
      out.write("\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\titems : [ Ext.create('DCI.Customer.ComboBox', {\r\n");
      out.write("\t\t\t\t\t\t\tfieldLabel : langs.condi_col,\r\n");
      out.write("\t\t\t\t\t\t\tstore : {\r\n");
      out.write("\t\t\t\t\t\t\t\tfields : [ 'label', 'value', 'col_type', 'config_value' ],\r\n");
      out.write("\t\t\t\t\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\t\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttype : 'memory',\r\n");
      out.write("\t\t\t\t\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\tlabelWidth : 90,\r\n");
      out.write("\t\t\t\t\t\t\twidth : 250,\r\n");
      out.write("\t\t\t\t\t\t\tx : 0,\r\n");
      out.write("\t\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\tchange : function(combo, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar panel = this.up('panel');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar typeCombo = panel.items.get(1);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar comboStore = combo.getStore();\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar currcomp = panel.items.get(2);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar coltype = null;\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar valueComp = null;\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar configValue = null;\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfor ( var i = 0; i < comboStore.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (newValue == comboStore.getAt(i).get(\"value\")) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcoltype = comboStore.getAt(i).get(\"col_type\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tconfigValue = comboStore.getAt(i).get(\"config_value\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (coltype != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttypeCombo.getStore().loadData(filterComboData(coltype, langs));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttypeCombo.loadDefault();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (coltype == \"DATE\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvalueComp = Ext.create('DCI.Customer.DateField', {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tfieldLabel : \"\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tlabelWidth : 0,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\twidth : 150,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tname : 'condi_value',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tdefaultvalue : '',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tparentPanel : panel,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tx : 340,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tchange : function(comp, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomp.parentPanel.condiParams[\"condi_value\"] = Ext.Date.format(new Date(newValue), 'Ymd');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomp.parentPanel.condiParams[\"dcondi_value\"] = Ext.Date.format(new Date(newValue), 'Y/m/d');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else if (coltype == \"MAPPING\" || coltype == \"LIGHT\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvalueComp = Ext.create('DCI.Customer.ComboBox', {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tfieldLabel : \"\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tlabelWidth : 0,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\twidth : 150,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tname : 'condi_value',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tdefaultvalue : '',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tparentPanel : panel,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tx : 340,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tchange : function(comp, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomp.parentPanel.condiParams[\"condi_value\"] = newValue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomp.parentPanel.condiParams[\"dcondi_value\"] = comp.getRawValue();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (coltype == \"MAPPING\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tvar combodata = [];\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tvar vcData = configValue.split(\";\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tvar items = null;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tfor ( var i = 0; i < vcData.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\titems = vcData[i].split(\"=\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tif (items != null && items.length == 2) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tcombodata.push({\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue : items[0],\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlabel : items[1]\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tvalueComp.getStore().loadData(combodata);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tif (panel.up('panel').up('window').lightsData != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tvalueComp.getStore().loadData(panel.up('panel').up('window').lightsData);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvalueComp.loadDefault();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvalueComp = Ext.create('DCI.Customer.TextField', {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tfieldLabel : \"\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tlabelWidth : 0,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\twidth : 150,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tname : 'condi_value',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tdefaultvalue : '',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tparentPanel : panel,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tx : 340,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tchange : function(comp, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomp.parentPanel.condiParams[\"condi_value\"] = newValue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tcomp.parentPanel.condiParams[\"dcondi_value\"] = newValue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tpanel.remove(currcomp.getId());\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tpanel.insert(2, valueComp);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.condiParams[\"condi_col\"] = newValue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.condiParams[\"dcondi_col\"] = combo.getRawValue();\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}), Ext.create('DCI.Customer.ComboBox', {\r\n");
      out.write("\t\t\t\t\t\t\tfieldLabel : \"\",\r\n");
      out.write("\t\t\t\t\t\t\tlabelWidth : 0,\r\n");
      out.write("\t\t\t\t\t\t\twidth : 90,\r\n");
      out.write("\t\t\t\t\t\t\tx : 250,\r\n");
      out.write("\t\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\tchange : function(combo, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar panel = this.up('panel');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.condiParams[\"condi_type\"] = newValue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.condiParams[\"dcondi_type\"] = combo.getRawValue();\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}), Ext.create('DCI.Customer.TextField', {\r\n");
      out.write("\t\t\t\t\t\t\tfieldLabel : \"\",\r\n");
      out.write("\t\t\t\t\t\t\tlabelWidth : 0,\r\n");
      out.write("\t\t\t\t\t\t\twidth : 150,\r\n");
      out.write("\t\t\t\t\t\t\tname : 'condi_value',\r\n");
      out.write("\t\t\t\t\t\t\tdefaultvalue : '',\r\n");
      out.write("\t\t\t\t\t\t\tx : 340,\r\n");
      out.write("\t\t\t\t\t\t\ty : 5\r\n");
      out.write("\t\t\t\t\t\t}) ]\r\n");
      out.write("\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\txtype : 'panel',\r\n");
      out.write("\t\t\t\t\t\tanchor : '100% 50%',\r\n");
      out.write("\t\t\t\t\t\tlayout : 'absolute',\r\n");
      out.write("\t\t\t\t\t\titems : [ {\r\n");
      out.write("\t\t\t\t\t\t\txtype : 'radiogroup',\r\n");
      out.write("\t\t\t\t\t\t\tfieldLabel : langs.condi_relation,\r\n");
      out.write("\t\t\t\t\t\t\tcolumns : 2,\r\n");
      out.write("\t\t\t\t\t\t\tvertical : true,\r\n");
      out.write("\t\t\t\t\t\t\twidth : 200,\r\n");
      out.write("\t\t\t\t\t\t\tx : 0,\r\n");
      out.write("\t\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\t\titems : [ {\r\n");
      out.write("\t\t\t\t\t\t\t\tboxLabel : 'AND',\r\n");
      out.write("\t\t\t\t\t\t\t\tname : 'rb',\r\n");
      out.write("\t\t\t\t\t\t\t\tinputValue : 'AND',\r\n");
      out.write("\t\t\t\t\t\t\t\tchecked : true\r\n");
      out.write("\t\t\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\t\t\tboxLabel : 'OR',\r\n");
      out.write("\t\t\t\t\t\t\t\tname : 'rb',\r\n");
      out.write("\t\t\t\t\t\t\t\tinputValue : 'OR'\r\n");
      out.write("\t\t\t\t\t\t\t} ]\r\n");
      out.write("\t\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\t\t\ttext : langs.add,\r\n");
      out.write("\t\t\t\t\t\t\tx : 200,\r\n");
      out.write("\t\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar panel = this.up('panel');\r\n");
      out.write("\t\t\t\t\t\t\t\tvar panel1 = panel.up('panel').items.get(0);\r\n");
      out.write("\t\t\t\t\t\t\t\tvar store = panel.up('panel').up('window').items.get(1).getStore();\r\n");
      out.write("\t\t\t\t\t\t\t\tvar rb = panel.items.get(0).getValue();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tif (store != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tstore.add({\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcondi_relation : rb.rb,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcondi_col_display : panel1.condiParams.dcondi_col,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcondi_type_display : panel1.condiParams.dcondi_type,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcondi_value_display : panel1.condiParams.dcondi_value,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcondi_col : panel1.condiParams.condi_col,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcondi_type : panel1.condiParams.condi_type,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcondi_value : panel1.condiParams.condi_value\r\n");
      out.write("\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\t\t\ttext : langs._delete,\r\n");
      out.write("\t\t\t\t\t\t\tx : 250,\r\n");
      out.write("\t\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar grid = this.up('panel').up('panel').up('window').items.get(1);\r\n");
      out.write("\t\t\t\t\t\t\t\tvar selectionModel = grid.getSelectionModel();\r\n");
      out.write("\t\t\t\t\t\t\t\tif (selectionModel.hasSelection()) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tgrid.getStore().remove(grid.getSelectionModel().getSelection()[0]);\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\t\t\ttext : langs.clear,\r\n");
      out.write("\t\t\t\t\t\t\tx : 300,\r\n");
      out.write("\t\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar store = this.up('panel').up('panel').up('window').items.get(1).getStore();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tif (store != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tstore.removeAll();\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t} ]\r\n");
      out.write("\t\t\t\t\t} ]\r\n");
      out.write("\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\txtype : 'grid',\r\n");
      out.write("\t\t\t\t\tregion : 'center',\r\n");
      out.write("\t\t\t\t\trenderer : \"component\",\r\n");
      out.write("\t\t\t\t\tborder : 0,\r\n");
      out.write("\t\t\t\t\tstripeRows : true,\r\n");
      out.write("\t\t\t\t\tautoScroll : true,\r\n");
      out.write("\t\t\t\t\tloadMask : true,\r\n");
      out.write("\t\t\t\t\thideHeaders : true,\r\n");
      out.write("\t\t\t\t\tenableTextSelection : true,\r\n");
      out.write("\t\t\t\t\tviewConfig : {\r\n");
      out.write("\t\t\t\t\t\tforceFit : false,\r\n");
      out.write("\t\t\t\t\t\tautoLoad : false\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tcolumns : [ {\r\n");
      out.write("\t\t\t\t\t\tdataIndex : 'condi_relation',\r\n");
      out.write("\t\t\t\t\t\twidth : 50\r\n");
      out.write("\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\tdataIndex : 'condi_col_display',\r\n");
      out.write("\t\t\t\t\t\twidth : 150\r\n");
      out.write("\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\ttext : langs.conn_id,\r\n");
      out.write("\t\t\t\t\t\tdataIndex : 'condi_type_display',\r\n");
      out.write("\t\t\t\t\t\twidth : 100\r\n");
      out.write("\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\ttext : langs.conn_id,\r\n");
      out.write("\t\t\t\t\t\tdataIndex : 'condi_value_display',\r\n");
      out.write("\t\t\t\t\t\twidth : 200\r\n");
      out.write("\t\t\t\t\t} ],\r\n");
      out.write("\t\t\t\t\tstore : Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\t\t\tfields : [ 'condi_relation', 'condi_col_display', 'condi_type_display', 'condi_value_display', 'condi_col', 'condi_type', 'condi_value' ],\r\n");
      out.write("\t\t\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\t\t\ttype : 'memory',\r\n");
      out.write("\t\t\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\tsyncCondiString : function(window) {\r\n");
      out.write("\t\t\t\t\t\t\tvar fstr = \"\";\r\n");
      out.write("\t\t\t\t\t\t\tvar store = this;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var i = 0; i < store.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tfstr += \" \" + store.getAt(i).get(\"condi_relation\") + \" \" + store.getAt(i).get(\"condi_col\") + \" \";\r\n");
      out.write("\t\t\t\t\t\t\t\tif (store.getAt(i).get(\"condi_type\") == \"startwith\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfstr += \"like '\" + store.getAt(i).get(\"condi_value\") + \"%' \";\r\n");
      out.write("\t\t\t\t\t\t\t\t} else if (store.getAt(i).get(\"condi_type\") == \"endwith\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfstr += \"like '%\" + store.getAt(i).get(\"condi_value\") + \"' \";\r\n");
      out.write("\t\t\t\t\t\t\t\t} else if (store.getAt(i).get(\"condi_type\") == \"like\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfstr += \"like '%\" + store.getAt(i).get(\"condi_value\") + \"%' \";\r\n");
      out.write("\t\t\t\t\t\t\t\t} else if (store.getAt(i).get(\"condi_type\") == \"notlike\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfstr += \"not like '%\" + store.getAt(i).get(\"condi_value\") + \"%' \";\r\n");
      out.write("\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfstr += store.getAt(i).get(\"condi_type\") + \" '\" + store.getAt(i).get(\"condi_value\") + \"' \";\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\twindow.condiStr = fstr;\r\n");
      out.write("\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\tdatachanged : function(store, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar btn = null;\r\n");
      out.write("\t\t\t\t\t\t\t\tif (hp1 != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbtn = hp1.items.get(4);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (btn != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (store.getCount() > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tbtn.getEl().setStyle({\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tborderWidth : \"2px 2px 2px 2px\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tborderColor : 'red',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tboderStyle : 'solid'\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tbtn.getEl().setStyle({\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tborderWidth : \"1px 1px 1px 1px\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tborderColor : '',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tboderStyle : ''\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t} ],\r\n");
      out.write("\t\t\t\tbuttons : [ {\r\n");
      out.write("\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\ttext : langs.ok,\r\n");
      out.write("\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\tvar win = this.up('window');\r\n");
      out.write("\t\t\t\t\t\tvar store = win.items.get(1).getStore();\r\n");
      out.write("\t\t\t\t\t\tif (store != null) {\r\n");
      out.write("\t\t\t\t\t\t\tstore.syncCondiString(win);\r\n");
      out.write("\t\t\t\t\t\t\tif (win.kanbanStore != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\twin.kanbanStore.gridreload(win.headPanel, win.condiStr,bodygrid.getStore(),\"\");\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\twin.close();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\ttext : langs.cancel,\r\n");
      out.write("\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\tthis.up('window').close();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t} ],\r\n");
      out.write("\t\t\t\tsetComboData : function(record, selectedValue) {\r\n");
      out.write("\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\tvar combo1 = me.items.get(0).items.get(0).items.get(0);\r\n");
      out.write("\t\t\t\t\tvar cStore = combo1.getStore();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (cStore != null) {\r\n");
      out.write("\t\t\t\t\t\tcStore.loadData(record);\r\n");
      out.write("\t\t\t\t\t\tif (selectedValue == null || selectedValue == \"\") {\r\n");
      out.write("\t\t\t\t\t\t\tcombo1.loadDefault();\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\tcombo1.setValue(selectedValue);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tsetInitData : function(hpanel, gstore, record, initData) {\r\n");
      out.write("\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\tvar comp = me.items.get(0).items.get(0).items.get(0);\r\n");
      out.write("\t\t\t\t\tif (record[\"filter_col\"] == null || record[\"filter_col\"] == \"\") {\r\n");
      out.write("\t\t\t\t\t\tcomp.loadDefault();\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcomp.setValue(record[\"filter_col\"]);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tcomp = me.items.get(0).items.get(0).items.get(1);\r\n");
      out.write("\t\t\t\t\tif (record[\"filter_condi\"] == null || record[\"filter_condi\"] == \"\") {\r\n");
      out.write("\t\t\t\t\t\tcomp.loadDefault();\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcomp.setValue(record[\"filter_condi\"]);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tcomp = me.items.get(0).items.get(0).items.get(2);\r\n");
      out.write("\t\t\t\t\tif (record[\"filter_value\"] == null || record[\"filter_value\"] == \"\") {\r\n");
      out.write("\t\t\t\t\t\tcomp.loadDefault();\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcomp.setValue(record[\"filter_value\"]);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tme.headPanel = hpanel;\r\n");
      out.write("\t\t\t\t\tme.kanbanStore = gstore;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (initData != null) {\r\n");
      out.write("\t\t\t\t\t\tme.items.get(1).getStore().loadData(initData);\r\n");
      out.write("\t\t\t\t\t\tme.items.get(1).getStore().syncCondiString(advWin);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tvar panel = me.items.get(0).items.get(0);\r\n");
      out.write("\t\t\t\t\tvar comboStore = panel.items.get(0).getStore();\r\n");
      out.write("\t\t\t\t\tvar typeCombo = panel.items.get(1);\r\n");
      out.write("\t\t\t\t\tvar currcomp = panel.items.get(2);\r\n");
      out.write("\t\t\t\t\tvar coltype = null;\r\n");
      out.write("\t\t\t\t\tvar valueComp = null;\r\n");
      out.write("\t\t\t\t\tvar configValue = null;\r\n");
      out.write("\t\t\t\t\tif (comboStore != null && comboStore.getCount() > 0) {\r\n");
      out.write("\t\t\t\t\t\tcoltype = comboStore.getAt(0).get(\"col_type\");\r\n");
      out.write("\t\t\t\t\t\tconfigValue = comboStore.getAt(0).get(\"config_value\");\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tif (coltype != null) {\r\n");
      out.write("\t\t\t\t\t\t\ttypeCombo.getStore().loadData(filterComboData(coltype, langs));\r\n");
      out.write("\t\t\t\t\t\t\ttypeCombo.loadDefault();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tif (coltype == \"DATE\") {\r\n");
      out.write("\t\t\t\t\t\t\t\tvalueComp = Ext.create('DCI.Customer.DateField', {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfieldLabel : \"\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\tlabelWidth : 0,\r\n");
      out.write("\t\t\t\t\t\t\t\t\twidth : 150,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tname : 'condi_value',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tdefaultvalue : '',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tparentPanel : panel,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tx : 340,\r\n");
      out.write("\t\t\t\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tchange : function(comp, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcomp.parentPanel.condiParams[\"condi_value\"] = Ext.Date.format(new Date(newValue), 'Ymd');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcomp.parentPanel.condiParams[\"dcondi_value\"] = Ext.Date.format(new Date(newValue), 'Y/m/d');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t} else if (coltype == \"MAPPING\" || coltype == \"LIGHT\") {\r\n");
      out.write("\t\t\t\t\t\t\t\tvalueComp = Ext.create('DCI.Customer.ComboBox', {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfieldLabel : \"\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\tlabelWidth : 0,\r\n");
      out.write("\t\t\t\t\t\t\t\t\twidth : 150,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tname : 'condi_value',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tdefaultvalue : '',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tparentPanel : panel,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tx : 340,\r\n");
      out.write("\t\t\t\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tchange : function(comp, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcomp.parentPanel.condiParams[\"condi_value\"] = newValue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcomp.parentPanel.condiParams[\"dcondi_value\"] = panel.items.get(2).getRawValue();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tif (coltype == \"MAPPING\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar combodata = [];\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar vcData = configValue.split(\";\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar items = null;\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfor ( var i = 0; i < vcData.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\titems = vcData[i].split(\"=\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (items != null && items.length == 2) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcombodata.push({\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tvalue : items[0],\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tlabel : items[1]\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvalueComp.getStore().loadData(combodata);\r\n");
      out.write("\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (me.lightsData != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvalueComp.getStore().loadData(me.lightsData);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tvalueComp.loadDefault();\r\n");
      out.write("\t\t\t\t\t\t\t\tpanel.condiParams[\"condi_value\"] = valueComp.getValue();\r\n");
      out.write("\t\t\t\t\t\t\t\tpanel.condiParams[\"dcondi_value\"] = valueComp.getRawValue();\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\tvalueComp = Ext.create('DCI.Customer.TextField', {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfieldLabel : \"\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\tlabelWidth : 0,\r\n");
      out.write("\t\t\t\t\t\t\t\t\twidth : 150,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tname : 'condi_value',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tdefaultvalue : '',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tparentPanel : panel,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tx : 340,\r\n");
      out.write("\t\t\t\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tchange : function(comp, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcomp.parentPanel.condiParams[\"condi_value\"] = newValue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcomp.parentPanel.condiParams[\"dcondi_value\"] = newValue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tpanel.remove(currcomp.getId());\r\n");
      out.write("\t\t\t\t\t\t\tpanel.insert(2, valueComp);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tgetCondiValue : function() {\r\n");
      out.write("\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\tvar values = [];\r\n");
      out.write("\t\t\t\t\tvar store = me.items.get(1).getStore();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (store != null) {\r\n");
      out.write("\t\t\t\t\t\tfor ( var i = 0; i < store.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\tvalues.push({\r\n");
      out.write("\t\t\t\t\t\t\t\tcondi_relation : store.getAt(i).get(\"condi_relation\"),\r\n");
      out.write("\t\t\t\t\t\t\t\tcondi_col : store.getAt(i).get(\"condi_col\"),\r\n");
      out.write("\t\t\t\t\t\t\t\tcondi_type : store.getAt(i).get(\"condi_type\"),\r\n");
      out.write("\t\t\t\t\t\t\t\tcondi_value : store.getAt(i).get(\"condi_value\"),\r\n");
      out.write("\t\t\t\t\t\t\t\tcondi_col_display : store.getAt(i).get(\"condi_col_display\"),\r\n");
      out.write("\t\t\t\t\t\t\t\tcondi_type_display : store.getAt(i).get(\"condi_type_display\"),\r\n");
      out.write("\t\t\t\t\t\t\t\tcondi_value_display : store.getAt(i).get(\"condi_value_display\"),\r\n");
      out.write("\t\t\t\t\t\t\t\tseq : i\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\treturn values;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar hp1 = Ext.create('Ext.panel.Panel', {\r\n");
      out.write("\t\t\t\ttitle : \"\",\r\n");
      out.write("\t\t\t\tid:kanbanInfo.func_id+'-'+'hp1',\r\n");
      out.write("\t\t\t\tanchor : '100% 50%',\r\n");
      out.write("\t\t\t\tlayout : 'absolute',\r\n");
      out.write("\t\t\t\tborder : 0,\r\n");
      out.write("\t\t\t\tbodyStyle : {\r\n");
      out.write("\t\t\t\t\tbackground : '#d3e1f1'\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tbodyPadding : 0,\r\n");
      out.write("\t\t\t\ttargetGrid : null,\r\n");
      out.write("\t\t\t\tlightsData : null,\r\n");
      out.write("\t\t\t\tcondiParams : {\r\n");
      out.write("\t\t\t\t\tcondi_col : '',\r\n");
      out.write("\t\t\t\t\tcondi_type : '',\r\n");
      out.write("\t\t\t\t\tcondi_value : ''\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\titems : [ Ext.create('DCI.Customer.ComboBox', {\r\n");
      out.write("\t\t\t\t\tfieldLabel : langs.condi_col,\r\n");
      out.write("\t\t\t\t\tstore : {\r\n");
      out.write("\t\t\t\t\t\tfields : [ 'label', 'value', 'col_type', 'config_value' ],\r\n");
      out.write("\t\t\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\t\t\ttype : 'memory',\r\n");
      out.write("\t\t\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tlabelWidth : 90,\r\n");
      out.write("\t\t\t\t\twidth : 250,\r\n");
      out.write("\t\t\t\t\tx : 0,\r\n");
      out.write("\t\t\t\t\ty : 8,\r\n");
      out.write("\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\tchange : function(combo, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\tvar panel = this.up('panel');\r\n");
      out.write("\t\t\t\t\t\t\tvar typeCombo = panel.items.get(1);\r\n");
      out.write("\t\t\t\t\t\t\tvar comboStore = combo.getStore();\r\n");
      out.write("\t\t\t\t\t\t\tvar currcomp = panel.items.get(2);\r\n");
      out.write("\t\t\t\t\t\t\tvar coltype = null;\r\n");
      out.write("\t\t\t\t\t\t\tvar valueComp = null;\r\n");
      out.write("\t\t\t\t\t\t\tvar configValue = null;\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var i = 0; i < comboStore.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (newValue == comboStore.getAt(i).get(\"value\")) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcoltype = comboStore.getAt(i).get(\"col_type\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\tconfigValue = comboStore.getAt(i).get(\"config_value\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tif (coltype != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\ttypeCombo.getStore().loadData(filterComboData(coltype, langs));\r\n");
      out.write("\t\t\t\t\t\t\t\ttypeCombo.loadDefault();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tif (coltype == \"DATE\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvalueComp = Ext.create('DCI.Customer.DateField', {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfieldLabel : \"\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tlabelWidth : 0,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\twidth : 150,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tname : 'condi_value',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tdefaultvalue : '',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tparentPanel : panel,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tx : 340,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ty : 8,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tchange : function(comp, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcomp.parentPanel.condiParams[\"condi_value\"] = Ext.Date.format(new Date(newValue), 'Ymd');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t} else if (coltype == \"MAPPING\" || coltype == \"LIGHT\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvalueComp = Ext.create('DCI.Customer.ComboBox', {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfieldLabel : \"\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tlabelWidth : 0,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\twidth : 150,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tname : 'condi_value',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tdefaultvalue : '',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tparentPanel : panel,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tx : 340,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ty : 8,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tchange : function(comp, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcomp.parentPanel.condiParams[\"condi_value\"] = newValue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (coltype == \"MAPPING\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvar combodata = [];\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvar vcData = configValue.split(\";\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvar items = null;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfor ( var i = 0; i < vcData.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\titems = vcData[i].split(\"=\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (items != null && items.length == 2) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcombodata.push({\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tvalue : items[0],\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tlabel : items[1]\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvalueComp.getStore().loadData(combodata);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (panel.lightsData != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvalueComp.getStore().loadData(panel.lightsData);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvalueComp.loadDefault();\r\n");
      out.write("\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvalueComp = Ext.create('DCI.Customer.TextField', {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfieldLabel : \"\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tlabelWidth : 0,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\twidth : 150,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tname : 'condi_value',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tdefaultvalue : '',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tparentPanel : panel,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tx : 340,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ty : 8,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tchange : function(comp, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcomp.parentPanel.condiParams[\"condi_value\"] = newValue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tpanel.remove(currcomp.getId());\r\n");
      out.write("\t\t\t\t\t\t\t\tpanel.insert(2, valueComp);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tpanel.condiParams[\"condi_col\"] = newValue;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}), Ext.create('DCI.Customer.ComboBox', {\r\n");
      out.write("\t\t\t\t\tfieldLabel : \"\",\r\n");
      out.write("\t\t\t\t\tlabelWidth : 0,\r\n");
      out.write("\t\t\t\t\twidth : 90,\r\n");
      out.write("\t\t\t\t\tx : 250,\r\n");
      out.write("\t\t\t\t\ty : 8,\r\n");
      out.write("\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\tchange : function(combo, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\tvar panel = this.up('panel');\r\n");
      out.write("\t\t\t\t\t\t\tpanel.condiParams[\"condi_type\"] = newValue;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}), Ext.create('DCI.Customer.TextField', {\r\n");
      out.write("\t\t\t\t\tfieldLabel : \"\",\r\n");
      out.write("\t\t\t\t\tlabelWidth : 0,\r\n");
      out.write("\t\t\t\t\twidth : 150,\r\n");
      out.write("\t\t\t\t\tname : 'condi_value',\r\n");
      out.write("\t\t\t\t\tdefaultvalue : '',\r\n");
      out.write("\t\t\t\t\tx : 340,\r\n");
      out.write("\t\t\t\t\ty : 8\r\n");
      out.write("\t\t\t\t}), {\r\n");
      out.write("\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\tcls : 'search-toolbar',\r\n");
      out.write("\t\t\t\t\ttooltip : langs.search,\r\n");
      out.write("\t\t\t\t\twidth : 30,\r\n");
      out.write("\t\t\t\t\theight : 30,\r\n");
      out.write("\t\t\t\t\tx : 500,\r\n");
      out.write("\t\t\t\t\ty : 3,\r\n");
      out.write("\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\tvar panel = this.up('panel');\r\n");
      out.write("\t\t\t\t\t\t//var store = panel.targetGrid.getStore();\r\n");
      out.write("\t\t\t\t\t\tvar headstore =Ext.getCmp(kanbanInfo.func_id+'-'+'headgrid').getStore();\r\n");
      out.write("\t\t\t\t\t\tvar bodystore =Ext.getCmp(kanbanInfo.func_id+'-'+'bodygrid').getStore();\r\n");
      out.write("\t\t\t\t\t\tkanbanInfo.relation_filter = \"\";\r\n");
      out.write("\t\t\t\t\t\t/*if (advWin != null && advWin.condiStr != null && advWin.condiStr.length > 0) {\r\n");
      out.write("\t\t\t\t\t\t\theadstore.advGridReload(panel.up('panel'), advWin.CondiStr);\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\theadstore.gridreload(panel.up('panel'));\r\n");
      out.write("\t\t\t\t\t\t}*/\r\n");
      out.write("\t\t\t\t\t\tvar bodycondi=\"\";\r\n");
      out.write("\t\t\t\t\t\tif(headstore.getAt(0)!=null){\r\n");
      out.write("\t\t\t\t\t\t  \tbodycondi=kanbanInfo.condition+\"'\"+headstore.getAt(0).get(kanbanInfo.combinecolumn)+\"'\";\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\theadstore.gridreload(panel.up('panel'), advWin.condiStr,bodystore,bodycondi);\r\n");
      out.write("\t\t\t\t\t\t\t//alert('2:'+headstore.getAt(0).get(kanbanInfo.combinecolumn));\r\n");
      out.write("\t\t\t\t\t\t\t//bodystore.gridreload(panel.up('panel'), kanbanInfo.condition+\"'\"+headstore.getAt(0).get(kanbanInfo.combinecolumn)+\"'\");\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\tcls : 'advsearchbutton',\r\n");
      out.write("\t\t\t\t\ttooltip : langs.adv_search,\r\n");
      out.write("\t\t\t\t\twidth : 30,\r\n");
      out.write("\t\t\t\t\theight : 30,\r\n");
      out.write("\t\t\t\t\tx : 530,\r\n");
      out.write("\t\t\t\t\ty : 3,\r\n");
      out.write("\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\tif (advWin != null) {\r\n");
      out.write("\t\t\t\t\t\t\tadvWin.show();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\tcls : 'savebutton',\r\n");
      out.write("\t\t\t\t\ttooltip : langs.save_format,\r\n");
      out.write("\t\t\t\t\twidth : 30,\r\n");
      out.write("\t\t\t\t\theight : 30,\r\n");
      out.write("\t\t\t\t\tx : 560,\r\n");
      out.write("\t\t\t\t\ty : 3,\r\n");
      out.write("\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\tvar panel = this.up('panel');\r\n");
      out.write("\t\t\t\t\t\tvar panel2 = this.up('panel').up('panel').items.get(1);\r\n");
      out.write("\t\t\t\t\t\tvar cols = this.up('panel').targetGrid.columns;\r\n");
      out.write("\t\t\t\t\t\tvar colinfo = [];\r\n");
      out.write("\t\t\t\t\t\tvar condiInfo = new Object();\r\n");
      out.write("\t\t\t\t\t\tvar grid = panel.targetGrid;\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\tif (grid == null) {\r\n");
      out.write("\t\t\t\t\t\t\tcondiInfo[\"popup_width\"] = 200;\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\tcondiInfo[\"popup_width\"] = grid.getPopupWidth();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tfor ( var attrname in panel2.displayParams) {\r\n");
      out.write("\t\t\t\t\t\t\tcondiInfo[attrname] = panel2.displayParams[attrname];\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tfor ( var i = 0; i < cols.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\tvar obj = new Object();\r\n");
      out.write("\t\t\t\t\t\t\tobj['col_id'] = cols[i].colid;\r\n");
      out.write("\t\t\t\t\t\t\tobj['col_index'] = cols[i].getIndex();\r\n");
      out.write("\t\t\t\t\t\t\tobj['col_width'] = cols[i].width;\r\n");
      out.write("\t\t\t\t\t\t\tobj['col_visible'] = cols[i].hidden ? 0 : 1;\r\n");
      out.write("\t\t\t\t\t\t\tcolinfo.push(obj);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tExt.Ajax.request({\r\n");
      out.write("\t\t\t\t\t\t\tmethod : 'POST',\r\n");
      out.write("\t\t\t\t\t\t\turl : '../../Funcs/EKB/KanBan.dsc',\r\n");
      out.write("\t\t\t\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\t\t\taction : 'saveFormat',\r\n");
      out.write("\t\t\t\t\t\t\t\tgridid : kanbanInfo.func_id,\r\n");
      out.write("\t\t\t\t\t\t\t\tdatas : Ext.encode(condiInfo),\r\n");
      out.write("\t\t\t\t\t\t\t\t//觸發自訂格式按鈕\r\n");
      out.write("\t\t\t\t\t\t\t\tcoldatas : '[{\"col_id\":\"forCusIcon\",\"col_index\":0,\"col_width\":100,\"col_visible\":1}]'//Ext.encode(colinfo)\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\tsuccess : function(a) {\r\n");
      out.write("\t\t\t\t\t\t\t\t/*if (grid != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tExt.getCmp(kanbanInfo.func_id+'-'+'headgrid').addCusFormatIcon();\r\n");
      out.write("\t\t\t\t\t\t\t\t\tExt.getCmp(kanbanInfo.func_id+'-'+'bodygrid').addCusFormatIcon();\r\n");
      out.write("\t\t\t\t\t\t\t\t}*/\r\n");
      out.write("\t\t\t\t\t\t\t\tvar displayInfo = {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tgrid_font_size : panel2.displayParams['fs'],\r\n");
      out.write("\t\t\t\t\t\t\t\t\tgrid_font_color : panel2.displayParams['fc'],\r\n");
      out.write("\t\t\t\t\t\t\t\t\tgrid_row_height : panel2.displayParams['rh'],\r\n");
      out.write("\t\t\t\t\t\t\t\t\tgrid_row_color : panel2.displayParams['bc'],\r\n");
      out.write("\t\t\t\t\t\t\t\t\tgrid_row_even_color : panel2.displayParams['bcEven']\r\n");
      out.write("\t\t\t\t\t\t\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tpanel2.setCss(displayInfo);\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.Msg.alert(langs.save_result_title, langs.save_success);\r\n");
      out.write("\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\tfailure : function(f, action) {\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.Msg.alert(langs.save_result_title, langs.save_fail + \" :</br>\" + action.result.errorMessage);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\tcls : 'backdefault_greenbutton',\r\n");
      out.write("\t\t\t\t\ttooltip : langs.load_def_format,\r\n");
      out.write("\t\t\t\t\twidth : 30,\r\n");
      out.write("\t\t\t\t\theight : 30,\r\n");
      out.write("\t\t\t\t\tx : 590,\r\n");
      out.write("\t\t\t\t\ty : 3,\r\n");
      out.write("\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\tvar panel = this.up('panel').up('panel').items.get(1);\r\n");
      out.write("\t\t\t\t\t\tExt.MessageBox.confirm(langs.load_def_confirm_title, langs.load_def_confirm_msg, function(btn) {\r\n");
      out.write("\t\t\t\t\t\t\tif (btn == 'yes') {\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.Ajax.request({\r\n");
      out.write("\t\t\t\t\t\t\t\t\tmethod : 'POST',\r\n");
      out.write("\t\t\t\t\t\t\t\t\turl : '../../Funcs/EKB/KanBan.dsc',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\taction : 'loadDefFormat',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tdatas : \"dodelete\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tgridid : kanbanInfo.func_id\r\n");
      out.write("\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\tsuccess : function(a) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvar displayInfo = {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tgrid_font_size : 13,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tgrid_font_color : '000000',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tgrid_row_height : 28,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tgrid_row_color : null,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tgrid_row_even_color : null\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t};\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tpanel.setCss(displayInfo);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (headgrid != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\theadgrid.rmCusFormatIcon();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\theadgrid.setPopupWidth(200);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (initQueryHeadStore != null && initQueryHeadStore.getCount() > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tinitQueryHeadStore.load(function(records) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\theadgrid.reloadHeadGridFormat(records[0].get('cols'), headGridStore);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (bodygrid != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tbodygrid.rmCusFormatIcon();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tbodygrid.setPopupWidth(200);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (initQueryGridStore != null && initQueryGridStore.getCount() > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tinitQueryGridStore.load(function(records) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tbodygrid.reloadBodyGridFormat(records[0].get('cols'), gridStore);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tExt.Msg.alert(langs.load_def_result_title, langs.load_def_success);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfailure : function(f, action) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tExt.Msg.alert(langs.load_def_result_title, langs.load_def_fail + \" :</br>\" + action.result.errorMessage);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\tcls : 'save-toolbar',\r\n");
      out.write("\t\t\t\t\ttooltip : langs.save_condi,\r\n");
      out.write("\t\t\t\t\twidth : 30,\r\n");
      out.write("\t\t\t\t\theight : 30,\r\n");
      out.write("\t\t\t\t\tx : 620,\r\n");
      out.write("\t\t\t\t\ty : 3,\r\n");
      out.write("\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\tvar panel = this.up('panel');\r\n");
      out.write("\t\t\t\t\t\tvar panel2 = this.up('panel').up('panel').items.get(1);\r\n");
      out.write("\t\t\t\t\t\tvar condiInfo = new Object();\r\n");
      out.write("\t\t\t\t\t\tvar advdatas = null;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tfor ( var attrname in panel.condiParams) {\r\n");
      out.write("\t\t\t\t\t\t\tcondiInfo[attrname] = panel.condiParams[attrname];\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tfor ( var attrname in panel2.sortParams) {\r\n");
      out.write("\t\t\t\t\t\t\tcondiInfo[attrname] = panel2.sortParams[attrname];\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tif (condiInfo.condi_col == null || condiInfo.condi_col == \"\") {\r\n");
      out.write("\t\t\t\t\t\t\tcondiInfo[\"condi_type\"] = \"\";\r\n");
      out.write("\t\t\t\t\t\t\tcondiInfo[\"condi_value\"] = \"\";\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tif (condiInfo.sort_col == null || condiInfo.sort_col == \"\") {\r\n");
      out.write("\t\t\t\t\t\t\tcondiInfo[\"sort_type\"] = \"\";\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tif (advWin != null) {\r\n");
      out.write("\t\t\t\t\t\t\tif (advWin.getCondiValue() != null && advWin.getCondiValue().length > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\tadvdatas = Ext.encode(advWin.getCondiValue());\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tExt.Ajax.request({\r\n");
      out.write("\t\t\t\t\t\t\tmethod : 'POST',\r\n");
      out.write("\t\t\t\t\t\t\turl : '../../Funcs/EKB/KanBan.dsc',\r\n");
      out.write("\t\t\t\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\t\t\taction : 'saveCondi',\r\n");
      out.write("\t\t\t\t\t\t\t\tsql_id : kanbanInfo.func_id,\r\n");
      out.write("\t\t\t\t\t\t\t\tdatas : Ext.encode(condiInfo),\r\n");
      out.write("\t\t\t\t\t\t\t\tadvDatas : advdatas\r\n");
      out.write("\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\tsuccess : function(a) {\r\n");
      out.write("\t\t\t\t\t\t\t\tkanbanInfo.relation_filter = \"\";\r\n");
      out.write("\t\t\t\t\t\t\t\tvar store = panel.targetGrid.getStore();\r\n");
      out.write("\t\t\t\t\t\t\t\tstore.gridreload(panel.up('panel'), advWin.condiStr);\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.Msg.alert(langs.save_result_title, langs.save_success);\r\n");
      out.write("\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\tfailure : function(f, action) {\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.Msg.alert(langs.save_result_title, langs.save_fail + \" :</br>\" + action.result.errorMessage);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\tcls : 'backdefault_bluebutton',\r\n");
      out.write("\t\t\t\t\ttooltip : langs.load_def_condi,\r\n");
      out.write("\t\t\t\t\twidth : 30,\r\n");
      out.write("\t\t\t\t\theight : 30,\r\n");
      out.write("\t\t\t\t\tx : 650,\r\n");
      out.write("\t\t\t\t\ty : 3,\r\n");
      out.write("\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\tvar head = this.up('panel').up('panel');\r\n");
      out.write("\t\t\t\t\t\tvar panel1 = head.items.get(0);\r\n");
      out.write("\t\t\t\t\t\tvar panel2 = head.items.get(1);\r\n");
      out.write("\t\t\t\t\t\tExt.MessageBox.confirm(langs.load_def_confirm_title, langs.load_def_confirm_msg, function(btn) {\r\n");
      out.write("\t\t\t\t\t\t\tif (btn == 'yes') {\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.Ajax.request({\r\n");
      out.write("\t\t\t\t\t\t\t\t\tmethod : 'POST',\r\n");
      out.write("\t\t\t\t\t\t\t\t\turl : '../../Funcs/EKB/KanBan.dsc',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\taction : 'loadDefCondi',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tdatas : \"dodelete\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tsql_id : kanbanInfo.func_id\r\n");
      out.write("\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\tsuccess : function(a) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvar displayInfo = {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tfilter_col : '',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tfilter_condi : '',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tfilter_value : '',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tsort_col : '',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tsort_type : '',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tpage_size : pageSize\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tpanel1.setInitData(displayInfo);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (advWin != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar store = advWin.items.get(1).getStore();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (store != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tstore.removeAll();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tpanel2.setInitData(displayInfo);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tpanel1.targetGrid.getStore().gridreload(head, \"\",bodygrid.getStore(),\"\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tExt.Msg.alert(langs.load_def_result_title, langs.load_def_success);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfailure : function(f, action) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tExt.Msg.alert(langs.load_def_result_title, langs.load_def_fail + \" :</br>\" + action.result.errorMessage);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t} ],\r\n");
      out.write("\t\t\t\tsetComboData : function(record, selectedValue) {\r\n");
      out.write("\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\tvar combo1 = me.items.get(0);\r\n");
      out.write("\t\t\t\t\tvar cStore = combo1.getStore();\r\n");
      out.write("\t\t\t\t\trecord.unshift({\r\n");
      out.write("\t\t\t\t\t\tlabel : langs.no_query,\r\n");
      out.write("\t\t\t\t\t\tvalue : '',\r\n");
      out.write("\t\t\t\t\t\tcol_type : 'CHAR',\r\n");
      out.write("\t\t\t\t\t\tconfig_value : ''\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\tif (cStore != null) {\r\n");
      out.write("\t\t\t\t\t\tcStore.loadData(record);\r\n");
      out.write("\t\t\t\t\t\tif (selectedValue == null || selectedValue == \"\") {\r\n");
      out.write("\t\t\t\t\t\t\tcombo1.loadDefault();\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\tcombo1.setValue(selectedValue);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\trecord.shift();\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tsetInitData : function(record) {\r\n");
      out.write("\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\tvar comp = me.items.get(0);\r\n");
      out.write("\t\t\t\t\tif (record[\"filter_col\"] == null || record[\"filter_col\"] == \"\") {\r\n");
      out.write("\t\t\t\t\t\tcomp.loadDefault();\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcomp.setValue(record[\"filter_col\"]);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tcomp = me.items.get(1);\r\n");
      out.write("\t\t\t\t\tif (record[\"filter_condi\"] == null || record[\"filter_condi\"] == \"\") {\r\n");
      out.write("\t\t\t\t\t\tcomp.loadDefault();\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcomp.setValue(record[\"filter_condi\"]);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tcomp = me.items.get(2);\r\n");
      out.write("\t\t\t\t\tif (record[\"filter_value\"] == null || record[\"filter_value\"] == \"\") {\r\n");
      out.write("\t\t\t\t\t\tcomp.loadDefault();\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcomp.setValue(record[\"filter_value\"]);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tcomp = me.up('panel');\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (record[\"op_is_open\"] == null || record[\"op_is_open\"].length == 0) {\r\n");
      out.write("\t\t\t\t\t\tcomp.expand();\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tif (record[\"op_is_open\"] == \"0\") {\r\n");
      out.write("\t\t\t\t\t\t\tcomp.collapse();\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\tcomp.expand();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t/*generateHeadGrid(hp1,kanbanInfo, postvalue, langs, uid);\r\n");
      out.write("\t\t\tgenerateBodyGrid(hp1,kanbanInfo, postvalue, langs, uid);*/\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t/******************************************表頭**************************************************/\r\n");
      out.write("\tvar hpageSize = 1;\r\n");
      out.write("\tvar headkid=kanbanInfo.head_kbid;//\"K0005\";\r\n");
      out.write("\tvar headGridClass = kanbanInfo.func_id+'-'+headkid + \"grid\";\r\n");
      out.write("\t//runner = new Ext.util.TaskRunner();\r\n");
      out.write("\tvar headGridStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\tautoLoad : false,\r\n");
      out.write("\t\tfields : [],\r\n");
      out.write("\t\tproxy : {\r\n");
      out.write("\t\t\tasync: true,\r\n");
      out.write("\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\ttimeout : 300000,\r\n");
      out.write("\t\t\turl : '../../Funcs/EKB/KanBan.dsc',\r\n");
      out.write("\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\treader : {\r\n");
      out.write("\t\t\t\troot : 'items',\r\n");
      out.write("\t\t\t\ttotalProperty : 'total'\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\textraParams : {\r\n");
      out.write("\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\taction : 'query',\r\n");
      out.write("\t\t\t\tpage : 1,\r\n");
      out.write("\t\t\t\tpagesize : hpageSize,\r\n");
      out.write("\t\t\t\tfilter : '',\r\n");
      out.write("\t\t\t\tsort : '',\r\n");
      out.write("\t\t\t\tsql_id : headkid,\r\n");
      out.write("\t\t\t\tconn_id : kanbanInfo.conn_id\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tpageSize : hpageSize,\r\n");
      out.write("\t\tgridreload : function(headPanel, filter,bstore,bodycondi) {\r\n");
      out.write("\t\t\tvar store = this;\r\n");
      out.write("\t\t\tvar panel1 = headPanel.items.get(0);\r\n");
      out.write("\t\t\tvar panel2 = headPanel.items.get(1);\r\n");
      out.write("\t\t\tvar fstr = \"\";\r\n");
      out.write("\t\t\tvar sstr = \"\";\r\n");
      out.write("\t\t\tif (filter == null || filter.length == 0) {\r\n");
      out.write("\t\t\t\tvar col = panel1.condiParams.condi_col;\r\n");
      out.write("\t\t\t\tvar condi = panel1.condiParams.condi_type;\r\n");
      out.write("\t\t\t\tvar value = panel1.condiParams.condi_value;\r\n");
      out.write("\t\t\t\tif (col != null && col != \"\") {\r\n");
      out.write("\t\t\t\t\tfstr = \" and \" + col + \" \";\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (condi == \"startwith\") {\r\n");
      out.write("\t\t\t\t\t\tfstr += \"like '\" + value + \"%' \";\r\n");
      out.write("\t\t\t\t\t} else if (condi == \"endwith\") {\r\n");
      out.write("\t\t\t\t\t\tfstr += \"like '%\" + value + \"' \";\r\n");
      out.write("\t\t\t\t\t} else if (condi == \"like\") {\r\n");
      out.write("\t\t\t\t\t\tfstr += \"like '%\" + value + \"%' \";\r\n");
      out.write("\t\t\t\t\t} else if (condi == \"notlike\") {\r\n");
      out.write("\t\t\t\t\t\tfstr += \"not like '%\" + value + \"%' \";\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tfstr += condi + \" '\" + value + \"' \";\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tfstr = filter;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (panel2.sortParams.sort_col != null && panel2.sortParams.sort_col != \"\") {\r\n");
      out.write("\t\t\t\tsstr = panel2.sortParams.sort_col + \" \" + panel2.sortParams.sort_type;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (store.getProxy().extraParams.hasOwnProperty('page')) {\r\n");
      out.write("\t\t\t\tstore.getProxy().extraParams['page'] = 1;\r\n");
      out.write("\t\t\t\tstore.currentPage = 1;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (store.getProxy().extraParams.hasOwnProperty('pagesize')) {\r\n");
      out.write("\t\t\t\tstore.getProxy().extraParams['pagesize'] = hpageSize;\r\n");
      out.write("\t\t\t\tstore.pageSize = hpageSize;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (store.getProxy().extraParams.hasOwnProperty('filter')) {\r\n");
      out.write("\t\t\t\tif (kanbanInfo.relation_filter != null && kanbanInfo.relation_filter.length > 0) {\r\n");
      out.write("\t\t\t\t\tstore.getProxy().extraParams['filter'] = kanbanInfo.relation_filter;\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tstore.getProxy().extraParams['filter'] = fstr;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (store.getProxy().extraParams.hasOwnProperty('sort')) {\r\n");
      out.write("\t\t\t\tstore.getProxy().extraParams['sort'] = sstr;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif (panel1.targetGrid != null) {\r\n");
      out.write("\t\t\t\tpanel1.targetGrid.getSelectionModel().deselectAll();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tstore.on(\"load\", function() {\r\n");
      out.write("\t\t\t\tif(store.getAt(0)!=null){\r\n");
      out.write("\t\t\t\t\tif (bodygrid.usePopup) {\r\n");
      out.write("\t\t\t\t\t\tpopuptask.stop();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tbodycondi=kanbanInfo.condition+\"'\"+store.getAt(0).get(kanbanInfo.combinecolumn)+\"'\";\r\n");
      out.write("\t\t\t\t\tif(bstore!=undefined)\r\n");
      out.write("\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\tif (bstore.getProxy().extraParams.hasOwnProperty('filter')) {\r\n");
      out.write("\t\t\t\t\t\t\tif (kanbanInfo.relation_filter != null && kanbanInfo.relation_filter.length > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\tbstore.getProxy().extraParams['filter'] = kanbanInfo.relation_filter;\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\tbstore.getProxy().extraParams['filter'] = bodycondi;\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tbstore.load(function(){\r\n");
      out.write("\t\t\t\t\t\t\tif(Ext.getCmp(kanbanInfo.func_id+'-'+'bodygrid').getStore().totalCount==0){\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.getCmp(kanbanInfo.func_id+'-'+'bodygrid').dockedItems.get(3).showPopup(\"\",\"\");\r\n");
      out.write("\t\t\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.getCmp(kanbanInfo.func_id+'-'+'bodygrid').getSelectionModel().select(0);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\tif(bodygrid.usePopup){\r\n");
      out.write("\t\t\t\t\t\t\t\tpopuptask.executeTask();\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\tbstore.getProxy().extraParams['filter'] =  \" and \"+kanbanInfo.combinecolumn+\"='' \" ;\r\n");
      out.write("\t\t\t\t\tbstore.load(function(){Ext.getCmp(kanbanInfo.func_id+'-'+'bodygrid').dockedItems.get(3).showPopup(\"\",\"\");});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tthis,\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t     single:true //設定執行一次性的事件\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\tstore.load();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t/*\r\n");
      out.write("\tmarqueepanel = Ext.create('Ext.panel.Panel', {\r\n");
      out.write("\t\tregion : 'north',\r\n");
      out.write("\t\theight : 30,\r\n");
      out.write("\t\twidth : '100%',\r\n");
      out.write("\t\tborder : 2,\r\n");
      out.write("\t\ttitle : \"\",\r\n");
      out.write("\t\tdock : 'top',\r\n");
      out.write("\t\tdataTask : null,\r\n");
      out.write("\t\tscrollTask : null,\r\n");
      out.write("\t\tmarqueeUrl : '../../Funcs/EKB/KanBan.dsc',\r\n");
      out.write("\t\thtml : '',\r\n");
      out.write("\t\tstartMarquee : function(panel, refreshGap, showType) {\r\n");
      out.write("\t\t\tvar mRunner = new Ext.util.TaskRunner();\r\n");
      out.write("\t\t\tvar taskScroll = null;\r\n");
      out.write("\t\t\tvar mStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\tfields : [ 'message' ],\r\n");
      out.write("\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\t\t\turl : this.marqueeUrl,\r\n");
      out.write("\t\t\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\troot : 'marquee'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\textraParams : {\r\n");
      out.write("\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\taction : 'marqueeData',\r\n");
      out.write("\t\t\t\t\t\tsql_id : headkid,\r\n");
      out.write("\t\t\t\t\t\tconn_id : kanbanInfo.conn_id\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tfunction loadData(callback) {\r\n");
      out.write("\t\t\t\tif (mStore != null) {\r\n");
      out.write("\t\t\t\t\tmStore.load(function(record) {\r\n");
      out.write("\t\t\t\t\t\tif (record.length > 0) {\r\n");
      out.write("\t\t\t\t\t\t\tvar value = \"\";\r\n");
      out.write("\t\t\t\t\t\t\tif (showType == '1') {\r\n");
      out.write("\t\t\t\t\t\t\t\tfor ( var i = 0; i < record.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (i == 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvalue = '<div style=\"font-size:22px;\"><Marquee height=\"' + panel.height\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t+ '\" scrollamount=\"3\" onmouseover=\"this.stop()\" onmouseout=\"this.start()\">' + record[i].get('message');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvalue += \"                              \" + record[i].get('message');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (i == record.length - 1) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvalue += \"</div></Marquee>\";\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\tpanel.update(value);\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (panel.scrollTask != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.scrollTask.stop();\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.body.dom.scrollTop = 0;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\tvar t = \"\";\r\n");
      out.write("\t\t\t\t\t\t\t\tfor ( var i = 0; i < record.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (i == 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tt = '<div style=\"font-size:22px;text-align:center;overflow:hidden;height:'+panel.height+'px;\">' + record[i].get('message')\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t+ \"</div>\";\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvalue = '<div>' + t;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvalue += '<div  style=\"font-size:22px;text-align:center;overflow:hidden;height:'+panel.height+'px;\">' + record[i].get('message')\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t+ '</div>';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (i == record.length - 1) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvalue += t + \"</div>\";\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tpanel.update(value);\r\n");
      out.write("\t\t\t\t\t\t\t\tif (panel.scrollTask != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.scrollTask.start(5000);\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\tcallback(panel);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar taskGetData = mRunner.newTask({\r\n");
      out.write("\t\t\t\trun : function() {\r\n");
      out.write("\t\t\t\t\tloadData(function(panel) {\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tthis.dataTask = taskGetData;\r\n");
      out.write("\t\t\tloadData(function(panel) {\r\n");
      out.write("\t\t\t\ttaskGetData.start(refreshGap * 1000);\r\n");
      out.write("\t\t\t\tvar currRow = 0;\r\n");
      out.write("\t\t\t\tif (showType == \"2\") {\r\n");
      out.write("\t\t\t\t\ttaskScroll = mRunner.newTask({\r\n");
      out.write("\t\t\t\t\t\trun : function() {\r\n");
      out.write("\t\t\t\t\t\t\tif (mStore.getCount() > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (currRow == 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.body.dom.scrollTop = 0;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\tif (currRow == mStore.getCount() - 1) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcurrRow = 0;\r\n");
      out.write("\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcurrRow++;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\tpanel.scrollBy(0, panel.height, true);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\tpanel.scrollTask = taskScroll;\r\n");
      out.write("\t\t\t\t\ttaskScroll.start(5000);\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tpanel.scrollTask = null;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tstopScrollTask : function() {\r\n");
      out.write("\t\t\tif (this.dataTask != null) {\r\n");
      out.write("\t\t\t\tthis.dataTask.stop();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif (this.scrollTask != null) {\r\n");
      out.write("\t\t\t\tthis.scrollTask.stop();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tlisteners : {\r\n");
      out.write("\t\t\tel : {\r\n");
      out.write("\t\t\t\tmouseover : function(event, html, eOpts) {\r\n");
      out.write("\t\t\t\t\tif (marqueepanel != null) {\r\n");
      out.write("\t\t\t\t\t\tif (marqueepanel.scrollTask != null) {\r\n");
      out.write("\t\t\t\t\t\t\tmarqueepanel.scrollTask.stop();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tbody : {\r\n");
      out.write("\t\t\t\tmouseout : function(event, html, eOpts) {\r\n");
      out.write("\t\t\t\t\tif (marqueepanel != null) {\r\n");
      out.write("\t\t\t\t\t\tif (marqueepanel.scrollTask != null) {\r\n");
      out.write("\t\t\t\t\t\t\tmarqueepanel.scrollTask.start(5000);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tpopuptask = runner.newTask({\r\n");
      out.write("\t\ttimegap : 600,\r\n");
      out.write("\t\trun : function() {\r\n");
      out.write("\t\t\tif (bodygrid != null) {\r\n");
      out.write("\t\t\t\tbodygrid.nextSelectedRow();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetTimeGap : function(timegap) {\r\n");
      out.write("\t\t\tif (timegap == null || timegap == \"\" || timegap < 1) {\r\n");
      out.write("\t\t\t\tthis.timegap = 600;\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tthis.timegap = timegap;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\texecuteTask : function() {\r\n");
      out.write("\t\t\tthis.start(this.timegap * 1000);\r\n");
      out.write("\t\t\tpopuptaskIsRunning = true;\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tstopTask : function() {\r\n");
      out.write("\t\t\tthis.stop();\r\n");
      out.write("\t\t\tpopuptaskIsRunning = false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t*/\r\n");
      out.write("\tvar headgrid = Ext.create('Ext.grid.Panel', {\r\n");
      out.write("\t\t//height : 120,   \r\n");
      out.write("\t\tid:kanbanInfo.func_id+'-'+'headgrid',\r\n");
      out.write("\t\trenderer : \"component\",\r\n");
      out.write("\t\tstripeRows : true,\r\n");
      out.write("\t\tautoScroll : true,\r\n");
      out.write("\t\tloadMask : true,\r\n");
      out.write("\t\tallowDeselect : true,\r\n");
      out.write("\t\tusePopup : false,\r\n");
      out.write("\t\tpopupImgPath : '',\r\n");
      out.write("\t\tpopupImgCols : [],\r\n");
      out.write("\t\tpopupTitleCols : [],\r\n");
      out.write("\t\tpopup_refresh_gap : 600,\r\n");
      out.write("\t\tselModel : {\r\n");
      out.write("\t\t\tallowDeselect : true\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tenableTextSelection : true,\r\n");
      out.write("\t\tviewConfig : {\r\n");
      out.write("\t\t\tforceFit : false,\r\n");
      out.write("\t\t\tautoLoad : false\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\t//enableLocking : true,\r\n");
      out.write("\t\tstore : null,\r\n");
      out.write("\t\tbodyCls : headGridClass,\r\n");
      out.write("\t\tcomponentCls : headGridClass,\r\n");
      out.write("\t\tcolumns : [],\r\n");
      out.write("\t\tsqlRelationStore : Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\tfields : [ 'col_id', 'target_sql_id', 'target_col_id', 'target_ori_col_id', \"target_sql_name\" ],\r\n");
      out.write("\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\tproxy : {\r\n");
      out.write("\t\t\t\ttype : 'memory',\r\n");
      out.write("\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}),\r\n");
      out.write("\t\tcurrpage : 0,\r\n");
      out.write("\t\ttotalpage : 0,\r\n");
      out.write("\t\ttimer : null,\r\n");
      out.write("\t\tdockedItems : [\r\n");
      out.write("\t\t\t\t{\r\n");
      out.write("\t\t\t\t\txtype : 'pagingtoolbar',\r\n");
      out.write("\t\t\t\t\tstore : null,\r\n");
      out.write("\t\t\t\t\tdock : 'top',\r\n");
      out.write("\t\t\t\t\tdisplayInfo : false,\r\n");
      out.write("\t\t\t\t\titems : [ '-', {\r\n");
      out.write("\t\t\t\t\t\t//text : 'stop timer',\r\n");
      out.write("\t\t\t\t\t\tenableToggle : true,\r\n");
      out.write("\t\t\t\t\t\twidth : 50,\r\n");
      out.write("\t\t\t\t\t\ttooltip : '',\r\n");
      out.write("\t\t\t\t\t\tcls : 'starttimerbutton',\r\n");
      out.write("\t\t\t\t\t\ttoggleHandler : function(btn, pressed) {\r\n");
      out.write("\t\t\t\t\t\t\t//if (main != null && !main.globalRunning) {\r\n");
      out.write("\t\t\t\t\t\t\t\tthis.btnClick(btn, pressed);\r\n");
      out.write("\t\t\t\t\t\t\t//}\r\n");
      out.write("\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\tbtnClick : function(btn, pressed) {\r\n");
      out.write("\t\t\t\t\t\t\tvar timer = this.up('panel').timer;\r\n");
      out.write("\t\t\t\t\t\t\tif (timer != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (pressed) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttimer.executeTask();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t/* btn.removeCls('starttimerbutton');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbtn.addCls('stoptimerbutton');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbtn.setTooltip(langs.stop_timer); */\r\n");
      out.write("\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttimer.stopTask();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t/* btn.removeCls('stoptimerbutton');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbtn.addCls('starttimerbutton');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbtn.setTooltip(langs.start_timer); */\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}, '-', {\r\n");
      out.write("\t\t\t\t\t\txtype : 'label',\r\n");
      out.write("\t\t\t\t\t\ttext : langs.refresh_gap\r\n");
      out.write("\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\txtype : 'label',\r\n");
      out.write("\t\t\t\t\t\ttext : '',\r\n");
      out.write("\t\t\t\t\t\tmargin : '0 0 0 10'\r\n");
      out.write("\t\t\t\t\t}, '-', Ext.create('DCI.Customer.Img', {\r\n");
      out.write("\t\t\t\t\t\tsrc : \"../../images/icons/CusGridFormat.png\",\r\n");
      out.write("\t\t\t\t\t\twidth : 20,\r\n");
      out.write("\t\t\t\t\t\theight : 20,\r\n");
      out.write("\t\t\t\t\t\thidden : true,\r\n");
      out.write("\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\tafterrender : function(c) {\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.create('Ext.tip.ToolTip', {\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttarget : c.getEl(),\r\n");
      out.write("\t\t\t\t\t\t\t\t\thtml : langs.cus_format\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}), Ext.create('DCI.Customer.Img', {\r\n");
      out.write("\t\t\t\t\t\tsrc : \"../../images/button_icon/BtnCrossDatabase.png\",\r\n");
      out.write("\t\t\t\t\t\twidth : 20,\r\n");
      out.write("\t\t\t\t\t\theight : 20,\r\n");
      out.write("\t\t\t\t\t\thidden : true,\r\n");
      out.write("\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\tafterrender : function(c) {\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.create('Ext.tip.ToolTip', {\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttarget : c.getEl(),\r\n");
      out.write("\t\t\t\t\t\t\t\t\thtml : langs.cross_db\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}) ],\r\n");
      out.write("\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\tbeforechange : function(pagingbar, page, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\tvar bstore=Ext.getCmp(kanbanInfo.func_id+'-'+'bodygrid').getStore();\r\n");
      out.write("\t\t\t\t\t\t\tif (this.store.getProxy().extraParams.hasOwnProperty('page')) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (page == null || page == 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tthis.store.getProxy().extraParams['page'] = 1;\r\n");
      out.write("\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tthis.store.getProxy().extraParams['page'] = page;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\tthis.store.on(\"load\", function() {\r\n");
      out.write("\t\t\t\t\t\t\t\tif(this.store.getAt(0)!=null){\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (bodygrid.usePopup) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tpopuptask.stop();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar bodycondi=kanbanInfo.condition+\"'\"+this.store.getAt(0).get(kanbanInfo.combinecolumn)+\"'\";\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif(bstore!=undefined)\r\n");
      out.write("\t\t\t\t\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (bstore.getProxy().extraParams.hasOwnProperty('filter')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (kanbanInfo.relation_filter != null && kanbanInfo.relation_filter.length > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tbstore.getProxy().extraParams['filter'] = kanbanInfo.relation_filter;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tbstore.getProxy().extraParams['filter'] = bodycondi;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tbstore.load(function(){\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif(Ext.getCmp(kanbanInfo.func_id+'-'+'bodygrid').getStore().totalCount==0){\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tExt.getCmp(kanbanInfo.func_id+'-'+'bodygrid').dockedItems.get(3).showPopup(\"\",\"\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tExt.getCmp(kanbanInfo.func_id+'-'+'bodygrid').getSelectionModel().select(0);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif(bodygrid.usePopup){\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tpopuptask.executeTask();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\t\t\t\tExt.getCmp(kanbanInfo.func_id+'-'+'bodygrid').dockedItems.get(3).showPopup(\"\",\"\");\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\tthis,\r\n");
      out.write("\t\t\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\t\t     single:true //設定執行一次性的事件\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\tthis.store.load();\r\n");
      out.write("\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\tchange : function(pagingbar, pageData, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\tif (pageData == null || pageData.currentPage == null || pageData.pageCount == null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tthis.up('panel').setCurrPage(0);\r\n");
      out.write("\t\t\t\t\t\t\t\tthis.up('panel').setTotlaPage(0);\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\tthis.up('panel').setCurrPage(pageData.currentPage);\r\n");
      out.write("\t\t\t\t\t\t\t\tthis.up('panel').setTotlaPage(pageData.pageCount);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}/*,\r\n");
      out.write("\t\t\t\t//marqueepanel,\r\n");
      out.write("\t\t\t\t{\r\n");
      out.write("\t\t\t\t\txtype : 'panel',\r\n");
      out.write("\t\t\t\t\theight : '100%',\r\n");
      out.write("\t\t\t\t\twidth : 200,\r\n");
      out.write("\t\t\t\t\tborder : 5,\r\n");
      out.write("\t\t\t\t\ttitle : \"\",\r\n");
      out.write("\t\t\t\t\tdock : 'right',\r\n");
      out.write("\t\t\t\t\tlayout : 'fit',\r\n");
      out.write("\t\t\t\t\tcollapsible : true,\r\n");
      out.write("\t\t\t\t\tcollapseDirection : \"right\",\r\n");
      out.write("\t\t\t\t\tanimCollapse : false,\r\n");
      out.write("\t\t\t\t\thidden : false,\r\n");
      out.write("\t\t\t\t\tbuttonAlign : 'left',\r\n");
      out.write("\t\t\t\t\tresizable : true,\r\n");
      out.write("\t\t\t\t\titems : [ {\r\n");
      out.write("\t\t\t\t\t\txtype : 'panel',\r\n");
      out.write("\t\t\t\t\t\theight : '100%',\r\n");
      out.write("\t\t\t\t\t\ttitle : \"\",\r\n");
      out.write("\t\t\t\t\t\twidth : '100%',\r\n");
      out.write("\t\t\t\t\t\tborder : 0\r\n");
      out.write("\t\t\t\t\t} ],\r\n");
      out.write("\t\t\t\t\theader : {\r\n");
      out.write("\t\t\t\t\t\titems : [ {\r\n");
      out.write("\t\t\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\t\t\tcls : 'playbutton',\r\n");
      out.write("\t\t\t\t\t\t\tpressedCls : 'pausebutton',\r\n");
      out.write("\t\t\t\t\t\t\twidth : 15,\r\n");
      out.write("\t\t\t\t\t\t\theight : 15,\r\n");
      out.write("\t\t\t\t\t\t\tenableToggle : true,\r\n");
      out.write("\t\t\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\t\t\t\tif (popuptask != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (me.pressed) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tpopuptask.executeTask();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (bodygrid != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tbodygrid.nextSelectedRow();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tpopuptask.stopTask();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t} ]\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t/*,showPopup : function(title, path) {\r\n");
      out.write("\t\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\t\tvar displaypanel = me.items.get(0);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tvar popup = me.items.get(0);\r\n");
      out.write("\t\t\t\t\t\tif (popup != null) {\r\n");
      out.write("\t\t\t\t\t\t\tif (title == null || title == \"\") {\r\n");
      out.write("\t\t\t\t\t\t\t\tpopup.setTitle(\" \");\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\tpopup.setTitle(title);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tExt.Ajax.request({\r\n");
      out.write("\t\t\t\t\t\t\t\tmethod : 'POST',\r\n");
      out.write("\t\t\t\t\t\t\t\turl : './../../PublicCtrl.dsc',\r\n");
      out.write("\t\t\t\t\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\t\t\t\taction : 'B64Encode',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tstr : path\r\n");
      out.write("\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\tsuccess : function(a) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar result = Ext.JSON.decode(a.responseText);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar h = '<img width=' + displaypanel.getWidth() + ' height=' + displaypanel.getHeight() + ' src=\"./../../ImageLoader.dsc?imgpath='\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t+ result.result + '\"/>';\r\n");
      out.write("\t\t\t\t\t\t\t\t\tdisplaypanel.update(h);\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}*/ ],\r\n");
      out.write("\t\tlisteners : {\r\n");
      out.write("\t\t\tselectionchange : function(smodel, selected, eOpts) {\r\n");
      out.write("\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\tif (me.usePopup && selected.length > 0) {\r\n");
      out.write("\t\t\t\t\tvar file = \"\";\r\n");
      out.write("\t\t\t\t\tvar title = \"\";\r\n");
      out.write("\t\t\t\t\tvar popup = me.dockedItems.get(3);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tfor ( var i = 0; i < me.popupImgCols.length; i++) {\r\n");
      out.write("\t\t\t\t\t\tif (i == 0) {\r\n");
      out.write("\t\t\t\t\t\t\tfile = selected[0].get(me.popupImgCols[i]);\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\tfile += \"--\" + selected[0].get(me.popupImgCols[i]);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tfor ( var i = 0; i < me.popupTitleCols.length; i++) {\r\n");
      out.write("\t\t\t\t\t\tif (i == 0) {\r\n");
      out.write("\t\t\t\t\t\t\ttitle = selected[0].get(me.popupTitleCols[i]);\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\ttitle += \"--\" + selected[0].get(me.popupTitleCols[i]);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (popup != null) {\r\n");
      out.write("\t\t\t\t\t\tvar tmp = me.popupImgPath.replace(\"\\\\\", \"\\\"\");\r\n");
      out.write("\t\t\t\t\t\ttmp = tmp.replace(\"\\\"\", \"\\\\\") + \"\\\\\";\r\n");
      out.write("\t\t\t\t\t\tfile = tmp + file + \".jpg\";\r\n");
      out.write("\t\t\t\t\t\tpopup.showPopup(title, file);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tcelldblclick : function(grid, td, cellIndex, record, tr, rowIndex, e, eOpts) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tcellcontextmenu : function(view, td, cellIndex, record, tr, rowIndex, e, eOpts) {\r\n");
      out.write("\t\t\t\tvar me = this;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tif (me.sqlRelationStore != null && me.sqlRelationStore.getCount() > 0) {\r\n");
      out.write("\t\t\t\t\tvar gridMenu = Ext.create('Ext.menu.Menu', {\r\n");
      out.write("\t\t\t\t\t\tmpanel : main.parentComp,\r\n");
      out.write("\t\t\t\t\t\titems : [],\r\n");
      out.write("\t\t\t\t\t\tclickEvent : function(value, targetsql, targetcol) {\r\n");
      out.write("\t\t\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\t\t\tif (me.mpanel != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.Ajax.request({\r\n");
      out.write("\t\t\t\t\t\t\t\t\tmethod : 'POST',\r\n");
      out.write("\t\t\t\t\t\t\t\t\turl : '../../Funcs/EKB/KanBan.dsc',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\taction : 'funcInfo',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfunc_id : targetsql,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tconn_id : kanbanInfo.conn_id\r\n");
      out.write("\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\tsuccess : function(a) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (a.responseText == null || a.responseText == '' || a.responseText.length == 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\talert(\"open kanban \" + targetsql + \" fail\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar result = Ext.JSON.decode(a.responseText);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar funcInfo = {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\turl : result.url,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\ttext : result.text,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tfunc_package : result.func_package,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcan_edit : result.can_edit,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tfilter : \" and \" + targetcol + \" = '\" + value + \"'\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t};\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tme.mpanel.beforeAddCheck(targetsql, kanbanInfo.conn_id, funcInfo, true);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tfor ( var i = 0; i < me.sqlRelationStore.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\tif (me.columns[cellIndex].dataIndex == me.sqlRelationStore.getAt(i).get(\"col_id\")) {\r\n");
      out.write("\t\t\t\t\t\t\tgridMenu.add({\r\n");
      out.write("\t\t\t\t\t\t\t\ttext : me.sqlRelationStore.getAt(i).get(\"target_sql_name\"),\r\n");
      out.write("\t\t\t\t\t\t\t\tcurrcol : me.sqlRelationStore.getAt(i).get(\"col_id\"),\r\n");
      out.write("\t\t\t\t\t\t\t\tcellValue : record.get(me.columns[cellIndex].dataIndex),\r\n");
      out.write("\t\t\t\t\t\t\t\ttargetsql : me.sqlRelationStore.getAt(i).get(\"target_sql_id\"),\r\n");
      out.write("\t\t\t\t\t\t\t\ttargetcol : me.sqlRelationStore.getAt(i).get(\"target_col_id\"),\r\n");
      out.write("\t\t\t\t\t\t\t\ttargetoricol : me.sqlRelationStore.getAt(i).get(\"target_ori_col_id\"),\r\n");
      out.write("\t\t\t\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar menu = this.up('menu');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tmenu.clickEvent(this.cellValue, this.targetsql, this.targetoricol);\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (gridMenu.items.length > 0) {\r\n");
      out.write("\t\t\t\t\t\te.stopEvent();\r\n");
      out.write("\t\t\t\t\t\tgridMenu.showAt(e.getXY());\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\taddCusFormatIcon : function() {\r\n");
      out.write("\t\t\tvar tbar = this.dockedItems.items[1];\r\n");
      out.write("\t\t\ttbar.items.get(17).show();\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\trmCusFormatIcon : function() {\r\n");
      out.write("\t\t\tvar tbar = this.dockedItems.items[1];\r\n");
      out.write("\t\t\ttbar.items.get(17).hide();\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetCrossDBIcon : function(is_cross) {\r\n");
      out.write("\t\t\tvar tbar = this.dockedItems.items[1];\r\n");
      out.write("\t\t\tif (is_cross) {\r\n");
      out.write("\t\t\t\ttbar.items.get(18).show();\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\ttbar.items.get(18).hide();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tinitHeadGrid : function(timer, columns, store, relationRecord) {\r\n");
      out.write("\t\t\tthis.timer = timer;\r\n");
      out.write("\t\t\tvar cols = columns;\r\n");
      out.write("\t\t\tvar me = this;\r\n");
      out.write("\t\t\tvar tmpcols = [];\r\n");
      out.write("\t\t\tvar colsStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\tfields : [ 'colFormats' ],\r\n");
      out.write("\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\t\t\turl : './../../PublicCtrl.dsc',\r\n");
      out.write("\t\t\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\textraParams : {\r\n");
      out.write("\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\taction : 'getGFormat',\r\n");
      out.write("\t\t\t\t\t\tgridid : headkid\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tcolsStore.load(function(record) {\r\n");
      out.write("\t\t\t\tif (record.length > 0) {\r\n");
      out.write("\t\t\t\t\tvar tmpstore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\t\t\tfields : [ 'col_id', 'col_index', 'col_width', 'col_visible' ],\r\n");
      out.write("\t\t\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\t\t\ttype : 'memory',\r\n");
      out.write("\t\t\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\ttmpstore.loadData(record[0].get('colFormats'));\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (tmpstore.getCount() > 0) {\r\n");
      out.write("\t\t\t\t\t\tExt.getCmp(kanbanInfo.func_id+'-'+'headgrid').addCusFormatIcon();\r\n");
      out.write("\t\t\t\t\t\tfor ( var i = 0; i < tmpstore.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var j = 0; j < cols.length; j++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (cols[j].colid == tmpstore.getAt(i).get('col_id')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (tmpstore.getAt(i).get('col_visible') == '1') {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('hidden')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols[j].hidden = false;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols[j]['hidden'] = false;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (tmpstore.getAt(i).get('col_width') != 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('width')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcols[j].width = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcols[j]['width'] = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (tmpstore.getAt(i).get('col_width') != 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('width')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcols[j].width = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcols[j]['width'] = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('hidden')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols[j].hidden = true;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols[j]['hidden'] = true;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttmpcols.push(cols[j]);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcols.splice(j, 1);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tif (cols != null && cols.length != 0) {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var i = 0; i < cols.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tcols[i]['hidden'] = true;\r\n");
      out.write("\t\t\t\t\t\t\t\ttmpcols.push(cols[i]);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\ttmpcols = cols;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (relationRecord != null) {\r\n");
      out.write("\t\t\t\t\t\tfor ( var j = 0; j < tmpcols.length; j++) {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var i = 0; i < relationRecord.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (\"col\" + relationRecord[i].col_id == tmpcols[j].colid) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (tmpcols[j].hasOwnProperty('componentCls')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttmpcols[j].componentCls = 'dci-realtion-column-header';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttmpcols[j]['componentCls'] = 'dci-realtion-column-header';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t//Ext.util.CSS.updateRule(\".\" + headGridClass + \" .x-column-header .x-column-header-inner\", \"background-color\", \"red\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tme.reconfigure(store, tmpcols);\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tif (relationRecord != null) {\r\n");
      out.write("\t\t\t\t\t\tfor ( var j = 0; j < cols.length; j++) {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var i = 0; i < relationRecord.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (\"col\" + relationRecord[i].col_id == cols[j].colid) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('componentCls')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcols[j].componentCls = 'dci-realtion-column-header';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcols[j]['componentCls'] = 'dci-realtion-column-header';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tme.reconfigure(store, cols);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t//headinit\r\n");
      out.write("\t\t\t\tme.child('pagingtoolbar').bindStore(store);\r\n");
      out.write("\t\t\t\t//me.enableLocking = true;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tif (hp1 != null) {\r\n");
      out.write("\t\t\t\t\thp1.targetGrid = me;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tme.sqlRelationStore.loadData(relationRecord);\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\treloadHeadGridFormat : function(columns, store) {\r\n");
      out.write("\t\t\tvar cols = columns;\r\n");
      out.write("\t\t\tvar me = this;\r\n");
      out.write("\t\t\tvar tmpcols = [];\r\n");
      out.write("\t\t\tvar colsStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\tfields : [ 'colFormats' ],\r\n");
      out.write("\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\t\t\turl : './../../PublicCtrl.dsc',\r\n");
      out.write("\t\t\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\textraParams : {\r\n");
      out.write("\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\taction : 'getGFormat',\r\n");
      out.write("\t\t\t\t\t\tgridid : headkid\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tcolsStore.load(function(record) {\r\n");
      out.write("\t\t\t\tif (record.length > 0) {\r\n");
      out.write("\t\t\t\t\tvar tmpstore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\t\t\tfields : [ 'col_id', 'col_index', 'col_width', 'col_visible' ],\r\n");
      out.write("\t\t\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\t\t\ttype : 'memory',\r\n");
      out.write("\t\t\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\ttmpstore.loadData(record[0].get('colFormats'));\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (tmpstore.getCount() > 0) {\r\n");
      out.write("\t\t\t\t\t\tExt.getCmp(kanbanInfo.func_id+'-'+'headgrid').addCusFormatIcon();\r\n");
      out.write("\t\t\t\t\t\tfor ( var i = 0; i < tmpstore.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var j = 0; j < cols.length; j++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (cols[j].colid == tmpstore.getAt(i).get('col_id')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (tmpstore.getAt(i).get('col_visible') == '1') {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('hidden')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols[j].hidden = false;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols[j]['hidden'] = false;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (tmpstore.getAt(i).get('col_width') != 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('width')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcols[j].width = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcols[j]['width'] = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (tmpstore.getAt(i).get('col_width') != 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('width')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcols[j].width = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcols[j]['width'] = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('hidden')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols[j].hidden = true;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols[j]['hidden'] = true;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttmpcols.push(cols[j]);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcols.splice(j, 1);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tif (cols != null && cols.length != 0) {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var i = 0; i < cols.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tcols[i]['hidden'] = true;\r\n");
      out.write("\t\t\t\t\t\t\t\ttmpcols.push(cols[i]);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\ttmpcols = cols;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (me.sqlRelationStore != null) {\r\n");
      out.write("\t\t\t\t\t\tfor ( var j = 0; j < tmpcols.length; j++) {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var i = 0; i < me.sqlRelationStore.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (\"col\" + me.sqlRelationStore.getAt(i).data.col_id == tmpcols[j].colid) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (tmpcols[j].hasOwnProperty('componentCls')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttmpcols[j].componentCls = 'dci-realtion-column-header';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttmpcols[j]['componentCls'] = 'dci-realtion-column-header';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t//Ext.util.CSS.updateRule(\".\" + headGridClass + \" .x-column-header .x-column-header-inner\", \"background-color\", \"red\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tme.reconfigure(store, tmpcols);\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tif (me.sqlRelationStore != null) {\r\n");
      out.write("\t\t\t\t\t\tfor ( var j = 0; j < cols.length; j++) {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var i = 0; i < me.sqlRelationStore.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (\"col\" + me.sqlRelationStore.getAt(i).data.col_id == cols[j].colid) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('componentCls')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcols[j].componentCls = 'dci-realtion-column-header';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcols[j]['componentCls'] = 'dci-realtion-column-header';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tme.reconfigure(store, cols);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t//reloadhead\r\n");
      out.write("\t\t\t\ty2=me.child('pagingtoolbar');\r\n");
      out.write("\t\t\t\tme.child('pagingtoolbar').bindStore(headGridStore);\r\n");
      out.write("\t\t\t\t//me.enableLocking = true;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tif (hp1 != null) {\r\n");
      out.write("\t\t\t\t\thp1.targetGrid = me;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetCurrPage : function(value) {\r\n");
      out.write("\t\t\tthis.currpage = value;\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetTotlaPage : function(value) {\r\n");
      out.write("\t\t\tthis.totalpage = value;\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tnextPage : function() {\r\n");
      out.write("\t\t\tvar cpage = 0;\r\n");
      out.write("\t\t\tvar panel = this;\r\n");
      out.write("\t\t\tif (panel.currpage == null || panel.currpage == 0) {\r\n");
      out.write("\t\t\t\tcpage = 1;\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tcpage = panel.currpage + 1;\r\n");
      out.write("\t\t\t\tif (cpage > panel.totalpage) {\r\n");
      out.write("\t\t\t\t\tcpage = 1;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (panel.store.getProxy().extraParams.hasOwnProperty('page')) {\r\n");
      out.write("\t\t\t\tpanel.store.getProxy().extraParams['page'] = cpage;\r\n");
      out.write("\t\t\t\tpanel.store.currentPage = cpage;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar bstore=Ext.getCmp(kanbanInfo.func_id+'-'+'bodygrid').getStore();\r\n");
      out.write("\t\t\tpanel.store.load(function(record) {\r\n");
      out.write("\t\t\t\tpanel.getSelectionModel().deselectAll();\r\n");
      out.write("\t\t\t\tpanel.setCurrPage(cpage);\r\n");
      out.write("\t\t\t\tpanel.setRefreshTime();\r\n");
      out.write("\t\t\t\tif(panel.store.getAt(0)!=null){\r\n");
      out.write("\t\t\t\t\tif (bodygrid.usePopup) {\r\n");
      out.write("\t\t\t\t\t\tpopuptask.stop();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tvar bodycondi=kanbanInfo.condition+\"'\"+panel.store.getAt(0).get(kanbanInfo.combinecolumn)+\"'\";\r\n");
      out.write("\t\t\t\t\tif(bstore!=undefined)//,bodycondi\r\n");
      out.write("\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\tif (bstore.getProxy().extraParams.hasOwnProperty('filter')) {\r\n");
      out.write("\t\t\t\t\t\t\tif (kanbanInfo.relation_filter != null && kanbanInfo.relation_filter.length > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\tbstore.getProxy().extraParams['filter'] = kanbanInfo.relation_filter;\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\tbstore.getProxy().extraParams['filter'] = bodycondi;\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tbstore.load(function(){\r\n");
      out.write("\t\t\t\t\t\t\tif(Ext.getCmp(kanbanInfo.func_id+'-'+'bodygrid').getStore().totalCount==0){\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.getCmp(kanbanInfo.func_id+'-'+'bodygrid').dockedItems.get(3).showPopup(\"\",\"\");\r\n");
      out.write("\t\t\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.getCmp(kanbanInfo.func_id+'-'+'bodygrid').getSelectionModel().select(0);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\tif(bodygrid.usePopup){\r\n");
      out.write("\t\t\t\t\t\t\t\tpopuptask.executeTask();\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\tExt.getCmp(kanbanInfo.func_id+'-'+'bodygrid').dockedItems.get(3).showPopup(\"\",\"\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tglobalNextPage : function(initPage) {\r\n");
      out.write("\t\t\tvar cpage = 0;\r\n");
      out.write("\t\t\tvar panel = this;\r\n");
      out.write("\t\t\tif (initPage == -1) {\r\n");
      out.write("\t\t\t\tif (panel.store.getProxy().extraParams.hasOwnProperty('page')) {\r\n");
      out.write("\t\t\t\t\tpanel.store.getProxy().extraParams['page'] = 1;\r\n");
      out.write("\t\t\t\t\tpanel.store.currentPage = 1;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tpanel.store.load(function(record) {\r\n");
      out.write("\t\t\t\t\tpanel.getSelectionModel().deselectAll();\r\n");
      out.write("\t\t\t\t\tpanel.setCurrPage(1);\r\n");
      out.write("\t\t\t\t\tpanel.setRefreshTime();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (panel.usePopup) {\r\n");
      out.write("\t\t\t\t\t\tvar sModel = panel.getSelectionModel();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tif (sModel != null) {\r\n");
      out.write("\t\t\t\t\t\t\tsModel.select(0);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tcpage = panel.currpage + 1;\r\n");
      out.write("\t\t\t\tif (cpage > panel.totalpage) {\r\n");
      out.write("\t\t\t\t\tcpage = 1;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tif (panel.usePopup) {\r\n");
      out.write("\t\t\t\t\tvar sModel = panel.getSelectionModel();\r\n");
      out.write("\t\t\t\t\tif (sModel != null) {\r\n");
      out.write("\t\t\t\t\t\tvar sindex = 0;\r\n");
      out.write("\t\t\t\t\t\tif (sModel.lastSelected == null) {\r\n");
      out.write("\t\t\t\t\t\t\tsModel.select(0);\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\tif (sModel.lastSelected.index % panel.getStore().pageSize == panel.getStore().getCount() - 1 || sModel.getSelection() == null\r\n");
      out.write("\t\t\t\t\t\t\t\t\t|| sModel.getSelection().length == 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (panel.store.getProxy().extraParams.hasOwnProperty('page')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.store.getProxy().extraParams['page'] = cpage;\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.store.currentPage = cpage;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\tpanel.store.load(function(record) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tsModel.deselectAll();\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.setCurrPage(cpage);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.setRefreshTime();\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.getSelectionModel().select(0);\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\tsindex = (sModel.lastSelected.index + 1) % panel.getStore().pageSize;\r\n");
      out.write("\t\t\t\t\t\t\t\tpanel.getSelectionModel().select(sindex);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tif (panel.store.getProxy().extraParams.hasOwnProperty('page')) {\r\n");
      out.write("\t\t\t\t\t\tpanel.store.getProxy().extraParams['page'] = cpage;\r\n");
      out.write("\t\t\t\t\t\tpanel.store.currentPage = cpage;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tpanel.store.load(function(record) {\r\n");
      out.write("\t\t\t\t\t\tpanel.getSelectionModel().deselectAll();\r\n");
      out.write("\t\t\t\t\t\tpanel.setCurrPage(cpage);\r\n");
      out.write("\t\t\t\t\t\tpanel.setRefreshTime();\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tnextSelectedRow : function() {\r\n");
      out.write("\t\t\tvar me = this;\r\n");
      out.write("\t\t\tvar sModel = me.getSelectionModel();\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (sModel != null) {\r\n");
      out.write("\t\t\t\tvar sindex = 0;\r\n");
      out.write("\t\t\t\tif (sModel.lastSelected != null) {\r\n");
      out.write("\t\t\t\t\tif (me.getSelectionModel().lastSelected.index % me.getStore().pageSize >= me.getStore().getCount() - 1 || sModel.getSelection() == null\r\n");
      out.write("\t\t\t\t\t\t\t|| sModel.getSelection().length == 0) {\r\n");
      out.write("\t\t\t\t\t\tsindex = 0;\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tsindex = (me.getSelectionModel().lastSelected.index + 1) % me.getStore().pageSize;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tsModel.select(sindex);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetRefreshTimeTitle : function(gap, unit) {\r\n");
      out.write("\t\t\tvar label = this.dockedItems.get(1).items.get(14);\r\n");
      out.write("\t\t\tif (label != null) {\r\n");
      out.write("\t\t\t\tlabel.setText(langs.refresh_gap + \"  \" + gap + \"  \" + unit);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetRefreshTime : function() {\r\n");
      out.write("\t\t\tvar label = this.dockedItems.get(1).items.get(15);\r\n");
      out.write("\t\t\tif (label != null) {\r\n");
      out.write("\t\t\t\tlabel.setText(Ext.Date.format(new Date(Ext.Date.now()), 'Y/m/d H:i:s'));\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetButtonStatus : function(isrunning) {\r\n");
      out.write("\t\t\tvar btn = this.dockedItems.get(1).items.get(12);\r\n");
      out.write("\t\t\tbtn.toggle(isrunning);\r\n");
      out.write("\t\t\tbtn.btnClick(btn, isrunning);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t,setPopupInfo : function(infos) {\r\n");
      out.write("\t\t\t/*var me = this;\r\n");
      out.write("\t\t\tvar popup = me.dockedItems.get(3);\r\n");
      out.write("\t\t\tif (infos != null) {\r\n");
      out.write("\t\t\t\tif (infos.use_popup) {\r\n");
      out.write("\t\t\t\t\tpopup.setVisible(true);\r\n");
      out.write("\t\t\t\t\tme.usePopup = infos.use_popup;\r\n");
      out.write("\t\t\t\t\tme.popupImgPath = infos.popup_dir;\r\n");
      out.write("\t\t\t\t\tme.popup_refresh_gap = infos.popup_refresh_gap;\r\n");
      out.write("\t\t\t\t\tif (infos.imgcols != null && infos.imgcols.trim().length > 0) {\r\n");
      out.write("\t\t\t\t\t\tme.popupImgCols = infos.imgcols.split(';');\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (infos.titlecols != null && infos.titlecols.trim().length > 0) {\r\n");
      out.write("\t\t\t\t\t\tme.popupTitleCols = infos.titlecols.split(';');\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tpopup.setVisible(false);\r\n");
      out.write("\t\t\t\t\tme.usePopup = false;\r\n");
      out.write("\t\t\t\t\tme.popupImgPath = \"\";\r\n");
      out.write("\t\t\t\t\tme.popupImgCols = [];\r\n");
      out.write("\t\t\t\t\tme.popupTitleCols = [];\r\n");
      out.write("\t\t\t\t\tme.popup_refresh_gap = 600;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif (popuptask != null) {\r\n");
      out.write("\t\t\t\tpopuptask.setTimeGap(me.popup_refresh_gap);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (me.usePopup) {\r\n");
      out.write("\t\t\t\tpopup.header.items.get(0).toggle(true);\r\n");
      out.write("\t\t\t\tpopup.header.items.get(0).handler();\r\n");
      out.write("\t\t\t}*/\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tgetPopupWidth : function() {\r\n");
      out.write("\t\t\tvar me = this;\r\n");
      out.write("\t\t\tvar popup = me.dockedItems.get(3);\r\n");
      out.write("\t\t\tvar pwidth = 200;\r\n");
      out.write("\t\t\tif (popup != null) {\r\n");
      out.write("\t\t\t\tpwidth = popup.getWidth();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\treturn pwidth;\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetPopupWidth : function(pwidth) {\r\n");
      out.write("\t\t\tvar me = this;\r\n");
      out.write("\t\t\tvar popup = me.dockedItems.get(3);\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (popup != null) {\r\n");
      out.write("\t\t\t\tpopup.setWidth(pwidth);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tchangeIcon : function(pressed) {\r\n");
      out.write("\t\t\tvar btn = this.dockedItems.get(1).items.get(12);\r\n");
      out.write("\t\t\tbtn.pressed = pressed;\r\n");
      out.write("\t\t\tif (pressed) {\r\n");
      out.write("\t\t\t\tbtn.removeCls('starttimerbutton');\r\n");
      out.write("\t\t\t\tbtn.addCls('stoptimerbutton');\r\n");
      out.write("\t\t\t\tbtn.setTooltip(langs.stop_timer);\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tbtn.removeCls('stoptimerbutton');\r\n");
      out.write("\t\t\t\tbtn.addCls('starttimerbutton');\r\n");
      out.write("\t\t\t\tbtn.setTooltip(langs.start_timer);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar initQueryHeadStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\tautoLoad : false,\r\n");
      out.write("\t\tfields : [ 'cols', 'fields', 'legend', 'marquee', 'refresh', 'display', 'combo', 'lights', 'popup', 'advances', 'relation', 'is_cross' ],\r\n");
      out.write("\t\tproxy : {\r\n");
      out.write("\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\turl : '../../Funcs/EKB/KanBan.dsc',\r\n");
      out.write("\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\treader : {\r\n");
      out.write("\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\textraParams : {\r\n");
      out.write("\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\taction : 'init',\r\n");
      out.write("\t\t\t\tsql_id : headkid\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\t\t/******************************************表身**************************************************/\r\n");
      out.write("\tvar pageSize = 9999;\r\n");
      out.write("\tvar body_id =kanbanInfo.body_kbid;\r\n");
      out.write("\tvar gridClass = kanbanInfo.func_id+'-'+body_id + \"grid\";\r\n");
      out.write("\trunner = new Ext.util.TaskRunner();\r\n");
      out.write("\tvar gridStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\tautoLoad : false,\r\n");
      out.write("\t\tfields : [],\r\n");
      out.write("\t\tproxy : {\r\n");
      out.write("\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\ttimeout : 300000,\r\n");
      out.write("\t\t\turl : '../../Funcs/EKB/KanBan.dsc',\r\n");
      out.write("\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\treader : {\r\n");
      out.write("\t\t\t\troot : 'items',\r\n");
      out.write("\t\t\t\ttotalProperty : 'total'\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\textraParams : {\r\n");
      out.write("\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\taction : 'query',\r\n");
      out.write("\t\t\t\tpage : 1,\r\n");
      out.write("\t\t\t\tpagesize : pageSize,\r\n");
      out.write("\t\t\t\tfilter : '',\r\n");
      out.write("\t\t\t\tsort : '',\r\n");
      out.write("\t\t\t\tsql_id : body_id,\r\n");
      out.write("\t\t\t\tconn_id : kanbanInfo.conn_id\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tpageSize : pageSize,\r\n");
      out.write("\t\tgridreload : function(headPanel, filter) {\r\n");
      out.write("\t\t\tvar store = this;\r\n");
      out.write("\t\t\tvar panel1 = Ext.getCmp(kanbanInfo.func_id+'-'+'hp1');\r\n");
      out.write("\t\t\tvar panel2 = Ext.getCmp(kanbanInfo.func_id+'-'+'hp2');\r\n");
      out.write("\t\t\tvar fstr = \"\";\r\n");
      out.write("\t\t\tvar sstr = \"\";\r\n");
      out.write("\t\t\t/*\r\n");
      out.write("\t\t\tif (filter == null || filter.length == 0) {\r\n");
      out.write("\t\t\t\tvar col = panel1.condiParams.condi_col;\r\n");
      out.write("\t\t\t\tvar condi = panel1.condiParams.condi_type;\r\n");
      out.write("\t\t\t\tvar value = panel1.condiParams.condi_value;\r\n");
      out.write("\t\t\t\tif (col != null && col != \"\") {\r\n");
      out.write("\t\t\t\t\tfstr = \" and \" + col + \" \";\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (condi == \"startwith\") {\r\n");
      out.write("\t\t\t\t\t\tfstr += \"like '\" + value + \"%' \";\r\n");
      out.write("\t\t\t\t\t} else if (condi == \"endwith\") {\r\n");
      out.write("\t\t\t\t\t\tfstr += \"like '%\" + value + \"' \";\r\n");
      out.write("\t\t\t\t\t} else if (condi == \"like\") {\r\n");
      out.write("\t\t\t\t\t\tfstr += \"like '%\" + value + \"%' \";\r\n");
      out.write("\t\t\t\t\t} else if (condi == \"notlike\") {\r\n");
      out.write("\t\t\t\t\t\tfstr += \"not like '%\" + value + \"%' \";\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tfstr += condi + \" '\" + value + \"' \";\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tfstr = filter;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif (panel2.sortParams.sort_col != null && panel2.sortParams.sort_col != \"\") {\r\n");
      out.write("\t\t\t\tsstr = panel2.sortParams.sort_col + \" \" + panel2.sortParams.sort_type;\r\n");
      out.write("\t\t\t}*/\r\n");
      out.write("\t\t\tfstr = filter;\r\n");
      out.write("\t\t\tif (store.getProxy().extraParams.hasOwnProperty('page')) {\r\n");
      out.write("\t\t\t\tstore.getProxy().extraParams['page'] = 1;\r\n");
      out.write("\t\t\t\tstore.currentPage = 1;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif (store.getProxy().extraParams.hasOwnProperty('pagesize')) {\r\n");
      out.write("\t\t\t\tstore.getProxy().extraParams['pagesize'] = panel2.sortParams.page_size;\r\n");
      out.write("\t\t\t\tstore.pageSize = panel2.sortParams.page_size;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (store.getProxy().extraParams.hasOwnProperty('filter')) {\r\n");
      out.write("\t\t\t\tif (kanbanInfo.relation_filter != null && kanbanInfo.relation_filter.length > 0) {\r\n");
      out.write("\t\t\t\t\tstore.getProxy().extraParams['filter'] = kanbanInfo.relation_filter;\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tstore.getProxy().extraParams['filter'] = fstr;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif (bodygrid != null) {\r\n");
      out.write("\t\t\t\tbodygrid.getSelectionModel().select(0);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("//\t\t\tif (bodygrid != null) {\r\n");
      out.write("//\t\t\t\tbodygrid.getSelectionModel().deselectAll();\r\n");
      out.write("//\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tmarqueepanel = Ext.create('Ext.panel.Panel', {\r\n");
      out.write("\t\tregion : 'north',\r\n");
      out.write("\t\theight : 30,\r\n");
      out.write("\t\twidth : '100%',\r\n");
      out.write("\t\tborder : 2,\r\n");
      out.write("\t\tdock : 'top',\r\n");
      out.write("\t\tdataTask : null,\r\n");
      out.write("\t\tscrollTask : null,\r\n");
      out.write("\t\tmarqueeUrl : '../../Funcs/EKB/KanBan.dsc',\r\n");
      out.write("\t\thtml : '',\r\n");
      out.write("\t\tstartMarquee : function(panel, refreshGap, showType) {\r\n");
      out.write("\t\t\tvar mRunner = new Ext.util.TaskRunner();\r\n");
      out.write("\t\t\tvar taskScroll = null;\r\n");
      out.write("\t\t\tvar mStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\tfields : [ 'message' ],\r\n");
      out.write("\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\t\t\turl : this.marqueeUrl,\r\n");
      out.write("\t\t\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\troot : 'marquee'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\textraParams : {\r\n");
      out.write("\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\taction : 'marqueeData',\r\n");
      out.write("\t\t\t\t\t\tsql_id : body_id,\r\n");
      out.write("\t\t\t\t\t\tconn_id : kanbanInfo.conn_id\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tfunction loadData(callback) {\r\n");
      out.write("\t\t\t\tif (mStore != null) {\r\n");
      out.write("\t\t\t\t\tmStore.load(function(record) {\r\n");
      out.write("\t\t\t\t\t\tif (record.length > 0) {\r\n");
      out.write("\t\t\t\t\t\t\tvar value = \"\";\r\n");
      out.write("\t\t\t\t\t\t\tif (showType == '1') {\r\n");
      out.write("\t\t\t\t\t\t\t\tfor ( var i = 0; i < record.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (i == 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvalue = '<div style=\"font-size:22px;\"><Marquee height=\"' + panel.height\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t+ '\" scrollamount=\"3\" onmouseover=\"this.stop()\" onmouseout=\"this.start()\">' + record[i].get('message');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvalue += \"                              \" + record[i].get('message');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (i == record.length - 1) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvalue += \"</div></Marquee>\";\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\tpanel.update(value);\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (panel.scrollTask != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.scrollTask.stop();\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.body.dom.scrollTop = 0;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\tvar t = \"\";\r\n");
      out.write("\t\t\t\t\t\t\t\tfor ( var i = 0; i < record.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (i == 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tt = '<div style=\"font-size:22px;text-align:center;overflow:hidden;height:'+panel.height+'px;\">' + record[i].get('message')\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t+ \"</div>\";\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvalue = '<div>' + t;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvalue += '<div  style=\"font-size:22px;text-align:center;overflow:hidden;height:'+panel.height+'px;\">' + record[i].get('message')\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t+ '</div>';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (i == record.length - 1) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvalue += t + \"</div>\";\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tpanel.update(value);\r\n");
      out.write("\t\t\t\t\t\t\t\tif (panel.scrollTask != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.scrollTask.start(5000);\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\tcallback(panel);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar taskGetData = mRunner.newTask({\r\n");
      out.write("\t\t\t\trun : function() {\r\n");
      out.write("\t\t\t\t\tloadData(function(panel) {\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tthis.dataTask = taskGetData;\r\n");
      out.write("\t\t\tloadData(function(panel) {\r\n");
      out.write("\t\t\t\ttaskGetData.start(refreshGap * 1000);\r\n");
      out.write("\t\t\t\tvar currRow = 0;\r\n");
      out.write("\t\t\t\tif (showType == \"2\") {\r\n");
      out.write("\t\t\t\t\ttaskScroll = mRunner.newTask({\r\n");
      out.write("\t\t\t\t\t\trun : function() {\r\n");
      out.write("\t\t\t\t\t\t\tif (mStore.getCount() > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (currRow == 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.body.dom.scrollTop = 0;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\tif (currRow == mStore.getCount() - 1) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcurrRow = 0;\r\n");
      out.write("\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcurrRow++;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\tpanel.scrollBy(0, panel.height, true);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\tpanel.scrollTask = taskScroll;\r\n");
      out.write("\t\t\t\t\ttaskScroll.start(5000);\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tpanel.scrollTask = null;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tstopScrollTask : function() {\r\n");
      out.write("\t\t\tif (this.dataTask != null) {\r\n");
      out.write("\t\t\t\tthis.dataTask.stop();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif (this.scrollTask != null) {\r\n");
      out.write("\t\t\t\tthis.scrollTask.stop();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tlisteners : {\r\n");
      out.write("\t\t\tel : {\r\n");
      out.write("\t\t\t\tmouseover : function(event, html, eOpts) {\r\n");
      out.write("\t\t\t\t\tif (marqueepanel != null) {\r\n");
      out.write("\t\t\t\t\t\tif (marqueepanel.scrollTask != null) {\r\n");
      out.write("\t\t\t\t\t\t\tmarqueepanel.scrollTask.stop();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tbody : {\r\n");
      out.write("\t\t\t\tmouseout : function(event, html, eOpts) {\r\n");
      out.write("\t\t\t\t\tif (marqueepanel != null) {\r\n");
      out.write("\t\t\t\t\t\tif (marqueepanel.scrollTask != null) {\r\n");
      out.write("\t\t\t\t\t\t\tmarqueepanel.scrollTask.start(5000);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar popuptask = runner.newTask({\r\n");
      out.write("\t\ttimegap : 600,\r\n");
      out.write("\t\trun : function() {\r\n");
      out.write("\t\t\tif (bodygrid != null) {\r\n");
      out.write("\t\t\t\tbodygrid.nextSelectedRow();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetTimeGap : function(timegap) {\r\n");
      out.write("\t\t\tif (timegap == null || timegap == \"\" || timegap < 1) {\r\n");
      out.write("\t\t\t\tthis.timegap = 600;\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tthis.timegap = timegap;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\texecuteTask : function() {\r\n");
      out.write("\t\t\tthis.start(this.timegap * 1000);\r\n");
      out.write("\t\t\tbodypopuptaskIsRunning = true;\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tstopTask : function() {\r\n");
      out.write("\t\t\tthis.stop();\r\n");
      out.write("\t\t\tbodypopuptaskIsRunning = false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar bodygrid = Ext.create('Ext.grid.Panel', {\r\n");
      out.write("\t\t//height : 400,  \r\n");
      out.write("\t\tregion : 'center',\r\n");
      out.write("\t\trenderer : \"component\",\r\n");
      out.write("\t\tstripeRows : true,\r\n");
      out.write("\t\tautoScroll : true,\r\n");
      out.write("\t\tloadMask : true,\r\n");
      out.write("\t\tallowDeselect : true,\r\n");
      out.write("\t\tusePopup : true,\r\n");
      out.write("\t\tid:kanbanInfo.func_id+'-'+'bodygrid',\r\n");
      out.write("\t\tpopupImgPath : '',\r\n");
      out.write("\t\tpopupImgCols : [],\r\n");
      out.write("\t\tpopupTitleCols : [],\r\n");
      out.write("\t\tpopup_refresh_gap : 600,\r\n");
      out.write("\t\tselModel : {\r\n");
      out.write("\t\t\tallowDeselect : true\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tenableTextSelection : true,\r\n");
      out.write("\t\tviewConfig : {\r\n");
      out.write("\t\t\tforceFit : false,\r\n");
      out.write("\t\t\tautoLoad : false\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\t//enableLocking : true,\r\n");
      out.write("\t\tstore : null,\r\n");
      out.write("\t\tbodyCls : gridClass,\r\n");
      out.write("\t\tcomponentCls : gridClass,\r\n");
      out.write("\t\tcolumns : [],\r\n");
      out.write("\t\tsqlRelationStore : Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\tfields : [ 'col_id', 'target_sql_id', 'target_col_id', 'target_ori_col_id', \"target_sql_name\" ],\r\n");
      out.write("\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\tproxy : {\r\n");
      out.write("\t\t\t\ttype : 'memory',\r\n");
      out.write("\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}),\r\n");
      out.write("\t\tcurrpage : 0,\r\n");
      out.write("\t\ttotalpage : 0,\r\n");
      out.write("\t\ttimer : null,\r\n");
      out.write("\t\tdockedItems : [\r\n");
      out.write("\t\t\t\t{\r\n");
      out.write("\t\t\t\t\txtype : 'pagingtoolbar',\r\n");
      out.write("\t\t\t\t\tstore : null,\r\n");
      out.write("\t\t\t\t\tdock : 'bottom',\r\n");
      out.write("\t\t\t\t\tdisplayInfo : false,\r\n");
      out.write("\t\t\t\t\titems : [ '-', {\r\n");
      out.write("\t\t\t\t\t\t//text : 'stop timer',\r\n");
      out.write("\t\t\t\t\t\tenableToggle : true,\r\n");
      out.write("\t\t\t\t\t\twidth : 50,\r\n");
      out.write("\t\t\t\t\t\ttooltip : '',\r\n");
      out.write("\t\t\t\t\t\tcls : 'starttimerbutton',\r\n");
      out.write("\t\t\t\t\t\ttoggleHandler : function(btn, pressed) {\r\n");
      out.write("\t\t\t\t\t\t\t//if (main != null && !main.globalRunning) {\r\n");
      out.write("\t\t\t\t\t\t\t\tthis.btnClick(btn, pressed);\r\n");
      out.write("\t\t\t\t\t\t\t//}\r\n");
      out.write("\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\tbtnClick : function(btn, pressed) {\r\n");
      out.write("\t\t\t\t\t\t\tvar timer = this.up('panel').timer;\r\n");
      out.write("\t\t\t\t\t\t\tif (timer != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (pressed) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttimer.executeTask();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t/* btn.removeCls('starttimerbutton');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbtn.addCls('stoptimerbutton');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbtn.setTooltip(langs.stop_timer); */\r\n");
      out.write("\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttimer.stopTask();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t/* btn.removeCls('stoptimerbutton');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbtn.addCls('starttimerbutton');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbtn.setTooltip(langs.start_timer); */\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}, '-', {\r\n");
      out.write("\t\t\t\t\t\txtype : 'label',\r\n");
      out.write("\t\t\t\t\t\ttext : langs.refresh_gap\r\n");
      out.write("\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\txtype : 'label',\r\n");
      out.write("\t\t\t\t\t\ttext : '',\r\n");
      out.write("\t\t\t\t\t\tmargin : '0 0 0 10'\r\n");
      out.write("\t\t\t\t\t}, '-', Ext.create('DCI.Customer.Img', {\r\n");
      out.write("\t\t\t\t\t\tsrc : \"../../images/icons/CusGridFormat.png\",\r\n");
      out.write("\t\t\t\t\t\twidth : 20,\r\n");
      out.write("\t\t\t\t\t\theight : 20,\r\n");
      out.write("\t\t\t\t\t\thidden : true,\r\n");
      out.write("\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\tafterrender : function(c) {\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.create('Ext.tip.ToolTip', {\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttarget : c.getEl(),\r\n");
      out.write("\t\t\t\t\t\t\t\t\thtml : langs.cus_format\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}), Ext.create('DCI.Customer.Img', {\r\n");
      out.write("\t\t\t\t\t\tsrc : \"../../images/button_icon/BtnCrossDatabase.png\",\r\n");
      out.write("\t\t\t\t\t\twidth : 20,\r\n");
      out.write("\t\t\t\t\t\theight : 20,\r\n");
      out.write("\t\t\t\t\t\thidden : true,\r\n");
      out.write("\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\tafterrender : function(c) {\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.create('Ext.tip.ToolTip', {\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttarget : c.getEl(),\r\n");
      out.write("\t\t\t\t\t\t\t\t\thtml : langs.cross_db\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}) ],\r\n");
      out.write("\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\tbeforechange : function(pagingbar, page, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\tif (this.store.getProxy().extraParams.hasOwnProperty('page')) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (page == null || page == 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tthis.store.getProxy().extraParams['page'] = 1;\r\n");
      out.write("\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tthis.store.getProxy().extraParams['page'] = page;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\tthis.store.load();\r\n");
      out.write("\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\tchange : function(pagingbar, pageData, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\tif (pageData == null || pageData.currentPage == null || pageData.pageCount == null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tthis.up('panel').setCurrPage(0);\r\n");
      out.write("\t\t\t\t\t\t\t\tthis.up('panel').setTotlaPage(0);\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\tthis.up('panel').setCurrPage(pageData.currentPage);\r\n");
      out.write("\t\t\t\t\t\t\t\tthis.up('panel').setTotlaPage(pageData.pageCount);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tmarqueepanel,\r\n");
      out.write("\t\t\t\t{\r\n");
      out.write("\t\t\t\t\txtype : 'panel',\r\n");
      out.write("\t\t\t\t\theight : '100%',\r\n");
      out.write("\t\t\t\t\twidth : 200,\r\n");
      out.write("\t\t\t\t\tborder : 5,\r\n");
      out.write("\t\t\t\t\ttitle : \"\",\r\n");
      out.write("\t\t\t\t\tdock : 'right',\r\n");
      out.write("\t\t\t\t\tlayout : 'fit',\r\n");
      out.write("\t\t\t\t\tcollapsible : true,\r\n");
      out.write("\t\t\t\t\tcollapseDirection : \"right\",\r\n");
      out.write("\t\t\t\t\tanimCollapse : false,\r\n");
      out.write("\t\t\t\t\thidden : false,\r\n");
      out.write("\t\t\t\t\tbuttonAlign : 'left',\r\n");
      out.write("\t\t\t\t\tresizable : true,\r\n");
      out.write("\t\t\t\t\titems : [ {\r\n");
      out.write("\t\t\t\t\t\txtype : 'panel',\r\n");
      out.write("\t\t\t\t\t\theight : '100%',\r\n");
      out.write("\t\t\t\t\t\ttitle : \"\",\r\n");
      out.write("\t\t\t\t\t\twidth : '100%',\r\n");
      out.write("\t\t\t\t\t\tborder : 0\r\n");
      out.write("\t\t\t\t\t} ],\r\n");
      out.write("\t\t\t\t\theader : {\r\n");
      out.write("\t\t\t\t\t\titems : [ {\r\n");
      out.write("\t\t\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\t\t\tcls : 'playbutton',\r\n");
      out.write("\t\t\t\t\t\t\tpressedCls : 'pausebutton',\r\n");
      out.write("\t\t\t\t\t\t\twidth : 15,\r\n");
      out.write("\t\t\t\t\t\t\theight : 15,\r\n");
      out.write("\t\t\t\t\t\t\tenableToggle : true,\r\n");
      out.write("\t\t\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\t\t\t\tif (popuptask != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (me.pressed) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tpopuptask.executeTask();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tpopuptask.stopTask();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t} ]\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tshowPopup : function(title, path) {\r\n");
      out.write("\t\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\t\tvar displaypanel = me.items.get(0);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tvar popup = me.items.get(0);\r\n");
      out.write("\t\t\t\t\t\tif (popup != null) {\r\n");
      out.write("\t\t\t\t\t\t\tif (title == null || title == \"\") {\r\n");
      out.write("\t\t\t\t\t\t\t\tpopup.setTitle(\" \");\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\tpopup.setTitle(title);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tExt.Ajax.request({\r\n");
      out.write("\t\t\t\t\t\t\t\tmethod : 'POST',\r\n");
      out.write("\t\t\t\t\t\t\t\turl : './../../PublicCtrl.dsc',\r\n");
      out.write("\t\t\t\t\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\t\t\t\taction : 'B64Encode',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tstr : path\r\n");
      out.write("\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\tsuccess : function(a) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar result = Ext.JSON.decode(a.responseText);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar h = '<img width=' + displaypanel.getWidth() + ' height=' + displaypanel.getHeight() + ' src=\"./../../ImageLoader.dsc?imgpath='\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t+ result.result + '\"/>';\r\n");
      out.write("\t\t\t\t\t\t\t\t\tdisplaypanel.update(h);\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t} ],\r\n");
      out.write("\t\tlisteners : {\r\n");
      out.write("\t\t\tselectionchange : function(smodel, selected, eOpts) {\r\n");
      out.write("\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\tif (me.usePopup && selected.length > 0) {\r\n");
      out.write("\t\t\t\t\tvar file = \"\";\r\n");
      out.write("\t\t\t\t\tvar title = \"\";\r\n");
      out.write("\t\t\t\t\tvar popup = me.dockedItems.get(3);\r\n");
      out.write("\t\t\t\t\tfor ( var i = 0; i < me.popupImgCols.length; i++) {\r\n");
      out.write("\t\t\t\t\t\tif (i == 0) {\r\n");
      out.write("\t\t\t\t\t\t\tfile = selected[0].get(me.popupImgCols[i]);\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\tfile += \"--\" + selected[0].get(me.popupImgCols[i]);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tfor ( var i = 0; i < me.popupTitleCols.length; i++) {\r\n");
      out.write("\t\t\t\t\t\tif (i == 0) {\r\n");
      out.write("\t\t\t\t\t\t\ttitle = selected[0].get(me.popupTitleCols[i]);\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\ttitle += \"--\" + selected[0].get(me.popupTitleCols[i]);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif (popup != null) {\r\n");
      out.write("\t\t\t\t\t\tvar tmp = me.popupImgPath.replace(\"\\\\\", \"\\\"\");\r\n");
      out.write("\t\t\t\t\t\ttmp = tmp.replace(\"\\\"\", \"\\\\\") + \"\\\\\";\r\n");
      out.write("\t\t\t\t\t\tfile = tmp + file + \".jpg\";\r\n");
      out.write("\t\t\t\t\t\tpopup.showPopup(title, file);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tcelldblclick : function(grid, td, cellIndex, record, tr, rowIndex, e, eOpts) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tcellcontextmenu : function(view, td, cellIndex, record, tr, rowIndex, e, eOpts) {\r\n");
      out.write("\t\t\t\tvar me = this;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tif (me.sqlRelationStore != null && me.sqlRelationStore.getCount() > 0) {\r\n");
      out.write("\t\t\t\t\tvar gridMenu = Ext.create('Ext.menu.Menu', {\r\n");
      out.write("\t\t\t\t\t\tmpanel : main.parentComp,\r\n");
      out.write("\t\t\t\t\t\titems : [],\r\n");
      out.write("\t\t\t\t\t\tclickEvent : function(value, targetsql, targetcol) {\r\n");
      out.write("\t\t\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\t\t\tif (me.mpanel != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.Ajax.request({\r\n");
      out.write("\t\t\t\t\t\t\t\t\tmethod : 'POST',\r\n");
      out.write("\t\t\t\t\t\t\t\t\turl : '../../Funcs/EKB/KanBan.dsc',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\taction : 'funcInfo',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfunc_id : body_id,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tconn_id : kanbanInfo.conn_id\r\n");
      out.write("\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\tsuccess : function(a) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (a.responseText == null || a.responseText == '' || a.responseText.length == 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\talert(\"open kanban \" + targetsql + \" fail\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar result = Ext.JSON.decode(a.responseText);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar funcInfo = {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\turl : result.url,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\ttext : result.text,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tfunc_package : result.func_package,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcan_edit : result.can_edit,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tfilter : \" and \" + targetcol + \" = '\" + value + \"'\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t};\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tme.mpanel.beforeAddCheck(targetsql, kanbanInfo.conn_id, funcInfo, true);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tfor ( var i = 0; i < me.sqlRelationStore.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\tif (me.columns[cellIndex].dataIndex == me.sqlRelationStore.getAt(i).get(\"col_id\")) {\r\n");
      out.write("\t\t\t\t\t\t\tgridMenu.add({\r\n");
      out.write("\t\t\t\t\t\t\t\ttext : me.sqlRelationStore.getAt(i).get(\"target_sql_name\"),\r\n");
      out.write("\t\t\t\t\t\t\t\tcurrcol : me.sqlRelationStore.getAt(i).get(\"col_id\"),\r\n");
      out.write("\t\t\t\t\t\t\t\tcellValue : record.get(me.columns[cellIndex].dataIndex),\r\n");
      out.write("\t\t\t\t\t\t\t\ttargetsql : me.sqlRelationStore.getAt(i).get(\"target_sql_id\"),\r\n");
      out.write("\t\t\t\t\t\t\t\ttargetcol : me.sqlRelationStore.getAt(i).get(\"target_col_id\"),\r\n");
      out.write("\t\t\t\t\t\t\t\ttargetoricol : me.sqlRelationStore.getAt(i).get(\"target_ori_col_id\"),\r\n");
      out.write("\t\t\t\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar menu = this.up('menu');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tmenu.clickEvent(this.cellValue, this.targetsql, this.targetoricol);\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (gridMenu.items.length > 0) {\r\n");
      out.write("\t\t\t\t\t\te.stopEvent();\r\n");
      out.write("\t\t\t\t\t\tgridMenu.showAt(e.getXY());\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\taddCusFormatIcon : function() {\r\n");
      out.write("\t\t\tvar tbar = this.dockedItems.items[1];\r\n");
      out.write("\t\t\ttbar.items.get(17).show();\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\trmCusFormatIcon : function() {\r\n");
      out.write("\t\t\tvar tbar = this.dockedItems.items[1];\r\n");
      out.write("\t\t\ttbar.items.get(17).hide();\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetCrossDBIcon : function(is_cross) {\r\n");
      out.write("\t\t\tvar tbar = this.dockedItems.items[1];\r\n");
      out.write("\t\t\tif (is_cross) {\r\n");
      out.write("\t\t\t\ttbar.items.get(18).show();\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\ttbar.items.get(18).hide();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tinitBodyGrid : function(timer, columns, store, relationRecord) {\r\n");
      out.write("\t\t\tthis.timer = timer;\r\n");
      out.write("\t\t\tvar cols = columns;\r\n");
      out.write("\t\t\tvar me = this;\r\n");
      out.write("\t\t\tvar tmpcols = [];\r\n");
      out.write("\t\t\tvar colsStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\tfields : [ 'colFormats' ],\r\n");
      out.write("\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\t\t\turl : './../../PublicCtrl.dsc',\r\n");
      out.write("\t\t\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\textraParams : {\r\n");
      out.write("\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\taction : 'getGFormat',\r\n");
      out.write("\t\t\t\t\t\tgridid : body_id\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tcolsStore.load(function(record) {\r\n");
      out.write("\t\t\t\tif (record.length > 0) {\r\n");
      out.write("\t\t\t\t\tvar tmpstore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\t\t\tfields : [ 'col_id', 'col_index', 'col_width', 'col_visible' ],\r\n");
      out.write("\t\t\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\t\t\ttype : 'memory',\r\n");
      out.write("\t\t\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\ttmpstore.loadData(record[0].get('colFormats'));\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (tmpstore.getCount() > 0) {\r\n");
      out.write("\t\t\t\t\t\tExt.getCmp(kanbanInfo.func_id+'-'+'bodygrid').addCusFormatIcon();\r\n");
      out.write("\t\t\t\t\t\tfor ( var i = 0; i < tmpstore.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var j = 0; j < cols.length; j++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (cols[j].colid == tmpstore.getAt(i).get('col_id')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (tmpstore.getAt(i).get('col_visible') == '1') {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('hidden')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols[j].hidden = false;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols[j]['hidden'] = false;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (tmpstore.getAt(i).get('col_width') != 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('width')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcols[j].width = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcols[j]['width'] = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (tmpstore.getAt(i).get('col_width') != 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('width')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcols[j].width = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcols[j]['width'] = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('hidden')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols[j].hidden = true;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols[j]['hidden'] = true;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttmpcols.push(cols[j]);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcols.splice(j, 1);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tif (cols != null && cols.length != 0) {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var i = 0; i < cols.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tcols[i]['hidden'] = true;\r\n");
      out.write("\t\t\t\t\t\t\t\ttmpcols.push(cols[i]);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\ttmpcols = cols;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (relationRecord != null) {\r\n");
      out.write("\t\t\t\t\t\tfor ( var j = 0; j < tmpcols.length; j++) {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var i = 0; i < relationRecord.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (\"col\" + relationRecord[i].col_id == tmpcols[j].colid) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (tmpcols[j].hasOwnProperty('componentCls')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttmpcols[j].componentCls = 'dci-realtion-column-header';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttmpcols[j]['componentCls'] = 'dci-realtion-column-header';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t//Ext.util.CSS.updateRule(\".\" + gridClass + \" .x-column-header .x-column-header-inner\", \"background-color\", \"red\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tme.reconfigure(store, tmpcols);\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tif (relationRecord != null) {\r\n");
      out.write("\t\t\t\t\t\tfor ( var j = 0; j < cols.length; j++) {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var i = 0; i < relationRecord.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (\"col\" + relationRecord[i].col_id == cols[j].colid) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('componentCls')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcols[j].componentCls = 'dci-realtion-column-header';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcols[j]['componentCls'] = 'dci-realtion-column-header';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tme.reconfigure(store, cols);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t//initbody\r\n");
      out.write("\t\t\t\ty3=me.child('pagingtoolbar');\r\n");
      out.write("\t\t\t\tme.child('pagingtoolbar').bindStore(gridStore);\r\n");
      out.write("\t\t\t\t//me.enableLocking = true;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t/*if (hp1 != null) {\r\n");
      out.write("\t\t\t\t\thp1.targetGrid = me;\r\n");
      out.write("\t\t\t\t}*/\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tme.sqlRelationStore.loadData(relationRecord);\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\treloadBodyGridFormat : function(columns, store) {\r\n");
      out.write("\t\t\tvar cols = columns;\r\n");
      out.write("\t\t\tvar me = this;\r\n");
      out.write("\t\t\tvar tmpcols = [];\r\n");
      out.write("\t\t\tvar colsStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\tfields : [ 'colFormats' ],\r\n");
      out.write("\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\t\t\turl : './../../PublicCtrl.dsc',\r\n");
      out.write("\t\t\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\textraParams : {\r\n");
      out.write("\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\taction : 'getGFormat',\r\n");
      out.write("\t\t\t\t\t\tgridid : body_id\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tcolsStore.load(function(record) {\r\n");
      out.write("\t\t\t\tif (record.length > 0) {\r\n");
      out.write("\t\t\t\t\tvar tmpstore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\t\t\tfields : [ 'col_id', 'col_index', 'col_width', 'col_visible' ],\r\n");
      out.write("\t\t\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\t\t\ttype : 'memory',\r\n");
      out.write("\t\t\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\ttmpstore.loadData(record[0].get('colFormats'));\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (tmpstore.getCount() > 0) {\r\n");
      out.write("\t\t\t\t\t\tExt.getCmp(kanbanInfo.func_id+'-'+'bodygrid').addCusFormatIcon();\r\n");
      out.write("\t\t\t\t\t\tfor ( var i = 0; i < tmpstore.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var j = 0; j < cols.length; j++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (cols[j].colid == tmpstore.getAt(i).get('col_id')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (tmpstore.getAt(i).get('col_visible') == '1') {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('hidden')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols[j].hidden = false;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols[j]['hidden'] = false;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (tmpstore.getAt(i).get('col_width') != 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('width')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcols[j].width = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcols[j]['width'] = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (tmpstore.getAt(i).get('col_width') != 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('width')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcols[j].width = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcols[j]['width'] = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('hidden')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols[j].hidden = true;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols[j]['hidden'] = true;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttmpcols.push(cols[j]);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcols.splice(j, 1);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tif (cols != null && cols.length != 0) {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var i = 0; i < cols.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tcols[i]['hidden'] = true;\r\n");
      out.write("\t\t\t\t\t\t\t\ttmpcols.push(cols[i]);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\ttmpcols = cols;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (me.sqlRelationStore != null) {\r\n");
      out.write("\t\t\t\t\t\tfor ( var j = 0; j < tmpcols.length; j++) {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var i = 0; i < me.sqlRelationStore.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (\"col\" + me.sqlRelationStore.getAt(i).data.col_id == tmpcols[j].colid) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (tmpcols[j].hasOwnProperty('componentCls')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttmpcols[j].componentCls = 'dci-realtion-column-header';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttmpcols[j]['componentCls'] = 'dci-realtion-column-header';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t//Ext.util.CSS.updateRule(\".\" + gridClass + \" .x-column-header .x-column-header-inner\", \"background-color\", \"red\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tme.reconfigure(store, tmpcols);\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tif (me.sqlRelationStore != null) {\r\n");
      out.write("\t\t\t\t\t\tfor ( var j = 0; j < cols.length; j++) {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var i = 0; i < me.sqlRelationStore.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (\"col\" + me.sqlRelationStore.getAt(i).data.col_id == cols[j].colid) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('componentCls')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcols[j].componentCls = 'dci-realtion-column-header';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcols[j]['componentCls'] = 'dci-realtion-column-header';\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tme.reconfigure(store, cols);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t//reloadbody\r\n");
      out.write("\t\t\t\ty4=me.child('pagingtoolbar');\r\n");
      out.write("\t\t\t\tme.child('pagingtoolbar').bindStore(gridStore);\r\n");
      out.write("\t\t\t\t//me.enableLocking = true;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\tif (hp1 != null) {\r\n");
      out.write("\t\t\t\t\thp1.targetGrid = me;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetCurrPage : function(value) {\r\n");
      out.write("\t\t\tthis.currpage = value;\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetTotlaPage : function(value) {\r\n");
      out.write("\t\t\tthis.totalpage = value;\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tnextPage : function() {\r\n");
      out.write("\t\t\tvar cpage = 0;\r\n");
      out.write("\t\t\tvar panel = this;\r\n");
      out.write("\t\t\tif (panel.currpage == null || panel.currpage == 0) {\r\n");
      out.write("\t\t\t\tcpage = 1;\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tcpage = panel.currpage + 1;\r\n");
      out.write("\t\t\t\tif (cpage > panel.totalpage) {\r\n");
      out.write("\t\t\t\t\tcpage = 1;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (panel.store.getProxy().extraParams.hasOwnProperty('page')) {\r\n");
      out.write("\t\t\t\tpanel.store.getProxy().extraParams['page'] = cpage;\r\n");
      out.write("\t\t\t\tpanel.store.currentPage = cpage;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tpanel.store.load(function(record) {\r\n");
      out.write("\t\t\t\tpanel.getSelectionModel().deselectAll();\r\n");
      out.write("\t\t\t\tpanel.setCurrPage(cpage);\r\n");
      out.write("\t\t\t\tpanel.setRefreshTime();\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tglobalNextPage : function(initPage) {\r\n");
      out.write("\t\t\tvar cpage = 0;\r\n");
      out.write("\t\t\tvar panel = this;\r\n");
      out.write("\t\t\tif (initPage == -1) {\r\n");
      out.write("\t\t\t\tif (panel.store.getProxy().extraParams.hasOwnProperty('page')) {\r\n");
      out.write("\t\t\t\t\tpanel.store.getProxy().extraParams['page'] = 1;\r\n");
      out.write("\t\t\t\t\tpanel.store.currentPage = 1;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tpanel.store.load(function(record) {\r\n");
      out.write("\t\t\t\t\tpanel.getSelectionModel().deselectAll();\r\n");
      out.write("\t\t\t\t\tpanel.setCurrPage(1);\r\n");
      out.write("\t\t\t\t\tpanel.setRefreshTime();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (panel.usePopup) {\r\n");
      out.write("\t\t\t\t\t\tvar sModel = panel.getSelectionModel();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tif (sModel != null) {\r\n");
      out.write("\t\t\t\t\t\t\tsModel.select(0);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tcpage = panel.currpage + 1;\r\n");
      out.write("\t\t\t\tif (cpage > panel.totalpage) {\r\n");
      out.write("\t\t\t\t\tcpage = 1;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tif (panel.usePopup) {\r\n");
      out.write("\t\t\t\t\tvar sModel = panel.getSelectionModel();\r\n");
      out.write("\t\t\t\t\tif (sModel != null) {\r\n");
      out.write("\t\t\t\t\t\tvar sindex = 0;\r\n");
      out.write("\t\t\t\t\t\tif (sModel.lastSelected == null) {\r\n");
      out.write("\t\t\t\t\t\t\tsModel.select(0);\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\tif (sModel.lastSelected.index % panel.getStore().pageSize == panel.getStore().getCount() - 1 || sModel.getSelection() == null\r\n");
      out.write("\t\t\t\t\t\t\t\t\t|| sModel.getSelection().length == 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (panel.store.getProxy().extraParams.hasOwnProperty('page')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.store.getProxy().extraParams['page'] = cpage;\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.store.currentPage = cpage;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\tpanel.store.load(function(record) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tsModel.deselectAll();\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.setCurrPage(cpage);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.setRefreshTime();\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.getSelectionModel().select(0);\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\tsindex = (sModel.lastSelected.index + 1) % panel.getStore().pageSize;\r\n");
      out.write("\t\t\t\t\t\t\t\tpanel.getSelectionModel().select(sindex);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tif (panel.store.getProxy().extraParams.hasOwnProperty('page')) {\r\n");
      out.write("\t\t\t\t\t\tpanel.store.getProxy().extraParams['page'] = cpage;\r\n");
      out.write("\t\t\t\t\t\tpanel.store.currentPage = cpage;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tpanel.store.load(function(record) {\r\n");
      out.write("\t\t\t\t\t\tpanel.getSelectionModel().deselectAll();\r\n");
      out.write("\t\t\t\t\t\tpanel.setCurrPage(cpage);\r\n");
      out.write("\t\t\t\t\t\tpanel.setRefreshTime();\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tnextSelectedRow : function() {\r\n");
      out.write("\t\t\tvar me = this;\r\n");
      out.write("\t\t\tvar sModel = me.getSelectionModel();\r\n");
      out.write("\t\t\tif (sModel != null) {\r\n");
      out.write("\t\t\t\tvar data = me.store.getAt(0);\r\n");
      out.write("\t\t\t\tif(data!=null){\r\n");
      out.write("\t\t\t\t\t\tme.store.removeAt(0);\r\n");
      out.write("\t\t\t\t\t\tme.store.insert(me.store.getCount(),data);\r\n");
      out.write("\t\t\t\t\t\tme.getSelectionModel().select(0);\r\n");
      out.write("\t\t\t\t\t\t//me.setPopUpRefreshTime();\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetRefreshTimeTitle : function(gap, unit) {\r\n");
      out.write("\t\t\tvar label = this.dockedItems.get(1).items.get(14);\r\n");
      out.write("\t\t\tif (label != null) {\r\n");
      out.write("\t\t\t\tlabel.setText(langs.refresh_gap + \"  \" + gap + \"  \" + unit);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetRefreshTime : function() {\r\n");
      out.write("\t\t\tvar label = this.dockedItems.get(1).items.get(15);\r\n");
      out.write("\t\t\tif (label != null) {\r\n");
      out.write("\t\t\t\tlabel.setText(Ext.Date.format(new Date(Ext.Date.now()), 'Y/m/d H:i:s'));\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetPopUpRefreshTime : function() {\r\n");
      out.write("\t\t\tvar label = this.dockedItems.get(1).items.get(15);\r\n");
      out.write("\t\t\tif (label != null) {\r\n");
      out.write("\t\t\t\tlabel.setText(Ext.Date.format(new Date(Ext.Date.now()), 'Y/m/d H:i:s'));\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetButtonStatus : function(isrunning) {\r\n");
      out.write("\t\t\tvar btn = this.dockedItems.get(1).items.get(12);\r\n");
      out.write("\t\t\tbtn.toggle(isrunning);\r\n");
      out.write("\t\t\tbtn.btnClick(btn, isrunning);\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetPopupInfo : function(infos) {\r\n");
      out.write("\t\t\tvar me = this;\r\n");
      out.write("\t\t\tvar popup = me.dockedItems.get(3);\r\n");
      out.write("\t\t\tif (infos != null) {\r\n");
      out.write("\t\t\t\tif (infos.use_popup) {\r\n");
      out.write("\t\t\t\t\tpopup.setVisible(true);\r\n");
      out.write("\t\t\t\t\tme.usePopup = infos.use_popup;\r\n");
      out.write("\t\t\t\t\tme.popupImgPath = infos.popup_dir;\r\n");
      out.write("\t\t\t\t\tme.popup_refresh_gap = infos.popup_refresh_gap;\r\n");
      out.write("\t\t\t\t\tif (infos.imgcols != null && infos.imgcols.trim().length > 0) {\r\n");
      out.write("\t\t\t\t\t\tme.popupImgCols = infos.imgcols.split(';');\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (infos.titlecols != null && infos.titlecols.trim().length > 0) {\r\n");
      out.write("\t\t\t\t\t\tme.popupTitleCols = infos.titlecols.split(';');\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tpopup.setVisible(false);\r\n");
      out.write("\t\t\t\t\tme.usePopup = false;\r\n");
      out.write("\t\t\t\t\tme.popupImgPath = \"\";\r\n");
      out.write("\t\t\t\t\tme.popupImgCols = [];\r\n");
      out.write("\t\t\t\t\tme.popupTitleCols = [];\r\n");
      out.write("\t\t\t\t\tme.popup_refresh_gap = 600;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif (popuptask != null) {\r\n");
      out.write("\t\t\t\tpopuptask.setTimeGap(me.popup_refresh_gap);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (me.usePopup) {\r\n");
      out.write("\t\t\t\tpopup.header.items.get(0).toggle(true);\r\n");
      out.write("\t\t\t\tpopup.header.items.get(0).handler();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tgetPopupWidth : function() {\r\n");
      out.write("\t\t\tvar me = this;\r\n");
      out.write("\t\t\tvar popup = me.dockedItems.get(3);\r\n");
      out.write("\t\t\tvar pwidth = 200;\r\n");
      out.write("\t\t\tif (popup != null) {\r\n");
      out.write("\t\t\t\tpwidth = popup.getWidth();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\treturn pwidth;\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tsetPopupWidth : function(pwidth) {\r\n");
      out.write("\t\t\tvar me = this;\r\n");
      out.write("\t\t\tvar popup = me.dockedItems.get(3);\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (popup != null) {\r\n");
      out.write("\t\t\t\tpopup.setWidth(pwidth);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tchangeIcon : function(pressed) {\r\n");
      out.write("\t\t\tvar btn = this.dockedItems.get(1).items.get(12);\r\n");
      out.write("\t\t\tbtn.pressed = pressed;\r\n");
      out.write("\t\t\tif (pressed) {\r\n");
      out.write("\t\t\t\tbtn.removeCls('starttimerbutton');\r\n");
      out.write("\t\t\t\tbtn.addCls('stoptimerbutton');\r\n");
      out.write("\t\t\t\tbtn.setTooltip(langs.stop_timer);\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tbtn.removeCls('stoptimerbutton');\r\n");
      out.write("\t\t\t\tbtn.addCls('starttimerbutton');\r\n");
      out.write("\t\t\t\tbtn.setTooltip(langs.start_timer);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tvar initQueryGridStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\tautoLoad : false,\r\n");
      out.write("\t\tfields : [ 'cols', 'fields', 'legend', 'marquee', 'refresh', 'display', 'combo', 'lights', 'popup', 'advances', 'relation', 'is_cross' ],\r\n");
      out.write("\t\tproxy : {\r\n");
      out.write("\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\turl : '../../Funcs/EKB/KanBan.dsc',\r\n");
      out.write("\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\treader : {\r\n");
      out.write("\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\textraParams : {\r\n");
      out.write("\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\taction : 'init',\r\n");
      out.write("\t\t\t\tsql_id : body_id\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\t\t/************************************************************************************************/\r\n");
      out.write("\t\t\tvar headgridpanel = Ext.create('Ext.panel.Panel', {\r\n");
      out.write("\t\t\t\tlightsData:null,\r\n");
      out.write("\t\t\t\tlayout : 'fit',\r\n");
      out.write("\t\t\t\tanchor: '0 40%', \r\n");
      out.write("\t\t\t\ttitle : kanbanInfo.head_name,\r\n");
      out.write("\t\t\t\theader : {\r\n");
      out.write("\t\t\t\t\theight : 35\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\titems : [ headgrid],\r\n");
      out.write("\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\tvar bodygridpanel = Ext.create('Ext.panel.Panel', {\r\n");
      out.write("\t\t\t\tlightsData:null,\r\n");
      out.write("\t\t\t\tlayout : 'fit',\r\n");
      out.write("\t\t\t\tanchor: '0 80%', \r\n");
      out.write("\t\t\t\ttitle : kanbanInfo.body_name,\r\n");
      out.write("\t\t\t\theader : {\r\n");
      out.write("\t\t\t\t\theight : 35\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\titems : [ bodygrid],\r\n");
      out.write("\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar gridpanel = Ext.create('Ext.panel.Panel', {\r\n");
      out.write("\t\t\t\tlayout : 'anchor',\r\n");
      out.write("\t\t\t\tregion : 'center',\r\n");
      out.write("\t\t\t\tautoScroll : true,\r\n");
      out.write("\t\t\t\titems : [ headgridpanel,bodygridpanel],\r\n");
      out.write("\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar hp2 = Ext.create('Ext.panel.Panel', {\r\n");
      out.write("\t\t\t\ttitle : \"\",\r\n");
      out.write("\t\t\t\tid:kanbanInfo.func_id+'-'+'hp2',\r\n");
      out.write("\t\t\t\tanchor : '100% 50%',\r\n");
      out.write("\t\t\t\tlayout : 'absolute',\r\n");
      out.write("\t\t\t\tborder : 0,\r\n");
      out.write("\t\t\t\tbodyStyle : {\r\n");
      out.write("\t\t\t\t\tbackground : '#d3e1f1'\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tbodyPadding : 0,\r\n");
      out.write("\t\t\t\tsortParams : {\r\n");
      out.write("\t\t\t\t\tsort_col : '',\r\n");
      out.write("\t\t\t\t\tsort_type : '',\r\n");
      out.write("\t\t\t\t\tpage_size : pageSize\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tdisplayParams : {\r\n");
      out.write("\t\t\t\t\tfs : 13,\r\n");
      out.write("\t\t\t\t\tfc : '000000',\r\n");
      out.write("\t\t\t\t\trh : 28,\r\n");
      out.write("\t\t\t\t\tbc : 'FFFFFF',\r\n");
      out.write("\t\t\t\t\tbcEven : 'CCE4F6'\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tbodygrid : null,\r\n");
      out.write("\t\t\t\theadgrid:null,\r\n");
      out.write("\t\t\t\titems : [ Ext.create('DCI.Customer.ComboBox', {\r\n");
      out.write("\t\t\t\t\tfieldLabel : langs.sort_column,\r\n");
      out.write("\t\t\t\t\tname : 'sort_column',\r\n");
      out.write("\t\t\t\t\tlabelWidth : 90,\r\n");
      out.write("\t\t\t\t\twidth : 250,\r\n");
      out.write("\t\t\t\t\tx : 0,\r\n");
      out.write("\t\t\t\t\ty : 8,\r\n");
      out.write("\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\tchange : function(comp, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\tvar panel = this.up('panel');\r\n");
      out.write("\t\t\t\t\t\t\tpanel.sortParams[\"sort_col\"] = newValue;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}), Ext.create('DCI.Customer.ComboBox', {\r\n");
      out.write("\t\t\t\t\tfieldLabel : \"\",\r\n");
      out.write("\t\t\t\t\tlabelWidth : 0,\r\n");
      out.write("\t\t\t\t\twidth : 90,\r\n");
      out.write("\t\t\t\t\tstore : {\r\n");
      out.write("\t\t\t\t\t\tfields : [ 'label', 'value' ],\r\n");
      out.write("\t\t\t\t\t\tdata : [ {\r\n");
      out.write("\t\t\t\t\t\t\t\"label\" : langs.asc,\r\n");
      out.write("\t\t\t\t\t\t\t\"value\" : \"asc\"\r\n");
      out.write("\t\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\t\t\"label\" : langs.desc,\r\n");
      out.write("\t\t\t\t\t\t\t\"value\" : \"desc\"\r\n");
      out.write("\t\t\t\t\t\t} ]\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tx : 250,\r\n");
      out.write("\t\t\t\t\ty : 8,\r\n");
      out.write("\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\tchange : function(comp, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\tvar panel = this.up('panel');\r\n");
      out.write("\t\t\t\t\t\t\tpanel.sortParams[\"sort_type\"] = newValue;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}), Ext.create('DCI.Customer.NumberBox', {\r\n");
      out.write("\t\t\t\t\tfieldLabel : langs.page_size,\r\n");
      out.write("\t\t\t\t\tlabelWidth : 60,\r\n");
      out.write("\t\t\t\t\tdefaultvalue : pageSize,\r\n");
      out.write("\t\t\t\t\tmaxValue : 9999,\r\n");
      out.write("\t\t\t\t\tminValue : 1,\r\n");
      out.write("\t\t\t\t\tdisabled:true,\r\n");
      out.write("\t\t\t\t\twidth : 150,\r\n");
      out.write("\t\t\t\t\tx : 340,\r\n");
      out.write("\t\t\t\t\ty : 8,\r\n");
      out.write("\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\tchange : function(comp, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\tvar panel = this.up('panel');\r\n");
      out.write("\t\t\t\t\t\t\tpanel.sortParams[\"page_size\"] = newValue;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}), {\r\n");
      out.write("\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\tcls : 'configbutton',\r\n");
      out.write("\t\t\t\t\ttooltip : langs.favorties_setup,\r\n");
      out.write("\t\t\t\t\tx : 500,\r\n");
      out.write("\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\twidth : 30,\r\n");
      out.write("\t\t\t\t\theight : 30,\r\n");
      out.write("\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\tvar params = this.up('panel').displayParams;\r\n");
      out.write("\t\t\t\t\t\tvar win = Ext.create('Ext.window.Window', {\r\n");
      out.write("\t\t\t\t\t\t\ttitle : langs.favorties_setup,\r\n");
      out.write("\t\t\t\t\t\t\twidth : 500,\r\n");
      out.write("\t\t\t\t\t\t\theight : 300,\r\n");
      out.write("\t\t\t\t\t\t\tminWidth : 300,\r\n");
      out.write("\t\t\t\t\t\t\tminHeight : 200,\r\n");
      out.write("\t\t\t\t\t\t\tlayout : 'fit',\r\n");
      out.write("\t\t\t\t\t\t\tplain : true,\r\n");
      out.write("\t\t\t\t\t\t\tmodal : true,\r\n");
      out.write("\t\t\t\t\t\t\titems : [ {\r\n");
      out.write("\t\t\t\t\t\t\t\txtype : 'panel',\r\n");
      out.write("\t\t\t\t\t\t\t\tlayout : 'anchor',\r\n");
      out.write("\t\t\t\t\t\t\t\titems : [ {\r\n");
      out.write("\t\t\t\t\t\t\t\t\txtype : 'slider',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tanchor : '80% 25%',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfieldLabel : langs.font_size,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tborder : 1,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvalue : params.fs,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tminValue : 8,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tmaxValue : 48,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tincrement : 1,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tplugins : new Ext.slider.Tip(),\r\n");
      out.write("\t\t\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tchange : function(slider, newValue, thumb, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tchangeKanbanGrid(newValue, gridClass, \"FS\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (bodygrid != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tif (bodygrid.columns.length > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\ttry {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar w = bodygrid.columns[0].width;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tbodygrid.columns[0].setWidth(w + 10);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tbodygrid.columns[0].setWidth(w);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (window.console) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(e.message);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tchangeKanbanGrid(newValue, headGridClass, \"FS\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (headgrid != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tif (headgrid.columns.length > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\ttry {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar w = headgrid.columns[0].width;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\theadgrid.columns[0].setWidth(w + 10);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\theadgrid.columns[0].setWidth(w);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (window.console) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(e.message);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tparams.fs = newValue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tafterrender : function(slider, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tme.labelCell.dom.attributes.getNamedItem(\"valign\").value = \"middle\";\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\t\t\t\txtype : 'dcicolorpicker',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfieldLabel : langs.font_color,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tdefaultColor : '000000',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcurColor : params.fc,\r\n");
      out.write("\t\t\t\t\t\t\t\t\twidth : 180,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tchange : function(picker, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t//changeKanbanGrid(newValue, gridClass, \"FC\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tchangeKanbanGrid(newValue, gridClass, \"FC\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tchangeKanbanGrid(newValue, headGridClass, \"FC\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tparams.fc = newValue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\t\t\t\txtype : 'slider',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tanchor : '80% 25%',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfieldLabel : langs.row_height,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvalue : params.rh,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tminValue : 16,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tmaxValue : 100,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tincrement : 4,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tplugins : new Ext.slider.Tip(),\r\n");
      out.write("\t\t\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tchange : function(slider, newValue, thumb, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t//changeKanbanGrid(newValue, gridClass, \"RH\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tchangeKanbanGrid(newValue, gridClass, \"RH\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tchangeKanbanGrid(newValue, headGridClass, \"RH\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tparams.rh = newValue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tafterrender : function(slider, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tme.labelCell.dom.attributes.getNamedItem(\"valign\").value = \"middle\";\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}, /* {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\txtype : 'dcicolorpicker',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tfieldLabel : langs.bg_color,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tdefaultColor : 'FFFFFF',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcurColor : params.bc,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\twidth : 180,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tchange : function(picker, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tchangeKanbanGrid(newValue, gridClass, \"BC\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tparams.bc = newValue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t} */\r\n");
      out.write("\t\t\t\t\t\t\t\t{\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbodyStyle : 'border:0 ;',\r\n");
      out.write("\t\t\t\t\t\t\t\t\titems : [ {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tlayout : 'column',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tbodyStyle : 'border:0 ;',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\titems : [ {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcolumnWidth : .4,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tbodyStyle : 'border:0;',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\titems : [ {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\txtype : \"dcicolorpicker\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tfieldLabel : langs.bg_color,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tdefaultColor : 'FFFFFF',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcurColor : params.bc,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\twidth : 180,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tchange : function(picker, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tchangeKanbanGrid(newValue, gridClass, \"BC\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tchangeKanbanGrid(newValue, headGridClass, \"BC\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tparams.bc = newValue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t} ]\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcolumnWidth : .5,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tbodyStyle : 'border:0;',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\titems : [ {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\txtype : \"dcicolorpicker\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tdefaultColor : 'CCE4F6',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcurColor : params.bcEven,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\twidth : 70,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tchange : function(picker, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t//alert(newValue);alert(gridClass);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t//changeKanbanGrid(newValue, gridClass, \"BcEven\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tchangeKanbanGrid(newValue, gridClass , \"BcEven\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tchangeKanbanGrid(newValue, headGridClass, \"BcEven\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tparams.bcEven = newValue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t} ]\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} ]\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} ]\r\n");
      out.write("\t\t\t\t\t\t\t\t} ]\r\n");
      out.write("\t\t\t\t\t\t\t} ],\r\n");
      out.write("\t\t\t\t\t\t\tbuttons : [ {\r\n");
      out.write("\t\t\t\t\t\t\t\ttext : langs.close,\r\n");
      out.write("\t\t\t\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tthis.up('.window').close();\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t} ]\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\twin.show();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}/*, {\r\n");
      out.write("\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\tcls : 'toexcelbutton',\r\n");
      out.write("\t\t\t\t\ttooltip : langs.to_excel,\r\n");
      out.write("\t\t\t\t\twidth : 30,\r\n");
      out.write("\t\t\t\t\theight : 30,\r\n");
      out.write("\t\t\t\t\tx : 530,\r\n");
      out.write("\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\t\tvar grid = me.up('panel').bodygrid;\r\n");
      out.write("\t\t\t\t\t\tif (grid != null) {\r\n");
      out.write("\t\t\t\t\t\t\t//buildHtml(grid.columns, grid.getStore().getRange(0), \"1\", function(datas) {\r\n");
      out.write("\t\t\t\t\t\t\tvar downloadform = Ext.create('Ext.form.Panel', {\r\n");
      out.write("\t\t\t\t\t\t\t\tstandardSubmit : true,\r\n");
      out.write("\t\t\t\t\t\t\t\turl : '../../Funcs/EKB/KanBan.dsc',\r\n");
      out.write("\t\t\t\t\t\t\t\tmethod : 'POST'\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tdownloadform.submit({\r\n");
      out.write("\t\t\t\t\t\t\t\ttarget : '_blank',\r\n");
      out.write("\t\t\t\t\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tconn_id : kanbanInfo.conn_id,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfunc_id : kanbanInfo.func_id,\r\n");
      out.write("\t\t\t\t\t\t\t\t\taction : 'excel',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfilter : grid.getStore().getProxy().extraParams['filter'],\r\n");
      out.write("\t\t\t\t\t\t\t\t\tsort : grid.getStore().getProxy().extraParams['sort'],\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcols : Ext.encode(buildColObj(grid.columns)),\r\n");
      out.write("\t\t\t\t\t\t\t\t\tctype : \"1\"\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t//});\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\tcls : 'tohtmlbutton',\r\n");
      out.write("\t\t\t\t\ttooltip : langs.to_html,\r\n");
      out.write("\t\t\t\t\twidth : 30,\r\n");
      out.write("\t\t\t\t\theight : 30,\r\n");
      out.write("\t\t\t\t\tx : 560,\r\n");
      out.write("\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\t\tvar grid = me.up('panel').bodygrid;\r\n");
      out.write("\t\t\t\t\t\tif (grid != null) {\r\n");
      out.write("\t\t\t\t\t\t\t//buildHtml(grid.columns, grid.getStore().getRange(0), \"2\", function(datas) {\r\n");
      out.write("\t\t\t\t\t\t\tvar downloadform = Ext.create('Ext.form.Panel', {\r\n");
      out.write("\t\t\t\t\t\t\t\tstandardSubmit : true,\r\n");
      out.write("\t\t\t\t\t\t\t\turl : '../../Funcs/EKB/KanBan.dsc',\r\n");
      out.write("\t\t\t\t\t\t\t\tmethod : 'POST'\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tdownloadform.submit({\r\n");
      out.write("\t\t\t\t\t\t\t\ttarget : '_blank',\r\n");
      out.write("\t\t\t\t\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tconn_id : kanbanInfo.conn_id,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfunc_id : kanbanInfo.func_id,\r\n");
      out.write("\t\t\t\t\t\t\t\t\taction : 'html',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfilter : grid.getStore().getProxy().extraParams['filter'],\r\n");
      out.write("\t\t\t\t\t\t\t\t\tsort : grid.getStore().getProxy().extraParams['sort'],\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcols : Ext.encode(buildColObj(grid.columns)),\r\n");
      out.write("\t\t\t\t\t\t\t\t\tctype : \"2\"\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t//});\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}*/ ],\r\n");
      out.write("\t\t\t\tsetComboData : function(record) {\r\n");
      out.write("\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\tvar combo = me.items.get(0);\r\n");
      out.write("\t\t\t\t\tvar cStore = combo.getStore();\r\n");
      out.write("\t\t\t\t\trecord.unshift({\r\n");
      out.write("\t\t\t\t\t\tlabel : langs.no_sort,\r\n");
      out.write("\t\t\t\t\t\tvalue : ''\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\tif (cStore != null) {\r\n");
      out.write("\t\t\t\t\t\tcStore.loadData(record);\r\n");
      out.write("\t\t\t\t\t\tcombo.loadDefault();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\trecord.shift();\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tsetCss : function(displayInfo) {\r\n");
      out.write("\t\t\t\t\tvar hp2 = this;\r\n");
      out.write("\t\t\t\t\tvar cssText = \"\";\r\n");
      out.write("\t\t\t\t\tvar hdCssText = \"\";\r\n");
      out.write("\t\t\t\t\tvar evenText = \"\";\r\n");
      out.write("\t\t\t\t\t//Ext.util.CSS.removeStyleSheet(gridClass);\r\n");
      out.write("\t\t\t\t\t//headGridClass\r\n");
      out.write("\t\t\t\t\t/*****headgridClass*****/\r\n");
      out.write("\t\t\t\t\tremoveAllStyle(headGridClass);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (displayInfo.grid_font_size != null && displayInfo.grid_font_size != \"\") {\r\n");
      out.write("\t\t\t\t\t\tcssText += \"font-size:\" + displayInfo.grid_font_size + \"pt;\";\r\n");
      out.write("\t\t\t\t\t\tevenText += \"font-size:\" + displayInfo.grid_font_size + \"pt;\";\r\n");
      out.write("\t\t\t\t\t\thdCssText += \"font-size:\" + displayInfo.grid_font_size + \"pt;\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.fs = displayInfo.grid_font_size;\r\n");
      out.write("\t\t\t\t\t\tExt.util.CSS.createStyleSheet(\".\" + headGridClass + \" .x-progress-text {font-size:\" + (displayInfo.grid_font_size - 2) + \"pt;}\", headGridClass);\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcssText += \"font-size:13pt;\";\r\n");
      out.write("\t\t\t\t\t\tevenText += \"font-size:13pt;\";\r\n");
      out.write("\t\t\t\t\t\thdCssText += \"font-size:13pt;\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.fs = '13';\r\n");
      out.write("\t\t\t\t\t\tExt.util.CSS.createStyleSheet(\".\" + headGridClass + \" .x-progress-text {font-size:11pt}\", headGridClass);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif (displayInfo.grid_font_color != null && displayInfo.grid_font_color != \"\") {\r\n");
      out.write("\t\t\t\t\t\tcssText += \"color:#\" + displayInfo.grid_font_color + \";\";\r\n");
      out.write("\t\t\t\t\t\tevenText += \"color:#\" + displayInfo.grid_font_color + \";\";\r\n");
      out.write("\t\t\t\t\t\thdCssText += \"color:#\" + displayInfo.grid_font_color + \";\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.fc = displayInfo.grid_font_color;\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcssText += \"color:black;\";\r\n");
      out.write("\t\t\t\t\t\tevenText += \"color:black;\";\r\n");
      out.write("\t\t\t\t\t\thdCssText += \"color:black;\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.fc = '000000';\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif (displayInfo.grid_row_height != null && displayInfo.grid_row_height != \"\") {\r\n");
      out.write("\t\t\t\t\t\tcssText += \"height:\" + displayInfo.grid_row_height + \"px;\";\r\n");
      out.write("\t\t\t\t\t\tevenText += \"height:\" + displayInfo.grid_row_height + \"px;\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.rh = displayInfo.grid_row_height;\r\n");
      out.write("\t\t\t\t\t\tExt.util.CSS.createStyleSheet(\".\" + headGridClass + \" .x-progress-default {height:\" + (displayInfo.grid_row_height - 8) + \"px;}\", headGridClass);\r\n");
      out.write("\t\t\t\t\t\tExt.util.CSS.createStyleSheet(\".\" + headGridClass + \" .x-progress-text {line-height:\" + (displayInfo.grid_row_height - 8) + \"px;}\", headGridClass);\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcssText += \"height:28px;\";\r\n");
      out.write("\t\t\t\t\t\tevenText += \"height:28px;\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.rh = '28';\r\n");
      out.write("\t\t\t\t\t\tExt.util.CSS.createStyleSheet(\".\" + headGridClass + \" .x-progress-default {height:20px;}\", headGridClass);\r\n");
      out.write("\t\t\t\t\t\tExt.util.CSS.createStyleSheet(\".\" + headGridClass + \" .x-progress-text {line-height:20px;}\", headGridClass);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (displayInfo.grid_row_color != null && displayInfo.grid_row_color != \"\") {\r\n");
      out.write("\t\t\t\t\t\tcssText += \"background-color:#\" + displayInfo.grid_row_color + \";\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.bc = displayInfo.grid_row_color;\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcssText += \"background-color:withe;\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.bc = 'FFFFFF';\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (displayInfo.grid_row_even_color != null && displayInfo.grid_row_even_color != \"\") {\r\n");
      out.write("\t\t\t\t\t\tevenText += \"background-color:#\" + displayInfo.grid_row_even_color + \";\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.bcEven = displayInfo.grid_row_even_color;\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tevenText += \"background-color:#cce4f6;\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.bcEven = 'cce4f6';\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tExt.util.CSS.createStyleSheet('.' + headGridClass + ' .x-grid-row .x-grid-cell {' + cssText + '}', headGridClass);\r\n");
      out.write("\t\t\t\t\tExt.util.CSS.createStyleSheet('.' + headGridClass + ' .x-grid-row-alt .x-grid-cell {' + evenText + '}', headGridClass);\r\n");
      out.write("\t\t\t\t\tExt.util.CSS.createStyleSheet('.' + headGridClass + ' .x-column-header {' + hdCssText + '}', headGridClass);\r\n");
      out.write("\t\t\t\t\t/*****bodygridClass*****/\r\n");
      out.write("\t\t\t\t\tremoveAllStyle(gridClass);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (displayInfo.grid_font_size != null && displayInfo.grid_font_size != \"\") {\r\n");
      out.write("\t\t\t\t\t\tcssText += \"font-size:\" + displayInfo.grid_font_size + \"pt;\";\r\n");
      out.write("\t\t\t\t\t\tevenText += \"font-size:\" + displayInfo.grid_font_size + \"pt;\";\r\n");
      out.write("\t\t\t\t\t\thdCssText += \"font-size:\" + displayInfo.grid_font_size + \"pt;\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.fs = displayInfo.grid_font_size;\r\n");
      out.write("\t\t\t\t\t\tExt.util.CSS.createStyleSheet(\".\" + gridClass + \" .x-progress-text {font-size:\" + (displayInfo.grid_font_size - 2) + \"pt;}\", gridClass);\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcssText += \"font-size:13pt;\";\r\n");
      out.write("\t\t\t\t\t\tevenText += \"font-size:13pt;\";\r\n");
      out.write("\t\t\t\t\t\thdCssText += \"font-size:13pt;\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.fs = '13';\r\n");
      out.write("\t\t\t\t\t\tExt.util.CSS.createStyleSheet(\".\" + gridClass + \" .x-progress-text {font-size:11pt}\", gridClass);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif (displayInfo.grid_font_color != null && displayInfo.grid_font_color != \"\") {\r\n");
      out.write("\t\t\t\t\t\tcssText += \"color:#\" + displayInfo.grid_font_color + \";\";\r\n");
      out.write("\t\t\t\t\t\tevenText += \"color:#\" + displayInfo.grid_font_color + \";\";\r\n");
      out.write("\t\t\t\t\t\thdCssText += \"color:#\" + displayInfo.grid_font_color + \";\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.fc = displayInfo.grid_font_color;\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcssText += \"color:black;\";\r\n");
      out.write("\t\t\t\t\t\tevenText += \"color:black;\";\r\n");
      out.write("\t\t\t\t\t\thdCssText += \"color:black;\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.fc = '000000';\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif (displayInfo.grid_row_height != null && displayInfo.grid_row_height != \"\") {\r\n");
      out.write("\t\t\t\t\t\tcssText += \"height:\" + displayInfo.grid_row_height + \"px;\";\r\n");
      out.write("\t\t\t\t\t\tevenText += \"height:\" + displayInfo.grid_row_height + \"px;\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.rh = displayInfo.grid_row_height;\r\n");
      out.write("\t\t\t\t\t\tExt.util.CSS.createStyleSheet(\".\" + gridClass + \" .x-progress-default {height:\" + (displayInfo.grid_row_height - 8) + \"px;}\", gridClass);\r\n");
      out.write("\t\t\t\t\t\tExt.util.CSS.createStyleSheet(\".\" + gridClass + \" .x-progress-text {line-height:\" + (displayInfo.grid_row_height - 8) + \"px;}\", gridClass);\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcssText += \"height:28px;\";\r\n");
      out.write("\t\t\t\t\t\tevenText += \"height:28px;\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.rh = '28';\r\n");
      out.write("\t\t\t\t\t\tExt.util.CSS.createStyleSheet(\".\" + gridClass + \" .x-progress-default {height:20px;}\", gridClass);\r\n");
      out.write("\t\t\t\t\t\tExt.util.CSS.createStyleSheet(\".\" + gridClass + \" .x-progress-text {line-height:20px;}\", gridClass);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (displayInfo.grid_row_color != null && displayInfo.grid_row_color != \"\") {\r\n");
      out.write("\t\t\t\t\t\tcssText += \"background-color:#\" + displayInfo.grid_row_color + \";\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.bc = displayInfo.grid_row_color;\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcssText += \"background-color:withe;\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.bc = 'FFFFFF';\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (displayInfo.grid_row_even_color != null && displayInfo.grid_row_even_color != \"\") {\r\n");
      out.write("\t\t\t\t\t\tevenText += \"background-color:#\" + displayInfo.grid_row_even_color + \";\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.bcEven = displayInfo.grid_row_even_color;\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tevenText += \"background-color:#cce4f6;\";\r\n");
      out.write("\t\t\t\t\t\thp2.displayParams.bcEven = 'cce4f6';\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tExt.util.CSS.createStyleSheet('.' + gridClass + ' .x-grid-row .x-grid-cell {' + cssText + '}', gridClass);\r\n");
      out.write("\t\t\t\t\tExt.util.CSS.createStyleSheet('.' + gridClass + ' .x-grid-row-alt .x-grid-cell {' + evenText + '}', gridClass);\r\n");
      out.write("\t\t\t\t\tExt.util.CSS.createStyleSheet('.' + gridClass + ' .x-column-header {' + hdCssText + '}', gridClass);\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tsetInitData : function(record, grid) {\r\n");
      out.write("\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\tvar comp = me.items.get(0);\r\n");
      out.write("\t\t\t\t\tif (record[\"sort_col\"] == null || record[\"sort_col\"] == \"\") {\r\n");
      out.write("\t\t\t\t\t\tcomp.loadDefault();\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcomp.setValue(record[\"sort_col\"]);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tcomp = me.items.get(1);\r\n");
      out.write("\t\t\t\t\tif (record[\"sort_type\"] == null || record[\"sort_type\"] == \"\") {\r\n");
      out.write("\t\t\t\t\t\tcomp.loadDefault();\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcomp.setValue(record[\"sort_type\"]);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tcomp = me.items.get(2);\r\n");
      out.write("\t\t\t\t\tif (record[\"page_size\"] != null && record[\"page_size\"] != \"\") {\r\n");
      out.write("\t\t\t\t\t\tcomp.setValue(record[\"page_size\"]);\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tcomp.loadDefault();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tme.bodygrid = grid;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar headpanel = Ext.create('Ext.panel.Panel', {\r\n");
      out.write("\t\t\t\tregion : 'north',\r\n");
      out.write("\t\t\t\theight : 120,\r\n");
      out.write("\t\t\t\tcollapsible : true,\r\n");
      out.write("\t\t\t\ttitle : kanbanInfo.func_name,\r\n");
      out.write("\t\t\t\theader : {\r\n");
      out.write("\t\t\t\t\theight : 35\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tlayout : 'anchor',\r\n");
      out.write("\t\t\t\titems : [ hp1, hp2 ],\r\n");
      out.write("\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\tcollapse : function() {\r\n");
      out.write("\t\t\t\t\t\tupdatePanelOpen(kanbanInfo, postvalue, uid, langs, '0');\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\texpand : function() {\r\n");
      out.write("\t\t\t\t\t\tupdatePanelOpen(kanbanInfo, postvalue, uid, langs, '1');\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar headpagetask = runner.newTask({\r\n");
      out.write("\t\t\t\ttimegap : 600,\r\n");
      out.write("\t\t\t\tdisplaygap : 30,\r\n");
      out.write("\t\t\t\trun : function() {\r\n");
      out.write("\t\t\t\t\tif (headgrid != null) {\r\n");
      out.write("\t\t\t\t\t\theadgrid.nextPage();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tsetTimeGap : function(timegap) {\r\n");
      out.write("\t\t\t\t\tif (timegap == null || timegap == \"\" || timegap < 1) {\r\n");
      out.write("\t\t\t\t\t\tthis.timegap = 600;\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tthis.timegap = timegap;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tgetTimeGap : function() {\r\n");
      out.write("\t\t\t\t\treturn this.timegap;\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tsetDisplayGap : function(timegap) {\r\n");
      out.write("\t\t\t\t\tif (timegap == null || timegap == \"\" || timegap < 1) {\r\n");
      out.write("\t\t\t\t\t\tthis.displaygap = 600;\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tthis.displaygap = timegap;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tgetDisplayGap : function() {\r\n");
      out.write("\t\t\t\t\treturn this.displaygap;\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\texecuteTask : function() {\r\n");
      out.write("\t\t\t\t\tthis.start(this.timegap * 1000);\r\n");
      out.write("\t\t\t\t\theadtaskIsRunning = true;\r\n");
      out.write("\t\t\t\t\tif (headgrid != null) {\r\n");
      out.write("\t\t\t\t\t\theadgrid.changeIcon(true);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tstopTask : function() {\r\n");
      out.write("\t\t\t\t\tthis.stop();\r\n");
      out.write("\t\t\t\t\theadtaskIsRunning = false;\r\n");
      out.write("\t\t\t\t\tif (headgrid != null) {\r\n");
      out.write("\t\t\t\t\t\theadgrid.changeIcon(false);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar pagetask = runner.newTask({\r\n");
      out.write("\t\t\t\ttimegap : 600,\r\n");
      out.write("\t\t\t\tdisplaygap : 30,\r\n");
      out.write("\t\t\t\trun : function() {\r\n");
      out.write("\t\t\t\t\tif (bodygrid != null) {\r\n");
      out.write("\t\t\t\t\t\tbodygrid.nextPage();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tsetTimeGap : function(timegap) {\r\n");
      out.write("\t\t\t\t\tif (timegap == null || timegap == \"\" || timegap < 1) {\r\n");
      out.write("\t\t\t\t\t\tthis.timegap = 600;\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tthis.timegap = timegap;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tgetTimeGap : function() {\r\n");
      out.write("\t\t\t\t\treturn this.timegap;\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tsetDisplayGap : function(timegap) {\r\n");
      out.write("\t\t\t\t\tif (timegap == null || timegap == \"\" || timegap < 1) {\r\n");
      out.write("\t\t\t\t\t\tthis.displaygap = 600;\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tthis.displaygap = timegap;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tgetDisplayGap : function() {\r\n");
      out.write("\t\t\t\t\treturn this.displaygap;\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\texecuteTask : function() {\r\n");
      out.write("\t\t\t\t\tthis.start(this.timegap * 1000);\r\n");
      out.write("\t\t\t\t\tbodytaskIsRunning = true;\r\n");
      out.write("\t\t\t\t\tif (bodygrid != null) {\r\n");
      out.write("\t\t\t\t\t\tbodygrid.changeIcon(true);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tstopTask : function() {\r\n");
      out.write("\t\t\t\t\tthis.stop();\r\n");
      out.write("\t\t\t\t\tbodytaskIsRunning = false;\r\n");
      out.write("\t\t\t\t\tif (bodygrid != null) {\r\n");
      out.write("\t\t\t\t\t\tbodygrid.changeIcon(false);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t/*var popuptask = runner.newTask({\r\n");
      out.write("\t\t\t\ttimegap : 600,\r\n");
      out.write("\t\t\t\trun : function() {\r\n");
      out.write("\t\t\t\t\tif (bodygrid != null) {\r\n");
      out.write("\t\t\t\t\t\tbodygrid.nextSelectedRow(0);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tsetTimeGap : function(timegap) {\r\n");
      out.write("\t\t\t\t\tif (timegap == null || timegap == \"\" || timegap < 1) {\r\n");
      out.write("\t\t\t\t\t\tthis.timegap = 600;\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tthis.timegap = timegap;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\texecuteTask : function() {\r\n");
      out.write("\t\t\t\t\tthis.start(this.timegap * 1000);\r\n");
      out.write("\t\t\t\t\tbodypopuptaskIsRunning = true;\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tstopTask : function() {\r\n");
      out.write("\t\t\t\t\tthis.stop();\r\n");
      out.write("\t\t\t\t\tbodypopuptaskIsRunning = false;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});*/\r\n");
      out.write("\t\t\tvar main = Ext.create('DCI.Customer.SubPanel', {\r\n");
      out.write("\t\t\t\tid : kanbanInfo.func_id + 'Main',\r\n");
      out.write("\t\t\t\trenderTo : kanbanInfo.func_id + 'Page',\r\n");
      out.write("\t\t\t\tautoDestroy : true,\r\n");
      out.write("\t\t\t\tpagetype : 'kanban',\r\n");
      out.write("\t\t\t\tborder : 0,\r\n");
      out.write("\t\t\t\tbodyPadding : '0 5 5 5',\r\n");
      out.write("\t\t\t\tlayout : 'border',\r\n");
      out.write("\t\t\t\twidthChangeControls : [ headpanel,gridpanel],\r\n");
      out.write("\t\t\t\titems : [ headpanel,gridpanel ],\r\n");
      out.write("\t\t\t\tglobalRunning : false,\r\n");
      out.write("\t\t\t\tbeforeClose : function() {\r\n");
      out.write("\t\t\t\t\tif (marqueepanel != null) {\r\n");
      out.write("\t\t\t\t\t\tmarqueepanel.stopScrollTask();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (pagetask != null) {\r\n");
      out.write("\t\t\t\t\t\tpagetask.stopTask();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif (headpagetask != null) {\r\n");
      out.write("\t\t\t\t\t\theadpagetask.stopTask();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (popuptask != null) {\r\n");
      out.write("\t\t\t\t\t\tpopuptask.stopTask();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tremoveAllStyle(gridClass);\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tfocusPage : function() {\r\n");
      out.write("\t\t\t\t\tif (!this.globalRunning) {\r\n");
      out.write("\t\t\t\t\t\tif (bodytaskIsRunning) {\r\n");
      out.write("\t\t\t\t\t\t\tpagetask.executeTask();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tif (headtaskIsRunning) {\r\n");
      out.write("\t\t\t\t\t\t\theadpagetask.executeTask();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tif (bodypopuptaskIsRunning) {\r\n");
      out.write("\t\t\t\t\t\t\tpopuptask.executeTask();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\t\tif (Ext.get(me.renderTo) != null) {\r\n");
      out.write("\t\t\t\t\t\t\tme.resize(Ext.get(me.renderTo).getWidth(), Ext.get(me.renderTo).getHeight());\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tif (bodygrid != null) {\r\n");
      out.write("\t\t\t\t\t\t\tbodygrid.setRefreshTimeTitle(pagetask.getDisplayGap(), langs.minutes);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tif (headgrid != null) {\r\n");
      out.write("\t\t\t\t\t\t\theadgrid.setRefreshTimeTitle(headpagetask.getDisplayGap(), langs.minutes);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tleavePage : function() {\r\n");
      out.write("\t\t\t\t\tif (bodytaskIsRunning) {\r\n");
      out.write("\t\t\t\t\t\tpagetask.stop();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif(headtaskIsRunning){\r\n");
      out.write("\t\t\t\t\t\theadpagetask.stop();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif (bodypopuptaskIsRunning) {\r\n");
      out.write("\t\t\t\t\t\tpopuptask.stop();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tglobalTimerEvent : function(initPage, gap) {\r\n");
      out.write("\t\t\t\t\tif (pagetask != null) {\r\n");
      out.write("\t\t\t\t\t\tpagetask.stop();\r\n");
      out.write("\t\t\t\t\t\tif (bodygrid != null) {\r\n");
      out.write("\t\t\t\t\t\t\tbodygrid.changeIcon(false);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (popuptask != null) {\r\n");
      out.write("\t\t\t\t\t\tpopuptask.stop();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (bodygrid != null) {\r\n");
      out.write("\t\t\t\t\t\tbodygrid.setRefreshTimeTitle(gap, langs.seconds);\r\n");
      out.write("\t\t\t\t\t\tbodygrid.globalNextPage(initPage);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tthis.globalRunning = true;\r\n");
      out.write("\t\t\t\t\treturn bodygrid.currpage;\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tglobalTimerStop : function() {\r\n");
      out.write("\t\t\t\t\tthis.globalRunning = false;\r\n");
      out.write("\t\t\t\t\tif (bodytaskIsRunning) {\r\n");
      out.write("\t\t\t\t\t\tpagetask.executeTask();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif(headtaskIsRunning){\r\n");
      out.write("\t\t\t\t\t\theadpagetask.executeTask();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (bodypopuptaskIsRunning) {\r\n");
      out.write("\t\t\t\t\t\tExt.getCmp(kanbanInfo.func_id+'-'+'bodygrid').getSelectionModel().select(0);\r\n");
      out.write("\t\t\t\t\t\tpopuptask.executeTask();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (bodygrid != null) {\r\n");
      out.write("\t\t\t\t\t\tbodygrid.setRefreshTimeTitle(pagetask.getDisplayGap(), langs.minutes);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tswitchToNextTab : function() {\r\n");
      out.write("\t\t\t\t\tvar tonextpage = false;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (bodygrid.currpage == bodygrid.totalpage) {\r\n");
      out.write("\t\t\t\t\t\tif (bodygrid.usePopup) {\r\n");
      out.write("\t\t\t\t\t\t\tvar sModel = bodygrid.getSelectionModel();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tif (sModel != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (sModel.lastSelected != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (sModel.lastSelected.index % bodygrid.getStore().pageSize >= bodygrid.getStore().getCount() - 1) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttonextpage = true;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\ttonextpage = true;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\ttonextpage = false;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\treturn tonextpage;\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\trelationReload : function(filter) {\r\n");
      out.write("\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\tkanbanInfo.relation_filter = filter;\r\n");
      out.write("\t\t\t\t\tme.items.get(1).getStore().gridreload(me.items.get(0), \"reload\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar initStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\tfields : [ 'headDisplay','headAdvances','bodyDisplay' ],\r\n");
      out.write("\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\t\t\turl : '../../CUS/Funcs/EKB/SubKanBan02420302.dsc',\r\n");
      out.write("\t\t\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\textraParams : {\r\n");
      out.write("\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\taction : 'initFirst',\r\n");
      out.write("\t\t\t\t\t\tsql_id : kanbanInfo.func_id\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\tinitStore.load(function(hprecord){\r\n");
      out.write("\t\t\t\tif (hprecord.length > 0) {\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\tinitQueryHeadStore.load(function(record) {\r\n");
      out.write("\t\t\t\t\tif (record.length > 0) {\r\n");
      out.write("\t\t\t\t\t\tif (headGridStore != null) {\r\n");
      out.write("\t\t\t\t\t\t\tvar fields = record[0].get('fields');\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var f = 0; f < fields.length; f++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (fields[f].sortType == \"\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfields[f].sortType = function(value) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvar newvalue = parseFloat(String(value).replace(/,/g, '').replace('$', ''));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\treturn isNaN(newvalue) ? 0 : newvalue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t};\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\theadGridStore.model.setFields(fields);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tif (headgrid != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\theadgrid.setCrossDBIcon(record[0].get('is_cross'));\r\n");
      out.write("\t\t\t\t\t\t\t\theadgrid.initHeadGrid(headpagetask, record[0].get('cols'), headGridStore, record[0].get('relation'));\r\n");
      out.write("\t\t\t\t\t\t\t\theadgrid.setPopupInfo(record[0].get('popup'));\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t//*******************************ff\r\n");
      out.write("\t\t\t\t\t\t\t/*if (marqueepanel != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar minfo = record[0].get('marquee');\r\n");
      out.write("\t\t\t\t\t\t\t\tif (minfo.use_marquee == 1) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (minfo.marquee_location == \"1\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tmarqueepanel.setDocked('bottom');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tmarqueepanel.setDocked('top');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\theadgrid.doLayout();\r\n");
      out.write("\t\t\t\t\t\t\t\t\tmarqueepanel.startMarquee(marqueepanel, minfo.marquee_refresh_gap, minfo.marquee_type);\r\n");
      out.write("\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tmarqueepanel.setVisible(false);\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}*/\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tif (headpagetask != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar rinfo = record[0].get('refresh');\r\n");
      out.write("\t\t\t\t\t\t\t\theadpagetask.setTimeGap(rinfo.refresh_gap);\r\n");
      out.write("\t\t\t\t\t\t\t\theadpagetask.setDisplayGap(rinfo.display_gap);\r\n");
      out.write("\t\t\t\t\t\t\t\theadgrid.setRefreshTimeTitle(rinfo.display_gap, langs.minutes);\r\n");
      out.write("\t\t\t\t\t\t\t\tif (rinfo.auto_refresh == \"1\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\theadpagetask.executeTask();\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\theadgrid.setButtonStatus(rinfo.auto_refresh == \"1\");\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tif (headgridpanel != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\theadgridpanel.lightsData = record[0].get('lights');\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\tif (hp1 != null && hp2 != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar displayInfo = hprecord[0].get('headDisplay');\r\n");
      out.write("\t\t\t\t\t\t\t\thp2.setCss(displayInfo);\r\n");
      out.write("\t\t\t\t\t\t\t\thp1.setComboData(record[0].get('combo'));\r\n");
      out.write("\t\t\t\t\t\t\t\thp2.setComboData(record[0].get('combo'));\r\n");
      out.write("\t\t\t\t\t\t\t\thp1.setInitData(displayInfo);\r\n");
      out.write("\t\t\t\t\t\t\t\thp2.setInitData(displayInfo, headgrid);\r\n");
      out.write("\t\t\t\t\t\t\t\theadgrid.setPopupWidth(displayInfo.popup_width);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tif (advWin != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tadvWin.setComboData(record[0].get('combo'));\r\n");
      out.write("\t\t\t\t\t\t\t\tadvWin.lightsData = record[0].get('lights');\r\n");
      out.write("\t\t\t\t\t\t\t\tadvWin.setInitData(headpanel, headGridStore, advWin, hprecord[0].get('headAdvances'));\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\tvar bodycondi=\"\";\r\n");
      out.write("\t\t\t\t\t\t\t//gridStore=Ext.getCmp(kanbanInfo.func_id+'-'+'bodygrid').getStore();\r\n");
      out.write("\t\t\t\t\t\t\theadGridStore.gridreload(headpanel, advWin.condiStr,gridStore,bodycondi);\r\n");
      out.write("\t\t\t\t\t\t\t//gridStore.gridreload(headpanel, kanbanInfo.condition+\"'\"+headGridStore.getAt(0).get(kanbanInfo.combinecolumn)+\"'\");\r\n");
      out.write("\t\t\t\t\t\t\t//gridStore.gridreload(headpanel, kanbanInfo.condition+\"'\"+headGridStore.getAt(0).get(kanbanInfo.combinecolumn)+\"'\");\r\n");
      out.write("\t\t\t\t\t\t\tvar tab = Ext.getCmp('tab' + kanbanInfo.func_id);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tif (main != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tmain.setParent(tab.up());\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tif (headgridpanel != null) {\r\n");
      out.write("\t\t\t\t\t\t\tvar legend = record[0].get('legend');\r\n");
      out.write("\t\t\t\t\t\t\tif (legend == null || legend.length == 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\theadgridpanel.setTitle(\"<table><tr><td><font size='2'>\" + kanbanInfo.head_name + \"</font></td></tr></table>\");\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\theadgridpanel.setTitle(record[0].get('legend').replace(\"$$$kn$$$\", kanbanInfo.head_name));\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tinitQueryGridStore.load(function(brecord) {\r\n");
      out.write("\t\t\t\t\t\tif (brecord.length > 0) {\r\n");
      out.write("\t\t\t\t\t\t\tif (gridStore != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar fields = brecord[0].get('fields');\r\n");
      out.write("\t\t\t\t\t\t\t\tfor ( var f = 0; f < fields.length; f++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (fields[f].sortType == \"\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfields[f].sortType = function(value) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar newvalue = parseFloat(String(value).replace(/,/g, '').replace('$', ''));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\treturn isNaN(newvalue) ? 0 : newvalue;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t};\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\tgridStore.model.setFields(fields);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tif (bodygrid != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbodygrid.setCrossDBIcon(brecord[0].get('is_cross'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbodygrid.initBodyGrid(pagetask, brecord[0].get('cols'), gridStore, brecord[0].get('relation'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbodygrid.setPopupInfo(brecord[0].get('popup'));\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tif (marqueepanel != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar minfo = brecord[0].get('marquee');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (minfo.use_marquee == 1) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (minfo.marquee_location == \"1\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tmarqueepanel.setDocked('bottom');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tmarqueepanel.setDocked('top');\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tbodygrid.doLayout();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tmarqueepanel.startMarquee(marqueepanel, minfo.marquee_refresh_gap, minfo.marquee_type);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tmarqueepanel.setVisible(false);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tif (pagetask != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar rinfo = brecord[0].get('refresh');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpagetask.setTimeGap(rinfo.refresh_gap);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpagetask.setDisplayGap(rinfo.display_gap);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbodygrid.setRefreshTimeTitle(rinfo.display_gap, langs.minutes);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (rinfo.auto_refresh == \"1\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tpagetask.executeTask();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbodygrid.setButtonStatus(rinfo.auto_refresh == \"1\");\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tif (bodygridpanel != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbodygridpanel.lightsData = brecord[0].get('lights');\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tif (hp1 != null && hp2 != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar displayInfo = hprecord[0].get('bodyDisplay');\r\n");
      out.write("\t\t\t\t\t\t\t\t\thp2.setCss(displayInfo);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t//hp1.setComboData(brecord[0].get('combo'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t//hp2.setComboData(brecord[0].get('combo'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t//hp1.setInitData(displayInfo);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t//hp2.setInitData(displayInfo, bodygrid);\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbodygrid.setPopupWidth(displayInfo.popup_width);\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t/*\tif (advWin != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tadvWin.setComboData(brecord[0].get('combo'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\tadvWin.lightsData = brecord[0].get('lights');\r\n");
      out.write("\t\t\t\t\t\t\t\t\tadvWin.setInitData(headpanel, gridStore, advWin, brecord[0].get('advances'));\r\n");
      out.write("\t\t\t\t\t\t\t\t}*/\r\n");
      out.write("\t\t\t\t\t\t\t\tvar tab = Ext.getCmp('tab' + kanbanInfo.func_id);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tif (main != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tmain.setParent(tab.up());\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tif (bodygridpanel != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar legend = brecord[0].get('legend');\r\n");
      out.write("\t\t\t\t\t\t\t\tif (legend == null || legend.length == 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbodygridpanel.setTitle(\"<table><tr><td><font size='2'>\" + kanbanInfo.body_name + \"</font></td></tr></table>\");\r\n");
      out.write("\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbodygridpanel.setTitle(brecord[0].get('legend').replace(\"$$$kn$$$\", kanbanInfo.body_name));\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t});\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\tmain.resize(Ext.get(kanbanInfo.func_id + \"Page\").getWidth(), Ext.get(kanbanInfo.func_id + \"Page\").getHeight());\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"");
      if (_jspx_meth_dcitag_005freqParam_005f6(_jspx_page_context))
        return;
      out.write("Page\" class=\"page_div\"></div>\r\n");
      out.write("\r\n");
      out.write("\t<!-- <audio id=\"audio1\" src=\"success.wav\" preload=\"auto\" autobuffer></audio> -->\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_dcitag_005freqParam_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  dcitag:reqParam
    com.dci.jweb.DCITags.Request.getReqParameter _jspx_th_dcitag_005freqParam_005f0 = (new com.dci.jweb.DCITags.Request.getReqParameter());
    _jsp_instancemanager.newInstance(_jspx_th_dcitag_005freqParam_005f0);
    _jspx_th_dcitag_005freqParam_005f0.setJspContext(_jspx_page_context);
    // /Customer/Funcs/EKB/KanBan02420302.jsp(8,7) name = paramName type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_dcitag_005freqParam_005f0.setParamName("func_name");
    _jspx_th_dcitag_005freqParam_005f0.doTag();
    _jsp_instancemanager.destroyInstance(_jspx_th_dcitag_005freqParam_005f0);
    return false;
  }

  private boolean _jspx_meth_dcitag_005freqParam_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  dcitag:reqParam
    com.dci.jweb.DCITags.Request.getReqParameter _jspx_th_dcitag_005freqParam_005f1 = (new com.dci.jweb.DCITags.Request.getReqParameter());
    _jsp_instancemanager.newInstance(_jspx_th_dcitag_005freqParam_005f1);
    _jspx_th_dcitag_005freqParam_005f1.setJspContext(_jspx_page_context);
    // /Customer/Funcs/EKB/KanBan02420302.jsp(158,13) name = paramName type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_dcitag_005freqParam_005f1.setParamName("uid");
    _jspx_th_dcitag_005freqParam_005f1.doTag();
    _jsp_instancemanager.destroyInstance(_jspx_th_dcitag_005freqParam_005f1);
    return false;
  }

  private boolean _jspx_meth_dcitag_005freqParam_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  dcitag:reqParam
    com.dci.jweb.DCITags.Request.getReqParameter _jspx_th_dcitag_005freqParam_005f2 = (new com.dci.jweb.DCITags.Request.getReqParameter());
    _jsp_instancemanager.newInstance(_jspx_th_dcitag_005freqParam_005f2);
    _jspx_th_dcitag_005freqParam_005f2.setJspContext(_jspx_page_context);
    // /Customer/Funcs/EKB/KanBan02420302.jsp(165,24) name = paramName type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_dcitag_005freqParam_005f2.setParamName("func_id");
    _jspx_th_dcitag_005freqParam_005f2.doTag();
    _jsp_instancemanager.destroyInstance(_jspx_th_dcitag_005freqParam_005f2);
    return false;
  }

  private boolean _jspx_meth_dcitag_005freqParam_005f3(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  dcitag:reqParam
    com.dci.jweb.DCITags.Request.getReqParameter _jspx_th_dcitag_005freqParam_005f3 = (new com.dci.jweb.DCITags.Request.getReqParameter());
    _jsp_instancemanager.newInstance(_jspx_th_dcitag_005freqParam_005f3);
    _jspx_th_dcitag_005freqParam_005f3.setJspContext(_jspx_page_context);
    // /Customer/Funcs/EKB/KanBan02420302.jsp(166,26) name = paramName type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_dcitag_005freqParam_005f3.setParamName("func_name");
    _jspx_th_dcitag_005freqParam_005f3.doTag();
    _jsp_instancemanager.destroyInstance(_jspx_th_dcitag_005freqParam_005f3);
    return false;
  }

  private boolean _jspx_meth_dcitag_005freqParam_005f4(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  dcitag:reqParam
    com.dci.jweb.DCITags.Request.getReqParameter _jspx_th_dcitag_005freqParam_005f4 = (new com.dci.jweb.DCITags.Request.getReqParameter());
    _jsp_instancemanager.newInstance(_jspx_th_dcitag_005freqParam_005f4);
    _jspx_th_dcitag_005freqParam_005f4.setJspContext(_jspx_page_context);
    // /Customer/Funcs/EKB/KanBan02420302.jsp(167,24) name = paramName type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_dcitag_005freqParam_005f4.setParamName("conn_id");
    _jspx_th_dcitag_005freqParam_005f4.doTag();
    _jsp_instancemanager.destroyInstance(_jspx_th_dcitag_005freqParam_005f4);
    return false;
  }

  private boolean _jspx_meth_dcitag_005freqParam_005f5(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  dcitag:reqParam
    com.dci.jweb.DCITags.Request.getReqParameter _jspx_th_dcitag_005freqParam_005f5 = (new com.dci.jweb.DCITags.Request.getReqParameter());
    _jsp_instancemanager.newInstance(_jspx_th_dcitag_005freqParam_005f5);
    _jspx_th_dcitag_005freqParam_005f5.setJspContext(_jspx_page_context);
    // /Customer/Funcs/EKB/KanBan02420302.jsp(168,32) name = paramName type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_dcitag_005freqParam_005f5.setParamName("filter");
    _jspx_th_dcitag_005freqParam_005f5.doTag();
    _jsp_instancemanager.destroyInstance(_jspx_th_dcitag_005freqParam_005f5);
    return false;
  }

  private boolean _jspx_meth_dcitag_005freqParam_005f6(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  dcitag:reqParam
    com.dci.jweb.DCITags.Request.getReqParameter _jspx_th_dcitag_005freqParam_005f6 = (new com.dci.jweb.DCITags.Request.getReqParameter());
    _jsp_instancemanager.newInstance(_jspx_th_dcitag_005freqParam_005f6);
    _jspx_th_dcitag_005freqParam_005f6.setJspContext(_jspx_page_context);
    // /Customer/Funcs/EKB/KanBan02420302.jsp(4511,10) name = paramName type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_dcitag_005freqParam_005f6.setParamName("func_id");
    _jspx_th_dcitag_005freqParam_005f6.doTag();
    _jsp_instancemanager.destroyInstance(_jspx_th_dcitag_005freqParam_005f6);
    return false;
  }
}
