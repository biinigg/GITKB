/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2016-01-27 06:23:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.FuncViews.Configs;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class RoleConfig_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/FuncViews/Configs/./../../dcitag/dcitag.tld", Long.valueOf(1452650348276L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\">\r\n");
      out.write("<title>");
      if (_jspx_meth_dcitag_005freqParam_005f0(_jspx_page_context))
        return;
      out.write("</title>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" charset=\"UTF-8\">\r\n");
      out.write("var t1,t2,t3;\r\n");
      out.write("\tExt.onReady(function() {\r\n");
      out.write("\t\tvar localKeys = [ \"save_msg\", \"delete_msg\", \"delete_fail\", \"delete_success\", \"delete_result_title\", \"delete_confirm_title\", \"delete_confirm_msg\", \"delete_fail\",\r\n");
      out.write("\t\t\t\t\"save_fail\", \"save_success\", \"save_result_title\", \"save_fail\", \"role_id\", \"role_name\", \"role_desc\", \"system_build\", \"visible\", \"enable\", \"disable\", \"func_id\",\r\n");
      out.write("\t\t\t\t\"conn_id\", \"can_edit\", \"group_role_edit\", \"toolbar_query_title\", \"system_def_can_not_edit\", \"confirm_title\", \"data_lose_warning\", \"role_exist\", \"load_def_format\",\r\n");
      out.write("\t\t\t\t\"load_def_fail\", \"load_def_success\", \"load_def_result_title\", \"load_def_confirm_title\", \"load_def_confirm_msg\", \"cus_format\", \"copy_fail\", \"input_role_name\",\r\n");
      out.write("\t\t\t\t\"todo_query\", \"just_use_in_view\", \"copy_role_confirm\", \"copy_success\", \"info_msg_title\", \"copy\" ];\r\n");
      out.write("\t\tvar keys = localKeys.concat(globeKeys);\r\n");
      out.write("\t\tvar uid = '");
      if (_jspx_meth_dcitag_005freqParam_005f1(_jspx_page_context))
        return;
      out.write("';\r\n");
      out.write("\t\tthis.dcistore.setMultiLangKeys(keys);\r\n");
      out.write("\t\tthis.dcistore.setUid(uid);\r\n");
      out.write("\t\tthis.dcistore.load(function(records) {\r\n");
      out.write("\t\t\tif (records != null && records.length == 1) {\r\n");
      out.write("\t\t\t\tvar langs = buildMultiLangObjct(keys, records[0].get('langValues'));\r\n");
      out.write("\t\t\t\tshowPage(records[0].get('dcitagValue'), langs, '");
      if (_jspx_meth_dcitag_005freqParam_005f2(_jspx_page_context))
        return;
      out.write("', uid);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tfunction showPage(postvalue, langs, recvAuth, uid) {\r\n");
      out.write("\t\t\tvar canEdit = recvAuth == \"1\";\r\n");
      out.write("\t\t\tvar visible_combo = Ext.create('DCI.Customer.ComboBox', {\r\n");
      out.write("\t\t\t\tfieldLabel : langs.visible,\r\n");
      out.write("\t\t\t\tname : 'visible',\r\n");
      out.write("\t\t\t\tstore : {\r\n");
      out.write("\t\t\t\t\tfields : [ 'label', 'value' ],\r\n");
      out.write("\t\t\t\t\tdata : [ {\r\n");
      out.write("\t\t\t\t\t\t\"label\" : langs.enable,\r\n");
      out.write("\t\t\t\t\t\t\"value\" : '1'\r\n");
      out.write("\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\t\"label\" : langs.disable,\r\n");
      out.write("\t\t\t\t\t\t\"value\" : '0'\r\n");
      out.write("\t\t\t\t\t} ]\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tdefaultvalue : '1',\r\n");
      out.write("\t\t\t\tx : 500,\r\n");
      out.write("\t\t\t\ty : 10\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar headform = Ext.create('DCI.Customer.HeadFormPanel', {\r\n");
      out.write("\t\t\t\theight : 100,\r\n");
      out.write("\t\t\t\turl : '../../Configs/RoleConfig.dsc',\r\n");
      out.write("\t\t\t\tlanguageObj : langs,\r\n");
      out.write("\t\t\t\titems : [ Ext.create('DCI.Customer.TextField', {\r\n");
      out.write("\t\t\t\t\tfieldLabel : langs.role_id,\r\n");
      out.write("\t\t\t\t\temptyText : '',\r\n");
      out.write("\t\t\t\t\tname : 'role_id',\r\n");
      out.write("\t\t\t\t\tallowBlank : false,\r\n");
      out.write("\t\t\t\t\tispk : true,\r\n");
      out.write("\t\t\t\t\tcanEdit : false,\r\n");
      out.write("\t\t\t\t\tdefaultvalue : langs.system_build,\r\n");
      out.write("\t\t\t\t\tx : 0,\r\n");
      out.write("\t\t\t\t\ty : 10\r\n");
      out.write("\t\t\t\t}), Ext.create('DCI.Customer.TextField', {\r\n");
      out.write("\t\t\t\t\tfieldLabel : langs.role_name,\r\n");
      out.write("\t\t\t\t\temptyText : '',\r\n");
      out.write("\t\t\t\t\tname : 'role_name',\r\n");
      out.write("\t\t\t\t\tallowBlank : true,\r\n");
      out.write("\t\t\t\t\tx : 250,\r\n");
      out.write("\t\t\t\t\ty : 10\r\n");
      out.write("\t\t\t\t}), Ext.create('DCI.Customer.TextField', {\r\n");
      out.write("\t\t\t\t\tfieldLabel : langs.role_desc,\r\n");
      out.write("\t\t\t\t\temptyText : '',\r\n");
      out.write("\t\t\t\t\tname : 'role_desc',\r\n");
      out.write("\t\t\t\t\tallowBlank : true,\r\n");
      out.write("\t\t\t\t\twidth : 465,\r\n");
      out.write("\t\t\t\t\tx : 0,\r\n");
      out.write("\t\t\t\t\ty : 50\r\n");
      out.write("\t\t\t\t}), visible_combo ],\r\n");
      out.write("\t\t\t\tshowQueryWindow : function() {\r\n");
      out.write("\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\tme.initQueryWindow();\r\n");
      out.write("\t\t\t\t\tvar pageSize = 10;\r\n");
      out.write("\t\t\t\t\tvar initStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\t\t\tfields : [ 'cols' ],\r\n");
      out.write("\t\t\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\t\t\t\t\turl : '../../Configs/RoleConfig.dsc',\r\n");
      out.write("\t\t\t\t\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\t\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\textraParams : {\r\n");
      out.write("\t\t\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\tuid : uid\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tvar gstore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\t\t\tfields : [ 'role_id', 'role_name', 'role_desc', 'visible' ],\r\n");
      out.write("\t\t\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\t\t\t\t\turl : '../../Configs/RoleConfig.dsc',\r\n");
      out.write("\t\t\t\t\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\t\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\t\t\troot : 'items',\r\n");
      out.write("\t\t\t\t\t\t\t\ttotalProperty : 'total'\r\n");
      out.write("\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\textraParams : {\r\n");
      out.write("\t\t\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\t\t\taction : 'search',\r\n");
      out.write("\t\t\t\t\t\t\t\tpage : 1,\r\n");
      out.write("\t\t\t\t\t\t\t\tpagesize : pageSize,\r\n");
      out.write("\t\t\t\t\t\t\t\tfilter : ''\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\tpageSize : pageSize\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tvar gridColumns = [ {\r\n");
      out.write("\t\t\t\t\t\ttext : langs.role_id,\r\n");
      out.write("\t\t\t\t\t\tdataIndex : 'role_id',\r\n");
      out.write("\t\t\t\t\t\twidth : 200\r\n");
      out.write("\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\ttext : langs.role_name,\r\n");
      out.write("\t\t\t\t\t\tdataIndex : 'role_name',\r\n");
      out.write("\t\t\t\t\t\twidth : 200\r\n");
      out.write("\t\t\t\t\t} ];\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tvar openwin = Ext.create('DCI.Customer.QueryWindow', {\r\n");
      out.write("\t\t\t\t\t\theight : 335,\r\n");
      out.write("\t\t\t\t\t\twidth : 450,\r\n");
      out.write("\t\t\t\t\t\theadform : me,\r\n");
      out.write("\t\t\t\t\t\ttitle : langs.toolbar_query_title,\r\n");
      out.write("\t\t\t\t\t\tloadHeadData : function(record) {\r\n");
      out.write("\t\t\t\t\t\t\tthis.headform.loadRecord(record);\r\n");
      out.write("\t\t\t\t\t\t\tthis.headform.setDataLoaded(true);\r\n");
      out.write("\t\t\t\t\t\t\tif (bodyStore != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (bodyStore.getProxy().extraParams.hasOwnProperty('keys')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbodyStore.getProxy().extraParams['keys'] = record.get(\"role_id\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbodyStore.load();\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\tif (bodypanel != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar obj = new Object();\r\n");
      out.write("\t\t\t\t\t\t\t\tobj[\"role_id\"] = record.get(\"role_id\");\r\n");
      out.write("\t\t\t\t\t\t\t\tbodypanel.headKeys = obj;\r\n");
      out.write("\t\t\t\t\t\t\t\tbodypanel.dataloaded(this.headform.dataloaded);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\tthis.close();\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tinitStore.load(function(records) {\r\n");
      out.write("\t\t\t\t\t\topenwin.setInitObjects(records, gstore, gridColumns);\r\n");
      out.write("\t\t\t\t\t\tme.searchWin = openwin;\r\n");
      out.write("\t\t\t\t\t\tme.searchStore = gstore;\r\n");
      out.write("\t\t\t\t\t\topenwin.show();\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar headpanel = Ext.create('DCI.Customer.HeadPanel', {\r\n");
      out.write("\t\t\t\theight : 160,\r\n");
      out.write("\t\t\t\theadform : headform,\r\n");
      out.write("\t\t\t\tpostvalue : postvalue,\r\n");
      out.write("\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\tcanEdit : canEdit,\r\n");
      out.write("\t\t\t\tbodyPadding : '0 0 10 0',\r\n");
      out.write("\t\t\t\tkeepAdd : false,\r\n");
      out.write("\t\t\t\texceptionEditAuth : function() {\r\n");
      out.write("\t\t\t\t\tvar result = [ \"1\", \"\" ];\r\n");
      out.write("\t\t\t\t\tvar form = this.bindform;\r\n");
      out.write("\t\t\t\t\tif (headform != null) {\r\n");
      out.write("\t\t\t\t\t\tif (form.items.get(0).getValue() == \"RSYS\") {\r\n");
      out.write("\t\t\t\t\t\t\tresult = [ \"0\", langs.system_def_can_not_edit ];\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\treturn result;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\theadpanel.setCusButtons([ {\r\n");
      out.write("\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\tcls : 'copybutton',\r\n");
      out.write("\t\t\t\ttooltip : langs.copy,\r\n");
      out.write("\t\t\t\tx : 215,\r\n");
      out.write("\t\t\t\ty : 3,\r\n");
      out.write("\t\t\t\twidth : 30,\r\n");
      out.write("\t\t\t\theight : 30,\r\n");
      out.write("\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\tvar bform = this.up('panel').bindform;\r\n");
      out.write("\t\t\t\t\tvar pvalue = this.up('panel').postvalue;\r\n");
      out.write("\t\t\t\t\tvar langobj = bform.languageObj;\r\n");
      out.write("\t\t\t\t\tif (bform != null) {\r\n");
      out.write("\t\t\t\t\t\tif (bform.getCurrMode() == PageMode.View) {\r\n");
      out.write("\t\t\t\t\t\t\tif (bform.dataloaded) {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar pageSize = 10;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tvar gstore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfields : [ 'role_id', 'role_name', 'role_desc', 'visible' ],\r\n");
      out.write("\t\t\t\t\t\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\turl : '../../Configs/RoleConfig.dsc',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\troot : 'items',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\ttotalProperty : 'total'\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\textraParams : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\taction : 'search',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tpage : 1,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tpagesize : pageSize,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tfilter : ''\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpageSize : pageSize\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tvar roleid = bform.items.get(0).getValue();\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.MessageBox.confirm(langobj.confirm_title, langobj.copy_role_confirm, function(btn) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (btn == 'yes') {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tExt.MessageBox.show({\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\ttitle : langobj.input_role_name,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tmsg : langobj.input_role_name,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\twidth : 300,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tbuttons : Ext.MessageBox.OKCANCEL,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tmultiline : true,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tfn : function(btn, text) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tif (btn == \"ok\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tExt.Ajax.request({\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tmethod : 'POST',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\turl : '../../Configs/RoleConfig.dsc',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDCITag : pvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\taction : 'copyrole',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trole_id : roleid,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trole_name : text\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess : function(a) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar result = Ext.JSON.decode(a.responseText);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (result.success) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (gstore != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (gstore.getProxy().extraParams.hasOwnProperty('filter')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgstore.getProxy().extraParams['filter'] = \" and role_id = '\" + result.msg + \"'\";\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgstore.load(function(records) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (records != null && records.length > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbform.loadRecord(records[0]);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbform.setDataLoaded(true);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (bodyStore != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (bodyStore.getProxy().extraParams.hasOwnProperty('keys')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbodyStore.getProxy().extraParams['keys'] = result.msg;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbodyStore.load();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (bodypanel != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar obj = new Object();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tobj[\"role_id\"] = result.msg;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbodypanel.headKeys = obj;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbodypanel.dataloaded(bform.dataloaded);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tExt.Msg.alert(langobj.info_msg_title, langobj.copy_success);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tExt.Msg.alert(langobj.errmsg, langobj.copy_fail);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tExt.Msg.alert(langobj.errmsg, langobj.copy_fail + \"</br>\" + result.msg);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tfailure : function(f, action) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tExt.Msg.alert(langobj.errmsg, langobj.system_error);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.Msg.alert(langobj.errmsg, langobj.todo_query);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\tExt.Msg.alert(langobj.errmsg, langobj.just_use_in_view);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t} ]);\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar conn_Combo = Ext.create('DCI.Customer.ComboBox', {\r\n");
      out.write("\t\t\t\tlabelWidth : 0\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar func_Combo = Ext.create('DCI.Customer.ComboBox', {\r\n");
      out.write("\t\t\t\tlabelWidth : 0,\r\n");
      out.write("\t\t\t\tstore : {\r\n");
      out.write("\t\t\t\t\tfields : [ 'label', 'value', 'package' ],\r\n");
      out.write("\t\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\t\ttype : 'memory',\r\n");
      out.write("\t\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\tchange : function(comp, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\t\tvar store = me.getStore();\r\n");
      out.write("\t\t\t\t\t\tvar gridStore = me.up().up().getStore();\r\n");
      out.write("\t\t\t\t\t\tfor ( var i = 0; i < store.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\tif (store.getAt(i).get(\"value\") == newValue) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (gridStore != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar ridx = gridStore.getCount() - 1;\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (ridx < 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tridx = 0;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (store.getAt(i).get(\"package\") == \"EKB\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tgridStore.getAt(ridx).set(\"can_edit\", false);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\tgridStore.getAt(ridx).set(\"func_package\", store.getAt(i).get(\"package\"));\r\n");
      out.write("\t\t\t\t\t\t\t\t\tgridStore.getAt(ridx).commit();\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tresize : function(combo, width, height, oldWidth, oldHeight, eOpts) {\r\n");
      out.write("\t\t\t\t\t\tcombo.listConfig = {\r\n");
      out.write("\t\t\t\t\t\t\tminWidth : width - combo.labelWidth\r\n");
      out.write("\t\t\t\t\t\t};\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tExt.define('DCI.Customer.BodyGridPanel2', {\r\n");
      out.write("\t\t\t\textend : 'Ext.panel.Panel',\r\n");
      out.write("\t\t\t\talias : 'DCI.Customer.BodyGridPanel2',\r\n");
      out.write("\t\t\t\tregion : 'center',\r\n");
      out.write("\t\t\t\tlayout : 'border',\r\n");
      out.write("\t\t\t\tbodyStyle : {\r\n");
      out.write("\t\t\t\t\tbackground : \"#eaf1fb\"\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tbodyPadding : 5,\r\n");
      out.write("\t\t\t\theadform : null,\r\n");
      out.write("\t\t\t\tactionurl : '',\r\n");
      out.write("\t\t\t\tlanguageObj : null,\r\n");
      out.write("\t\t\t\tcurrmode : PageMode.View,\r\n");
      out.write("\t\t\t\tdataloaded : false,\r\n");
      out.write("\t\t\t\tgridid : '',\r\n");
      out.write("\t\t\t\tpostvalue : '',\r\n");
      out.write("\t\t\t\tkeyfields : [],\r\n");
      out.write("\t\t\t\theadKeys : {},\r\n");
      out.write("\t\t\t\tcanEdit : true,\r\n");
      out.write("\t\t\t\toriGStore : null,\r\n");
      out.write("\t\t\t\toriGColumns : [],\r\n");
      out.write("\t\t\t\tstopUsingBtn : [],\r\n");
      out.write("\t\t\t\tuid : '',\r\n");
      out.write("\t\t\t\tcusFormatIconPath : '',\r\n");
      out.write("\t\t\t\titems : [ {\r\n");
      out.write("\t\t\t\t\txtype : 'panel',\r\n");
      out.write("\t\t\t\t\tregion : 'north',\r\n");
      out.write("\t\t\t\t\tborder : 0,\r\n");
      out.write("\t\t\t\t\tlayout : 'absolute',\r\n");
      out.write("\t\t\t\t\theight : 40,\r\n");
      out.write("\t\t\t\t\tx : 400,\r\n");
      out.write("\t\t\t\t\ty : 0,\r\n");
      out.write("\t\t\t\t\titems : [ {\r\n");
      out.write("\t\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\t\t// text : this.up('panel').up('panel').languageObj == null ? 'add' :\r\n");
      out.write("\t\t\t\t\t\t// this.up('panel').up('panel').languageObj.add,\r\n");
      out.write("\t\t\t\t\t\twidth : 50,\r\n");
      out.write("\t\t\t\t\t\tdisabled : true,\r\n");
      out.write("\t\t\t\t\t\tx : 0,\r\n");
      out.write("\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\t\tvar currmode = this.up('panel').up('panel').currmode;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tif (currmode == PageMode.Edit) {\r\n");
      out.write("\t\t\t\t\t\t\t\tthis.up('panel').up('panel').addNewRow();\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\t\t// text : this.up('panel').up('panel').languageObj == null ? 'save'\r\n");
      out.write("\t\t\t\t\t\t// : this.up('panel').up('panel').languageObj.save,\r\n");
      out.write("\t\t\t\t\t\tdisabled : true,\r\n");
      out.write("\t\t\t\t\t\twidth : 50,\r\n");
      out.write("\t\t\t\t\t\tx : 55,\r\n");
      out.write("\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\t\tvar bodypanel = this.up('panel').up('panel');\r\n");
      out.write("\t\t\t\t\t\t\tvar currmode = bodypanel.currmode;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tif (currmode == PageMode.Edit) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (bodypanel.valided()) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar langobj = bodypanel.languageObj;\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar store = bodypanel.items.get(1).getStore();\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (bodypanel.items.get(1).plugins[0] != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tbodypanel.items.get(1).plugins[0].completeEdit();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar datas = [];\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar addRows = 0;\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfor ( var i = 0; i < store.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (store.getAt(i).get(\"moditag\") == 1) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tdatas.push(store.getAt(i).data);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (store.getAt(i).get(\"moditp\") == 'add') {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\taddRows++;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\tExt.Ajax.request({\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tmethod : 'POST',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\turl : bodypanel.actionurl,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tDCITag : bodypanel.postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tuid : bodypanel.uid,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\taction : 'bodySave',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tdatas : Ext.encode(datas),\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tallAdd : store.getCount() == addRows\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tsuccess : function(a) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tbodypanel.gridReload();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tExt.Msg.alert(langobj.save_result_title, langobj.save_success);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfailure : function(f, action) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tExt.Msg.alert(langobj.save_result_title, langobj.save_fail + \" :</br>\" + action.result.errorMessage);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\t\t// text : this.up('panel').up('panel').languageObj == null ?\r\n");
      out.write("\t\t\t\t\t\t// '_delete' : this.up('panel').up('panel').languageObj._delete,\r\n");
      out.write("\t\t\t\t\t\tdisabled : true,\r\n");
      out.write("\t\t\t\t\t\twidth : 50,\r\n");
      out.write("\t\t\t\t\t\tx : 110,\r\n");
      out.write("\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\t\tvar bodypanel = this.up('panel').up('panel');\r\n");
      out.write("\t\t\t\t\t\t\tvar currmode = bodypanel.currmode;\r\n");
      out.write("\t\t\t\t\t\t\tvar grid = bodypanel.items.get(1);\r\n");
      out.write("\t\t\t\t\t\t\tvar langobj = bodypanel.languageObj;\r\n");
      out.write("\t\t\t\t\t\t\tvar url = bodypanel.actionurl;\r\n");
      out.write("\t\t\t\t\t\t\tExt.MessageBox.confirm(langobj.delete_confirm_title, langobj.delete_confirm_msg, function(btn) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (btn == 'yes') {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (currmode == PageMode.Edit) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (grid != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar s = grid.getSelectionModel().getSelection();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (s.length > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tExt.Ajax.request({\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tmethod : 'POST',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\turl : url,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tDCITag : bodypanel.postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tuid : bodypanel.uid,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\taction : 'bodyDelete',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tdatas : Ext.encode(s[0].data)\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess : function(a) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tbodypanel.gridReload();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tExt.Msg.alert(langobj.delete_result_title, langobj.delete_success);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tfailure : function(f, action) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tExt.Msg.alert(langobj.delete_result_title, langobj.delete_fail + \" :</br>\" + action.result.errorMessage);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\t\t// text : 'view',\r\n");
      out.write("\t\t\t\t\t\tdisabled : true,\r\n");
      out.write("\t\t\t\t\t\twidth : 100,\r\n");
      out.write("\t\t\t\t\t\tx : 165,\r\n");
      out.write("\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\t\tvar bodypanel = this.up('panel').up('panel');\r\n");
      out.write("\t\t\t\t\t\t\tif (bodypanel.canEdit) {\r\n");
      out.write("\t\t\t\t\t\t\t\tbodypanel.changeMode(bodypanel.currmode);\r\n");
      out.write("\t\t\t\t\t\t\t\tif (bodypanel.currmode == PageMode.View) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbodypanel.gridReload();\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t// bodypanel.headform.setCurrMode(bodypanel.currmode);\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\tExt.MessageBox.alert(this.up('panel').up('panel').languageObj.errmsg, this.up('panel').up('panel').languageObj.no_edit_auth);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\t\t// text : this.up('panel').up('panel').languageObj == null ?\r\n");
      out.write("\t\t\t\t\t\t// 'save_format' :\r\n");
      out.write("\t\t\t\t\t\t// this.up('panel').up('panel').languageObj.save_format,\r\n");
      out.write("\t\t\t\t\t\twidth : 100,\r\n");
      out.write("\t\t\t\t\t\tx : 270,\r\n");
      out.write("\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\t\tvar panel = this.up('panel').up('panel');\r\n");
      out.write("\t\t\t\t\t\t\tvar grid = panel.items.get(1);\r\n");
      out.write("\t\t\t\t\t\t\tvar cols = grid.getView().headerCt.getGridColumns();\r\n");
      out.write("\t\t\t\t\t\t\tvar langobj = panel.languageObj;\r\n");
      out.write("\t\t\t\t\t\t\tvar colinfo = [];\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var i = 0; i < cols.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tvar obj = new Object();\r\n");
      out.write("\t\t\t\t\t\t\t\tobj['col_id'] = cols[i].colid;\r\n");
      out.write("\t\t\t\t\t\t\t\tobj['col_index'] = cols[i].getIndex();\r\n");
      out.write("\t\t\t\t\t\t\t\tobj['col_width'] = cols[i].width;\r\n");
      out.write("\t\t\t\t\t\t\t\tobj['col_visible'] = cols[i].hidden ? 0 : 1;\r\n");
      out.write("\t\t\t\t\t\t\t\tcolinfo.push(obj);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tExt.Ajax.request({\r\n");
      out.write("\t\t\t\t\t\t\t\tmethod : 'POST',\r\n");
      out.write("\t\t\t\t\t\t\t\turl : './../../PublicCtrl.dsc',\r\n");
      out.write("\t\t\t\t\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tDCITag : this.up('panel').up('panel').postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tuid : this.up('panel').up('panel').uid,\r\n");
      out.write("\t\t\t\t\t\t\t\t\taction : 'saveGFormat',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tgridid : this.up('panel').up('panel').gridid,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tdatas : Ext.encode(colinfo)\r\n");
      out.write("\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\tsuccess : function(a) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tpanel.addCusFormatIcon();\r\n");
      out.write("\t\t\t\t\t\t\t\t\tExt.Msg.alert(langobj.save_result_title, langobj.save_success);\r\n");
      out.write("\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\tfailure : function(f, action) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tExt.Msg.alert(langobj.save_result_title, langobj.save_fail + \" :</br>\" + action.result.errorMessage);\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\t\txtype : 'button',\r\n");
      out.write("\t\t\t\t\t\twidth : 120,\r\n");
      out.write("\t\t\t\t\t\tx : 375,\r\n");
      out.write("\t\t\t\t\t\ty : 5,\r\n");
      out.write("\t\t\t\t\t\thandler : function() {\r\n");
      out.write("\t\t\t\t\t\t\tvar panel = this.up('panel').up('panel');\r\n");
      out.write("\t\t\t\t\t\t\tvar grid = panel.items.get(1);\r\n");
      out.write("\t\t\t\t\t\t\tvar langobj = panel.languageObj;\r\n");
      out.write("\t\t\t\t\t\t\t// var ogs = panel.getOGS();\r\n");
      out.write("\t\t\t\t\t\t\tvar ogc = panel.getOGC();\r\n");
      out.write("\t\t\t\t\t\t\tExt.MessageBox.confirm(langobj.load_def_confirm_title, langobj.load_def_confirm_msg, function(btn) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (btn == 'yes') {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tExt.Ajax.request({\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tmethod : 'POST',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\turl : './../../PublicCtrl.dsc',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tparams : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tDCITag : panel.postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tuid : panel.uid,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\taction : 'clearGFormat',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tgridid : panel.gridid\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tsuccess : function(a) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tgrid.reconfigure(null, ogc);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tpanel.rmCusFormatIcon();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tExt.Msg.alert(langobj.load_def_result_title, langobj.load_def_success);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tfailure : function(f, action) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tExt.Msg.alert(langobj.load_def_result_title, langobj.load_def_fail + \" :</br>\" + action.result.errorMessage);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t} ]\r\n");
      out.write("\t\t\t\t}, {\r\n");
      out.write("\t\t\t\t\txtype : 'grid',\r\n");
      out.write("\t\t\t\t\tregion : 'center',\r\n");
      out.write("\t\t\t\t\tstripeRows : true,\r\n");
      out.write("\t\t\t\t\tautoScroll : true,\r\n");
      out.write("\t\t\t\t\tloadMask : true,\r\n");
      out.write("\t\t\t\t\tallowDeselect : true,\r\n");
      out.write("\t\t\t\t\tselModel : {\r\n");
      out.write("\t\t\t\t\t\tallowDeselect : true\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tenableTextSelection : true,\r\n");
      out.write("\t\t\t\t\tviewConfig : {\r\n");
      out.write("\t\t\t\t\t\tforceFit : false,\r\n");
      out.write("\t\t\t\t\t\tautoLoad : false\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tcolumns : [],\r\n");
      out.write("\t\t\t\t\tstore : null,\r\n");
      out.write("\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\tcelldblclick : function(grid, td, cellIndex, record, tr, rowIndex, e, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\tvar panel = this.up('panel');\r\n");
      out.write("\t\t\t\t\t\t\tpanel.griddbclick(grid, td, cellIndex, record, tr, rowIndex, e, eOpts);\r\n");
      out.write("\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\tselectionchange : function(row, selected, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\tvar panel = this.up('panel');\r\n");
      out.write("\t\t\t\t\t\t\tpanel.gridselectionchange(row, selected, eOpts);\r\n");
      out.write("\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\tdeselect : function(row, record, index, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\tvar panel = this.up('panel');\r\n");
      out.write("\t\t\t\t\t\t\tpanel.griddeselect(row, record, index, eOpts);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\tplugins : [ Ext.create('Ext.grid.plugin.CellEditing', {\r\n");
      out.write("\t\t\t\t\t\tclicksToEdit : 1,\r\n");
      out.write("\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\tbeforeedit : function(editor, e, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (e.grid.up('panel').currmode == PageMode.View) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (e.record.get(\"moditp\") != \"add\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (e.grid.up('panel').keyfields != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar keys = e.grid.up('panel').keyfields;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tfor ( var i = 0; i < keys.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tif (keys[i] == e.column.dataIndex) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\tedit : function(editor, e, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (e.record.get(\"moditag\") != 1) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (e.record != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\te.record.set(\"moditag\", 1);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\te.record.set(\"moditp\", \"edit\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\te.record.commit();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}) ]\r\n");
      out.write("\t\t\t\t} ],\r\n");
      out.write("\t\t\t\tsetCusButton : function(buttons) {\r\n");
      out.write("\t\t\t\t\tif (buttons != null) {\r\n");
      out.write("\t\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\t\tfor ( var i = 0; i < buttons.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\tme.insert(me.items.length - 1, buttons[i]);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tgetOGS : function() {\r\n");
      out.write("\t\t\t\t\treturn this.oriGStore;\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tgetOGC : function() {\r\n");
      out.write("\t\t\t\t\treturn this.oriGColumns;\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tisCusFormatExist : function() {\r\n");
      out.write("\t\t\t\t\tvar panel = this.items.get(0);\r\n");
      out.write("\t\t\t\t\tvar exist = false;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tfor ( var i = 0; i < panel.items.length; i++) {\r\n");
      out.write("\t\t\t\t\t\tif (panel.items.get(i).iconid == 'cusicon') {\r\n");
      out.write("\t\t\t\t\t\t\texist = true;\r\n");
      out.write("\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\treturn exist;\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\taddCusFormatIcon : function() {\r\n");
      out.write("\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\tvar panel = this.items.get(0);\r\n");
      out.write("\t\t\t\t\tvar lastItemIdx = panel.items.length - 1;\r\n");
      out.write("\t\t\t\t\tt1=panel.items;\r\n");
      out.write("\t\t\t\t\tt2=panel;\r\n");
      out.write("\t\t\t\t\tif (!me.isCusFormatExist()) {\r\n");
      out.write("\t\t\t\t\t\tpanel.items.insert(panel.items.length, Ext.create('DCI.Customer.Img', {\r\n");
      out.write("\t\t\t\t\t\t\ticonid : 'cusicon',\r\n");
      out.write("\t\t\t\t\t\t\tsrc : me.cusFormatIconPath,\r\n");
      out.write("\t\t\t\t\t\t\tx : panel.items.get(lastItemIdx).x + panel.items.get(lastItemIdx).width + 2,\r\n");
      out.write("\t\t\t\t\t\t\ty : 8,\r\n");
      out.write("\t\t\t\t\t\t\twidth : 20,\r\n");
      out.write("\t\t\t\t\t\t\theight : 20,\r\n");
      out.write("\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\tafterrender : function(c) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tExt.create('Ext.tip.ToolTip', {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttarget : c.getEl(),\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\thtml : me.languageObj.cus_format\r\n");
      out.write("\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}));\r\n");
      out.write("\t\t\t\t\t\tpanel.doLayout();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\trmCusFormatIcon : function() {\r\n");
      out.write("\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\tvar panel = this.items.get(0);\r\n");
      out.write("\t\t\t\t\tif (me.isCusFormatExist()) {\r\n");
      out.write("\t\t\t\t\t\tpanel.items.get(panel.items.length - 1).destroy();\r\n");
      out.write("\t\t\t\t\t\tpanel.items.remove(panel.items.get(panel.items.length - 1));\r\n");
      out.write("\t\t\t\t\t\tpanel.doLayout();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tinitBody : function(store, columns) {\r\n");
      out.write("\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\tvar cols = columns;\r\n");
      out.write("\t\t\t\t\tvar bodyGrid = this.items.get(1);\r\n");
      out.write("\t\t\t\t\tvar panel = me.items.get(0);\r\n");
      out.write("\t\t\t\t\tvar tmpcols = [];\r\n");
      out.write("\t\t\t\t\tvar obj = null;\r\n");
      out.write("\t\t\t\t\tme.oriGStore = store;\r\n");
      out.write("\t\t\t\t\tme.oriGColumns = [];\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (me.cusFormatIconPath == null || me.cusFormatIconPath == '') {\r\n");
      out.write("\t\t\t\t\t\tme.cusFormatIconPath = \"../../images/icons/CusGridFormat.png\";\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tfor ( var i = 0; i < columns.length; i++) {\r\n");
      out.write("\t\t\t\t\t\tobj = new Object();\r\n");
      out.write("\t\t\t\t\t\tfor ( var key in columns[i]) {\r\n");
      out.write("\t\t\t\t\t\t\tobj[key] = columns[i][key];\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\tme.oriGColumns.push(obj);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tvar colsStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\t\t\tfields : [ 'colFormats' ],\r\n");
      out.write("\t\t\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\t\t\t\t\turl : './../../PublicCtrl.dsc',\r\n");
      out.write("\t\t\t\t\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\t\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\textraParams : {\r\n");
      out.write("\t\t\t\t\t\t\t\tDCITag : this.postvalue,\r\n");
      out.write("\t\t\t\t\t\t\t\tuid : this.uid,\r\n");
      out.write("\t\t\t\t\t\t\t\taction : 'getGFormat',\r\n");
      out.write("\t\t\t\t\t\t\t\tgridid : this.gridid\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tcolsStore.load(function(record) {\r\n");
      out.write("\t\t\t\t\t\tif (record.length > 0) {\r\n");
      out.write("\t\t\t\t\t\t\tvar tmpstore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\t\t\t\t\tfields : [ 'col_id', 'col_index', 'col_width', 'col_visible' ],\r\n");
      out.write("\t\t\t\t\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\t\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttype : 'memory',\r\n");
      out.write("\t\t\t\t\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\ttmpstore.loadData(record[0].get('colFormats'));\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tif (tmpstore.getCount() > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\tme.addCusFormatIcon();\r\n");
      out.write("\t\t\t\t\t\t\t\tfor ( var i = 0; i < tmpstore.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfor ( var j = 0; j < cols.length; j++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (cols[j].colid == tmpstore.getAt(i).get('col_id')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (tmpstore.getAt(i).get('col_visible') == '1') {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('hidden')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tcols[j].hidden = false;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tcols[j]['hidden'] = false;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tif (tmpstore.getAt(i).get('col_width') != 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('width')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tcols[j].width = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tcols[j]['width'] = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tif (tmpstore.getAt(i).get('col_width') != 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('width')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tcols[j].width = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\tcols[j]['width'] = parseInt(tmpstore.getAt(i).get('col_width'));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tif (cols[j].hasOwnProperty('hidden')) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tcols[j].hidden = true;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tcols[j]['hidden'] = true;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\ttmpcols.push(cols[j]);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tcols.splice(j, 1);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\tif (cols != null && cols.leght != 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfor ( var i = 0; i < cols.length; i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tcols[i]['hidden'] = true;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttmpcols.push(cols[i]);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\ttmpcols = cols;\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tbodyGrid.reconfigure(store, tmpcols);\r\n");
      out.write("\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\tbodyGrid.reconfigure(store, cols);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\tme.changeMode(PageMode.Edit);\r\n");
      out.write("\t\t\t\t\tme.dataloaded(false);\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (me.languageObj != null) {\r\n");
      out.write("\t\t\t\t\t\tpanel.items.get(0).setText(me.languageObj.add);\r\n");
      out.write("\t\t\t\t\t\tpanel.items.get(1).setText(me.languageObj.save);\r\n");
      out.write("\t\t\t\t\t\tpanel.items.get(2).setText(me.languageObj._delete);\r\n");
      out.write("\t\t\t\t\t\tpanel.items.get(3).setText(me.languageObj.to_edit);\r\n");
      out.write("\t\t\t\t\t\tpanel.items.get(4).setText(me.languageObj.save_format);\r\n");
      out.write("\t\t\t\t\t\tpanel.items.get(5).setText(me.languageObj.load_def_format);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tif (this.headform != null) {\r\n");
      out.write("\t\t\t\t\t\tthis.headform.bodypanel = this;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tgetCurrMode : function() {\r\n");
      out.write("\t\t\t\t\treturn this.currmode;\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\taddNewRow : function() {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tdataloaded : function(loaded) {\r\n");
      out.write("\t\t\t\t\tvar btn = this.items.get(0).items.get(3);\r\n");
      out.write("\t\t\t\t\tif (btn != null) {\r\n");
      out.write("\t\t\t\t\t\tbtn.setDisabled(!loaded);\r\n");
      out.write("\t\t\t\t\t\tif (!loaded) {\r\n");
      out.write("\t\t\t\t\t\t\tthis.changeMode(PageMode.Edit);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tclearGrid : function() {\r\n");
      out.write("\t\t\t\t\tvar store = this.items.get(1).getStore();\r\n");
      out.write("\t\t\t\t\tif (store != null) {\r\n");
      out.write("\t\t\t\t\t\tstore.removeAll();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tchangeMode : function(mode) {\r\n");
      out.write("\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\tvar toolbtns = this.items.get(0).items;\r\n");
      out.write("\t\t\t\t\tif (mode == PageMode.View) {\r\n");
      out.write("\t\t\t\t\t\tfor ( var i = 0; i <= 3; i++) {\r\n");
      out.write("\t\t\t\t\t\t\tif (i == 3) {\r\n");
      out.write("\t\t\t\t\t\t\t\ttoolbtns.get(i).setText(me.languageObj.to_view);\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (this.stopUsingBtn != null && this.stopUsingBtn.length > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar stopuse = false;\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfor ( var j = 0; j < this.stopUsingBtn.length; j++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (this.stopUsingBtn[j] == i) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tstopuse = true;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttoolbtns.get(i).setDisabled(stopuse);\r\n");
      out.write("\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttoolbtns.get(i).setDisabled(false);\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tthis.currmode = PageMode.Edit;\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\tfor ( var i = 0; i <= 3; i++) {\r\n");
      out.write("\t\t\t\t\t\t\tif (i == 3) {\r\n");
      out.write("\t\t\t\t\t\t\t\ttoolbtns.get(i).setText(me.languageObj.to_edit);\r\n");
      out.write("\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\ttoolbtns.get(i).setDisabled(true);\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\tthis.currmode = PageMode.View;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tsetNewCondi : function() {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tgridReload : function() {\r\n");
      out.write("\t\t\t\t\tvar bodypanel = this;\r\n");
      out.write("\t\t\t\t\tvar grid = bodypanel.items.get(1);\r\n");
      out.write("\t\t\t\t\tif (grid != null) {\r\n");
      out.write("\t\t\t\t\t\tgrid.getStore().load();\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tgriddbclick : function(grid, td, cellIndex, record, tr, rowIndex, e, eOpts) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tgridselectionchange : function(row, selected, eOpts) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tgriddeselect : function(row, record, index, eOpts) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tgetGrid : function() {\r\n");
      out.write("\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\treturn me.items.get(1);\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tvalided : function() {\r\n");
      out.write("\t\t\t\t\treturn true;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar bodypanel = Ext.create('DCI.Customer.BodyGridPanel2', {\r\n");
      out.write("\t\t\t\ttitle : langs.group_role_edit,\r\n");
      out.write("\t\t\t\tlanguageObj : langs,\r\n");
      out.write("\t\t\t\tgridid : 'RoleConfig_G01',\r\n");
      out.write("\t\t\t\tactionurl : '../../Configs/RoleConfig.dsc',\r\n");
      out.write("\t\t\t\tpostvalue : postvalue,\r\n");
      out.write("\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\theadform : headform,\r\n");
      out.write("\t\t\t\tkeyfields : [ 'conn_id', 'role_id', 'func_id' ],\r\n");
      out.write("\t\t\t\tcanEdit : canEdit,\r\n");
      out.write("\t\t\t\ttransSource : [],\r\n");
      out.write("\t\t\t\ttransSource2 : [],\r\n");
      out.write("\t\t\t\ttransType : function(value) {\r\n");
      out.write("\t\t\t\t\tfor ( var i = 0; i < this.transSource.length; i++) {\r\n");
      out.write("\t\t\t\t\t\tif (this.transSource[i].value == value) {\r\n");
      out.write("\t\t\t\t\t\t\tvalue = this.transSource[i].label;\r\n");
      out.write("\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\treturn value;\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\ttransType2 : function(value) {\r\n");
      out.write("\t\t\t\t\tfor ( var i = 0; i < this.transSource2.length; i++) {\r\n");
      out.write("\t\t\t\t\t\tif (this.transSource2[i].value == value) {\r\n");
      out.write("\t\t\t\t\t\t\tvalue = this.transSource2[i].label;\r\n");
      out.write("\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\treturn value;\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\taddNewRow : function() {\r\n");
      out.write("\t\t\t\t\tvar grid = this.items.get(1);\r\n");
      out.write("\t\t\t\t\tvar gridStore = grid.getStore();\r\n");
      out.write("\t\t\t\t\tif (gridStore != null) {\r\n");
      out.write("\t\t\t\t\t\tgridStore.add({\r\n");
      out.write("\t\t\t\t\t\t\tconn_id : '',\r\n");
      out.write("\t\t\t\t\t\t\trole_id : this.headKeys.role_id,\r\n");
      out.write("\t\t\t\t\t\t\tfunc_id : '',\r\n");
      out.write("\t\t\t\t\t\t\tfunc_package : '',\r\n");
      out.write("\t\t\t\t\t\t\tcan_edit : false,\r\n");
      out.write("\t\t\t\t\t\t\tmoditag : 1,\r\n");
      out.write("\t\t\t\t\t\t\tmoditp : 'add'\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tgrid.getView().select(gridStore.getCount() - 1);\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tsetNewCondi : function() {\r\n");
      out.write("\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\tvar grid = me.getGrid();\r\n");
      out.write("\t\t\t\t\tvar store = grid.getStore();\r\n");
      out.write("\t\t\t\t\tvar head = me.headform;\r\n");
      out.write("\t\t\t\t\tif (store != null) {\r\n");
      out.write("\t\t\t\t\t\tif (store.getProxy().extraParams.hasOwnProperty('keys')) {\r\n");
      out.write("\t\t\t\t\t\t\tstore.getProxy().extraParams['keys'] = head.items.get(0).getValue();\r\n");
      out.write("\t\t\t\t\t\t\tvar obj = new Object();\r\n");
      out.write("\t\t\t\t\t\t\tobj[\"role_id\"] = head.items.get(0).getValue();\r\n");
      out.write("\t\t\t\t\t\t\tme.headKeys = obj;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar bodyColumns = [ {\r\n");
      out.write("\t\t\t\txtype : 'rownumberer',\r\n");
      out.write("\t\t\t\tcolid : 'colrownum',\r\n");
      out.write("\t\t\t\twidth : 40,\r\n");
      out.write("\t\t\t\tsortable : false,\r\n");
      out.write("\t\t\t\tlocked : true\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\ttext : langs.conn_id,\r\n");
      out.write("\t\t\t\tdataIndex : 'conn_id',\r\n");
      out.write("\t\t\t\tcolid : 'colconn_id',\r\n");
      out.write("\t\t\t\twidth : 200,\r\n");
      out.write("\t\t\t\trenderer : function(value) {\r\n");
      out.write("\t\t\t\t\ttry {\r\n");
      out.write("\t\t\t\t\t\tvalue = this.up().transType(value);\r\n");
      out.write("\t\t\t\t\t} catch (e) {\r\n");
      out.write("\t\t\t\t\t\tif (window.console) {\r\n");
      out.write("\t\t\t\t\t\t\tconsole.log(e.message);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\treturn value;\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\trender : function(comp, eOpts) {\r\n");
      out.write("\t\t\t\t\t\tvar e = Ext.create('DCI.Customer.ComboBox', {\r\n");
      out.write("\t\t\t\t\t\t\tlabelWidth : 0\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\te.getStore().loadData(this.up('panel').up('panel').transSource);\r\n");
      out.write("\t\t\t\t\t\tthis.setEditor(e);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\ttext : langs.func_id,\r\n");
      out.write("\t\t\t\tdataIndex : 'func_id',\r\n");
      out.write("\t\t\t\tcolid : 'colfunc_id',\r\n");
      out.write("\t\t\t\twidth : 200,\r\n");
      out.write("\t\t\t\t//editor : func_Combo,\r\n");
      out.write("\t\t\t\trenderer : function(value) {\r\n");
      out.write("\t\t\t\t\ttry {\r\n");
      out.write("\t\t\t\t\t\tvalue = this.up().transType2(value);\r\n");
      out.write("\t\t\t\t\t} catch (e) {\r\n");
      out.write("\t\t\t\t\t\tif (window.console) {\r\n");
      out.write("\t\t\t\t\t\t\tconsole.log(e.message);\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\treturn value;\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\trender : function(comp, eOpts) {\r\n");
      out.write("\t\t\t\t\t\tvar e = Ext.create('DCI.Customer.ComboBox', {\r\n");
      out.write("\t\t\t\t\t\t\tlabelWidth : 0,\r\n");
      out.write("\t\t\t\t\t\t\tstore : {\r\n");
      out.write("\t\t\t\t\t\t\t\tfields : [ 'label', 'value', 'package' ],\r\n");
      out.write("\t\t\t\t\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\t\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\ttype : 'memory',\r\n");
      out.write("\t\t\t\t\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\t\t\t\tchange : function(comp, newValue, oldValue, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar store = me.getStore();\r\n");
      out.write("\t\t\t\t\t\t\t\t\tvar gridStore = me.up().up().getStore();\r\n");
      out.write("\t\t\t\t\t\t\t\t\tfor ( var i = 0; i < store.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tif (store.getAt(i).get(\"value\") == newValue) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (gridStore != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tvar ridx = gridStore.getCount() - 1;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tif (ridx < 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tridx = 0;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tif (store.getAt(i).get(\"package\") == \"EKB\") {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\tgridStore.getAt(ridx).set(\"can_edit\", false);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tgridStore.getAt(ridx).set(\"func_package\", store.getAt(i).get(\"package\"));\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tgridStore.getAt(ridx).commit();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\tresize : function(combo, width, height, oldWidth, oldHeight, eOpts) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcombo.listConfig = {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tminWidth : width - combo.labelWidth\r\n");
      out.write("\t\t\t\t\t\t\t\t\t};\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\te.getStore().loadData(this.up('panel').up('panel').transSource2);\r\n");
      out.write("\t\t\t\t\t\tthis.setEditor(e);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}, {\r\n");
      out.write("\t\t\t\txtype : 'dcicheckcolumn',\r\n");
      out.write("\t\t\t\ttext : langs.can_edit,\r\n");
      out.write("\t\t\t\tdataIndex : 'can_edit',\r\n");
      out.write("\t\t\t\tcolid : 'colcan_edit',\r\n");
      out.write("\t\t\t\tcanEditControl : function(col, rowIndex) {\r\n");
      out.write("\t\t\t\t\tvar me = this;\r\n");
      out.write("\t\t\t\t\tvar gridStore = me.up().up().getStore();\r\n");
      out.write("\t\t\t\t\tif (gridStore == null) {\r\n");
      out.write("\t\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\treturn gridStore.getAt(rowIndex).get(\"func_package\") != \"EKB\";\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t} ];\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar bodyStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\tfields : [ 'role_id', 'func_id', 'conn_id', 'func_package', 'can_edit', 'moditag', 'moditp' ],\r\n");
      out.write("\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\t\t\turl : '../../Configs/RoleConfig.dsc',\r\n");
      out.write("\t\t\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\troot : 'items'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\textraParams : {\r\n");
      out.write("\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\taction : 'bodyData',\r\n");
      out.write("\t\t\t\t\t\tkeys : ''\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tlisteners : {\r\n");
      out.write("\t\t\t\t\tupdate : function(store, record, operation, eOpts) {\r\n");
      out.write("\t\t\t\t\t\tif (record.data.moditp == 'add') {\r\n");
      out.write("\t\t\t\t\t\t\tfor ( var i = 0; i < store.getCount(); i++) {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (store.getAt(i).id != record.id) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (record.data.conn_id == store.getAt(i).get(\"conn_id\") && record.data.func_id == store.getAt(i).get(\"func_id\")) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tExt.Msg.alert(langs.errmsg, langs.role_exist, function() {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tstore.remove(record);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar main = Ext.create('DCI.Customer.SubPanel', {\r\n");
      out.write("\t\t\t\tid : 'RoleConfigMain',\r\n");
      out.write("\t\t\t\trenderTo : 'RoleConfigPage',\r\n");
      out.write("\t\t\t\tborder : 0,\r\n");
      out.write("\t\t\t\t//pagetype : 'kanban',\r\n");
      out.write("\t\t\t\tbodyPadding : '0 5 5 5',\r\n");
      out.write("\t\t\t\tlayout : 'border',\r\n");
      out.write("\t\t\t\twidthChangeControls : [ headpanel, bodypanel ],\r\n");
      out.write("\t\t\t\titems : [ headpanel, bodypanel ]\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar initQueryStore = Ext.create('Ext.data.Store', {\r\n");
      out.write("\t\t\t\tautoLoad : false,\r\n");
      out.write("\t\t\t\tfields : [ 'conns', /* 'roles', */'funcs' ],\r\n");
      out.write("\t\t\t\tproxy : {\r\n");
      out.write("\t\t\t\t\ttype : 'ajax',\r\n");
      out.write("\t\t\t\t\turl : '../../Configs/RoleConfig.dsc',\r\n");
      out.write("\t\t\t\t\tactionMethods : {\r\n");
      out.write("\t\t\t\t\t\tread : 'POST'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\treader : {\r\n");
      out.write("\t\t\t\t\t\ttype : 'json'\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\textraParams : {\r\n");
      out.write("\t\t\t\t\t\tDCITag : postvalue,\r\n");
      out.write("\t\t\t\t\t\tuid : uid,\r\n");
      out.write("\t\t\t\t\t\taction : 'init'\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tinitQueryStore.load(function(records) {\r\n");
      out.write("\t\t\t\tif (records.length > 0) {\r\n");
      out.write("\t\t\t\t\tconn_Combo.getStore().loadData(records[0].get(\"conns\"));\r\n");
      out.write("\t\t\t\t\tfunc_Combo.getStore().loadData(records[0].get(\"funcs\"));\r\n");
      out.write("\t\t\t\t\tbodypanel.transSource = records[0].get(\"conns\");\r\n");
      out.write("\t\t\t\t\tbodypanel.transSource2 = records[0].get(\"funcs\");\r\n");
      out.write("\t\t\t\t\tbodypanel.initBody(bodyStore, bodyColumns);\r\n");
      out.write("\t\t\t\t\t/* visible_combo.loadDefault();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\tvisible_combo.listConfig = {\r\n");
      out.write("\t\t\t\t\t\tminWidth : visible_combo.getWidth() - visible_combo.getLabelWidth()\r\n");
      out.write("\t\t\t\t\t}; */\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\tmain.resize(Ext.get(\"RoleConfigPage\").getWidth(), Ext.get(\"RoleConfigPage\").getHeight());\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"RoleConfigPage\" class=\"page_div\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_dcitag_005freqParam_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  dcitag:reqParam
    com.dci.jweb.DCITags.Request.getReqParameter _jspx_th_dcitag_005freqParam_005f0 = (new com.dci.jweb.DCITags.Request.getReqParameter());
    _jsp_instancemanager.newInstance(_jspx_th_dcitag_005freqParam_005f0);
    _jspx_th_dcitag_005freqParam_005f0.setJspContext(_jspx_page_context);
    // /FuncViews/Configs/RoleConfig.jsp(8,7) name = paramName type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_dcitag_005freqParam_005f0.setParamName("func_name");
    _jspx_th_dcitag_005freqParam_005f0.doTag();
    _jsp_instancemanager.destroyInstance(_jspx_th_dcitag_005freqParam_005f0);
    return false;
  }

  private boolean _jspx_meth_dcitag_005freqParam_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  dcitag:reqParam
    com.dci.jweb.DCITags.Request.getReqParameter _jspx_th_dcitag_005freqParam_005f1 = (new com.dci.jweb.DCITags.Request.getReqParameter());
    _jsp_instancemanager.newInstance(_jspx_th_dcitag_005freqParam_005f1);
    _jspx_th_dcitag_005freqParam_005f1.setJspContext(_jspx_page_context);
    // /FuncViews/Configs/RoleConfig.jsp(19,13) name = paramName type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_dcitag_005freqParam_005f1.setParamName("uid");
    _jspx_th_dcitag_005freqParam_005f1.doTag();
    _jsp_instancemanager.destroyInstance(_jspx_th_dcitag_005freqParam_005f1);
    return false;
  }

  private boolean _jspx_meth_dcitag_005freqParam_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  dcitag:reqParam
    com.dci.jweb.DCITags.Request.getReqParameter _jspx_th_dcitag_005freqParam_005f2 = (new com.dci.jweb.DCITags.Request.getReqParameter());
    _jsp_instancemanager.newInstance(_jspx_th_dcitag_005freqParam_005f2);
    _jspx_th_dcitag_005freqParam_005f2.setJspContext(_jspx_page_context);
    // /FuncViews/Configs/RoleConfig.jsp(25,52) name = paramName type = java.lang.String reqTime = false required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_dcitag_005freqParam_005f2.setParamName("canEdit");
    _jspx_th_dcitag_005freqParam_005f2.doTag();
    _jsp_instancemanager.destroyInstance(_jspx_th_dcitag_005freqParam_005f2);
    return false;
  }
}
